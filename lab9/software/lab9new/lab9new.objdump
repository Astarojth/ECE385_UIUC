
lab9new.elf:     file format elf32-littlenios2
lab9new.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0000e3f4 memsz 0x0000e3f4 flags r-x
    LOAD off    0x0000f414 vaddr 0x1000e414 paddr 0x10010358 align 2**12
         filesz 0x00001f44 memsz 0x00001f44 flags rw-
    LOAD off    0x0001229c vaddr 0x1001229c paddr 0x1001229c align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000de94  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000350  1000e0c4  1000e0c4  0000f0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f44  1000e414  10010358  0000f414  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  1001229c  1001229c  0001229c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00011358  2**0
                  CONTENTS
  7 .sdram        00000000  100123fc  100123fc  00011358  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000b80  00000000  00000000  00011380  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000165c9  00000000  00000000  00011f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006326  00000000  00000000  000284c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008328  00000000  00000000  0002e7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000182c  00000000  00000000  00036b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000031f4  00000000  00000000  00038344  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00015095  00000000  00000000  0003b538  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000505d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001408  00000000  00000000  00050610  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0005447a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0005447d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00054489  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0005448a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0005448b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0005448f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00054493  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00054497  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000544a2  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000544ad  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000544b8  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000000e  00000000  00000000  000544c0  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1a  00000000  00000000  000544ce  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00058369  00000000  00000000  000593e8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
1000e0c4 l    d  .rodata	00000000 .rodata
1000e414 l    d  .rwdata	00000000 .rwdata
1001229c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100123fc l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9new_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10010310 l     O .rwdata	00000004 vga_ctrl
1000e414 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 palette_test.c
10010314 l     O .rwdata	00000004 vga_ctrl
1000e584 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
10010318 l     O .rwdata	00000004 vga_ctrl
1000e6f4 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000e15a l     O .rodata	00000010 zeroes.4389
1000e16a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
1000301c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
1000e864 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1000eca8 l     O .rwdata	00000020 lc_ctype_charset
1000ec88 l     O .rwdata	00000020 lc_message_charset
1000ecc8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
1000e19c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000e2c0 l     O .rodata	00000010 zeroes.4333
1000e2d0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
1000be14 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10010330 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000c0a4 l     F .text	00000034 alt_dev_reg
1000f108 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000c380 l     F .text	0000020c altera_avalon_jtag_uart_irq
1000c58c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
1000ce48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
1000cf7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000cfa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000d408 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000d568 l     F .text	0000003c alt_get_errno
1000d5a4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
100122d0 g     O .bss	00000004 alt_instruction_exception_handler
10006320 g     F .text	00000074 _mprec_log10
1000640c g     F .text	0000008c __any_on
1000e1a8 g     O .rodata	00000028 __mprec_tinytens
1000bf00 g     F .text	0000007c alt_main
100122fc g     O .bss	00000100 alt_irq
10010358 g       *ABS*	00000000 __flash_rwdata_start
1000a7ec g     F .text	00000088 .hidden __eqdf2
100123fc g       *ABS*	00000000 __alt_heap_start
100048cc g     F .text	0000007c _setlocale_r
1000bfa0 g     F .text	00000024 __malloc_unlock
10000740 g     F .text	0000026c textVGAColorScreenSaver
100080bc g     F .text	0000015c memmove
100053e0 g     F .text	000000a8 _Balloc
1000a874 g     F .text	000000dc .hidden __gtdf2
1000da14 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100122b4 g     O .bss	00000004 errno
1000680c g     F .text	000013a0 ___svfiprintf_internal_r
100122bc g     O .bss	00000004 alt_argv
10018310 g       *ABS*	00000000 _gp
1000c074 g     F .text	00000030 usleep
10000438 g     F .text	00000050 textVGAColorClr
10010190 g     O .rwdata	00000180 alt_fd_list
1000da38 g     F .text	00000090 alt_find_dev
10005298 g     F .text	00000148 memcpy
1000bc2c g     F .text	000000dc .hidden __floatsidf
1000d4ec g     F .text	0000007c alt_io_redirect
1000a950 g     F .text	000000f4 .hidden __ltdf2
1000e0c4 g       *ABS*	00000000 __DTOR_END__
1000dc94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10006498 g     F .text	00000074 __fpclassifyd
1000627c g     F .text	000000a4 __ratio
1000c784 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000aa4 g     F .text	00000064 .hidden __udivsi3
1000e1f8 g     O .rodata	000000c8 __mprec_tens
10004948 g     F .text	0000000c __locale_charset
100122b0 g     O .bss	00000004 __malloc_top_pad
10010324 g     O .rwdata	00000004 __mb_cur_max
10004978 g     F .text	0000000c _localeconv_r
10005814 g     F .text	0000003c __i2b
1000650c g     F .text	00000054 _sbrk_r
10010344 g     O .rwdata	00000004 alt_max_fd
100122ac g     O .bss	00000004 __malloc_max_sbrked_mem
10009570 g     F .text	000008ac .hidden __adddf3
10006024 g     F .text	0000010c __b2d
10008fac g     F .text	000005c4 .hidden __umoddi3
1001031c g     O .rwdata	00000004 _global_impure_ptr
10008340 g     F .text	00000564 _realloc_r
100123fc g       *ABS*	00000000 __bss_end
1000d318 g     F .text	000000f0 alt_iic_isr_register
1000d90c g     F .text	00000108 alt_tick
100089b0 g     F .text	000005fc .hidden __udivdi3
1000e1d0 g     O .rodata	00000028 __mprec_bigtens
100055f8 g     F .text	00000104 __s2b
1000bd08 g     F .text	000000a8 .hidden __floatunsidf
10005d64 g     F .text	00000060 __mcmp
1000d2cc g     F .text	0000004c alt_ic_irq_enabled
1000d870 g     F .text	0000009c alt_alarm_stop
100122c4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10010168 g     O .rwdata	00000028 alt_dev_null
1000cf5c g     F .text	00000020 alt_dcache_flush_all
100056fc g     F .text	00000068 __hi0bits
1000bbac g     F .text	00000080 .hidden __fixdfsi
10010358 g       *ABS*	00000000 __ram_rwdata_end
1001033c g     O .rwdata	00000008 alt_dev_list
1000e414 g       *ABS*	00000000 __ram_rodata_end
1000a950 g     F .text	000000f4 .hidden __ledf2
10005adc g     F .text	00000140 __pow5mult
100122a4 g     O .bss	00000004 __nlocale_changed
10000b08 g     F .text	00000058 .hidden __umodsi3
100123fc g       *ABS*	00000000 end
1000c2c0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
1000e0c4 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000bdb0 g     F .text	00000064 .hidden __clzsi2
1000c9a0 g     F .text	00000224 altera_avalon_jtag_uart_write
100051b4 g     F .text	000000e4 memchr
10000c04 g     F .text	00000058 _sprintf_r
10007dac g     F .text	00000310 _free_r
10004954 g     F .text	00000010 __locale_mb_cur_max
1000df10 g     F .text	00000180 __call_exitprocs
100122a0 g     O .bss	00000004 __mlocale_changed
10010328 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100122c8 g     O .bss	00000004 _alt_tick_rate
10000ba0 g     F .text	00000064 rand
10005c1c g     F .text	00000148 __lshift
100122cc g     O .bss	00000004 _alt_nticks
1000c110 g     F .text	0000004c alt_sys_init
1000663c g     F .text	000001d0 __ssprint_r
1000ddf8 g     F .text	00000118 __register_exitproc
10005850 g     F .text	0000028c __multiply
1000c62c g     F .text	00000068 altera_avalon_jtag_uart_close
10000b60 g     F .text	00000028 .hidden __mulsi3
1000e414 g       *ABS*	00000000 __ram_rwdata_start
1000e0c4 g       *ABS*	00000000 __ram_rodata_start
100122d4 g     O .bss	00000028 __malloc_current_mallinfo
10006130 g     F .text	0000014c __d2b
1000c15c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000dbd0 g     F .text	000000c4 alt_get_fd
1000ccf0 g     F .text	00000158 alt_busy_sleep
1000dd7c g     F .text	0000007c memcmp
1000c21c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100123fc g       *ABS*	00000000 __alt_stack_base
1000c26c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10009e1c g     F .text	000009d0 .hidden __divdf3
10006394 g     F .text	00000078 __copybits
1000ed00 g     O .rwdata	00000408 __malloc_av_
1000aa44 g     F .text	0000086c .hidden __muldf3
1000dac8 g     F .text	00000108 alt_find_file
1000cfe4 g     F .text	000000a4 alt_dev_llist_insert
1000bf7c g     F .text	00000024 __malloc_lock
1000bfc4 g     F .text	000000b0 sbrk
10000d60 g     F .text	000022bc ___svfprintf_internal_r
10007bac g     F .text	000000dc _calloc_r
1001229c g       *ABS*	00000000 __bss_start
10008218 g     F .text	00000128 memset
1000026c g     F .text	00000018 main
100122c0 g     O .bss	00000004 alt_envp
100122a8 g     O .bss	00000004 __malloc_max_total_mem
1000c1bc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10000b88 g     F .text	00000018 srand
18000000 g       *ABS*	00000000 __alt_heap_limit
10003244 g     F .text	00001688 _dtoa_r
100049a8 g     F .text	0000080c _malloc_r
10010348 g     O .rwdata	00000004 alt_errno
100009ac g     F .text	00000084 .hidden __divsi3
10000598 g     F .text	000001a8 setColorPalette
10007c88 g     F .text	00000124 _malloc_trim_r
1000e0c4 g       *ABS*	00000000 __CTOR_END__
10006560 g     F .text	000000dc strcmp
1000e0c4 g       *ABS*	00000000 __flash_rodata_start
1000e0c4 g       *ABS*	00000000 __DTOR_LIST__
1000a7ec g     F .text	00000088 .hidden __nedf2
1000c0d8 g     F .text	00000038 alt_irq_init
1000d7ec g     F .text	00000084 alt_release_fd
10000c5c g     F .text	0000006c sprintf
1000e2e0 g     O .rodata	00000100 .hidden __clz_tab
1001229c g     O .bss	00000004 _PathLocale
1000dd30 g     F .text	00000014 atexit
10004984 g     F .text	00000018 setlocale
10010320 g     O .rwdata	00000004 _impure_ptr
100122b8 g     O .bss	00000004 alt_argc
1000d0e8 g     F .text	00000060 _do_dtors
10004970 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10005fc0 g     F .text	00000064 __ulp
10010334 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000499c g     F .text	0000000c localeconv
1000d168 g     F .text	00000050 alt_ic_isr_register
10010358 g       *ABS*	00000000 _edata
100123fc g       *ABS*	00000000 _end
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000c694 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10000488 g     F .text	00000110 textVGADrawColorText
1000d240 g     F .text	0000008c alt_ic_irq_disable
1001032c g     O .rwdata	00000004 __malloc_trim_threshold
10004964 g     F .text	0000000c __locale_msgcharset
1000dd44 g     F .text	00000038 exit
10005dc4 g     F .text	000001fc __mdiff
10000a30 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000e090 g     F .text	00000034 _exit
1000cbc4 g     F .text	0000012c alt_alarm_start
100088a4 g     F .text	0000010c .hidden __muldi3
10000cc8 g     F .text	00000098 strlen
1000d690 g     F .text	0000015c open
1000a874 g     F .text	000000dc .hidden __gedf2
1000d148 g     F .text	00000020 alt_icache_flush_all
1001034c g     O .rwdata	00000004 alt_priority_mask
1000d1b8 g     F .text	00000088 alt_ic_irq_enable
1000b2b0 g     F .text	000008fc .hidden __subdf3
10005764 g     F .text	000000b0 __lo0bits
10010350 g     O .rwdata	00000008 alt_alarm_list
1000d088 g     F .text	00000060 _do_ctors
1000ce84 g     F .text	000000d8 close
10000284 g     F .text	000001b4 paletteTest
1000be7c g     F .text	00000084 alt_load
100054b0 g     F .text	00000148 __multadd
10005488 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	1088bf04 	addi	r2,r2,8956
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	1088bf04 	addi	r2,r2,8956
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a7f017 	ldw	r2,-24640(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a7f017 	ldw	r2,-24640(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6a0c414 	ori	gp,gp,33552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	1088a714 	ori	r2,r2,8860

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18c8ff14 	ori	r3,r3,9212

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000be7c0 	call	1000be7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000bf000 	call	1000bf00 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <main>:
#include "text_mode_vga_color.h"



int main(){
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	dfc00115 	stw	ra,4(sp)
10000274:	df000015 	stw	fp,0(sp)
10000278:	d839883a 	mov	fp,sp
	while(1){
		//textVGATest();
		textVGAColorScreenSaver();
1000027c:	00007400 	call	10000740 <textVGAColorScreenSaver>
	}
10000280:	003ffe06 	br	1000027c <__alt_data_end+0xf800027c>

10000284 <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
10000284:	defffa04 	addi	sp,sp,-24
10000288:	dfc00515 	stw	ra,20(sp)
1000028c:	df000415 	stw	fp,16(sp)
10000290:	dc400315 	stw	r17,12(sp)
10000294:	dc000215 	stw	r16,8(sp)
10000298:	df000404 	addi	fp,sp,16
	textVGAColorClr();
1000029c:	00004380 	call	10000438 <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
100002a0:	00800044 	movi	r2,1
100002a4:	d8800015 	stw	r2,0(sp)
100002a8:	000f883a 	mov	r7,zero
100002ac:	000d883a 	mov	r6,zero
100002b0:	000b883a 	mov	r5,zero
100002b4:	01040074 	movhi	r4,4097
100002b8:	21383104 	addi	r4,r4,-7996
100002bc:	00004880 	call	10000488 <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
100002c0:	e03ffd15 	stw	zero,-12(fp)
100002c4:	00005106 	br	1000040c <paletteTest+0x188>
	{
		usleep (20000);
100002c8:	01138804 	movi	r4,20000
100002cc:	000c0740 	call	1000c074 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
100002d0:	0000ba00 	call	10000ba0 <rand>
100002d4:	1007883a 	mov	r3,r2
100002d8:	00a00034 	movhi	r2,32768
100002dc:	108003c4 	addi	r2,r2,15
100002e0:	1884703a 	and	r2,r3,r2
100002e4:	1000040e 	bge	r2,zero,100002f8 <paletteTest+0x74>
100002e8:	10bfffc4 	addi	r2,r2,-1
100002ec:	00fffc04 	movi	r3,-16
100002f0:	10c4b03a 	or	r2,r2,r3
100002f4:	10800044 	addi	r2,r2,1
100002f8:	14003fcc 	andi	r16,r2,255
100002fc:	0000ba00 	call	10000ba0 <rand>
10000300:	1007883a 	mov	r3,r2
10000304:	00a00034 	movhi	r2,32768
10000308:	108003c4 	addi	r2,r2,15
1000030c:	1884703a 	and	r2,r3,r2
10000310:	1000040e 	bge	r2,zero,10000324 <paletteTest+0xa0>
10000314:	10bfffc4 	addi	r2,r2,-1
10000318:	00fffc04 	movi	r3,-16
1000031c:	10c4b03a 	or	r2,r2,r3
10000320:	10800044 	addi	r2,r2,1
10000324:	14403fcc 	andi	r17,r2,255
10000328:	0000ba00 	call	10000ba0 <rand>
1000032c:	1007883a 	mov	r3,r2
10000330:	00a00034 	movhi	r2,32768
10000334:	108003c4 	addi	r2,r2,15
10000338:	1884703a 	and	r2,r3,r2
1000033c:	1000040e 	bge	r2,zero,10000350 <paletteTest+0xcc>
10000340:	10bfffc4 	addi	r2,r2,-1
10000344:	00fffc04 	movi	r3,-16
10000348:	10c4b03a 	or	r2,r2,r3
1000034c:	10800044 	addi	r2,r2,1
10000350:	10803fcc 	andi	r2,r2,255
10000354:	100f883a 	mov	r7,r2
10000358:	880d883a 	mov	r6,r17
1000035c:	800b883a 	mov	r5,r16
10000360:	0009883a 	mov	r4,zero
10000364:	00005980 	call	10000598 <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
10000368:	0000ba00 	call	10000ba0 <rand>
1000036c:	1007883a 	mov	r3,r2
10000370:	00a00034 	movhi	r2,32768
10000374:	108003c4 	addi	r2,r2,15
10000378:	1884703a 	and	r2,r3,r2
1000037c:	1000040e 	bge	r2,zero,10000390 <paletteTest+0x10c>
10000380:	10bfffc4 	addi	r2,r2,-1
10000384:	00fffc04 	movi	r3,-16
10000388:	10c4b03a 	or	r2,r2,r3
1000038c:	10800044 	addi	r2,r2,1
10000390:	14003fcc 	andi	r16,r2,255
10000394:	0000ba00 	call	10000ba0 <rand>
10000398:	1007883a 	mov	r3,r2
1000039c:	00a00034 	movhi	r2,32768
100003a0:	108003c4 	addi	r2,r2,15
100003a4:	1884703a 	and	r2,r3,r2
100003a8:	1000040e 	bge	r2,zero,100003bc <paletteTest+0x138>
100003ac:	10bfffc4 	addi	r2,r2,-1
100003b0:	00fffc04 	movi	r3,-16
100003b4:	10c4b03a 	or	r2,r2,r3
100003b8:	10800044 	addi	r2,r2,1
100003bc:	14403fcc 	andi	r17,r2,255
100003c0:	0000ba00 	call	10000ba0 <rand>
100003c4:	1007883a 	mov	r3,r2
100003c8:	00a00034 	movhi	r2,32768
100003cc:	108003c4 	addi	r2,r2,15
100003d0:	1884703a 	and	r2,r3,r2
100003d4:	1000040e 	bge	r2,zero,100003e8 <paletteTest+0x164>
100003d8:	10bfffc4 	addi	r2,r2,-1
100003dc:	00fffc04 	movi	r3,-16
100003e0:	10c4b03a 	or	r2,r2,r3
100003e4:	10800044 	addi	r2,r2,1
100003e8:	10803fcc 	andi	r2,r2,255
100003ec:	100f883a 	mov	r7,r2
100003f0:	880d883a 	mov	r6,r17
100003f4:	800b883a 	mov	r5,r16
100003f8:	01000044 	movi	r4,1
100003fc:	00005980 	call	10000598 <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
10000400:	e0bffd17 	ldw	r2,-12(fp)
10000404:	10800044 	addi	r2,r2,1
10000408:	e0bffd15 	stw	r2,-12(fp)
1000040c:	e0bffd17 	ldw	r2,-12(fp)
10000410:	10801910 	cmplti	r2,r2,100
10000414:	103fac1e 	bne	r2,zero,100002c8 <__alt_data_end+0xf80002c8>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
10000418:	0001883a 	nop
1000041c:	e6fffe04 	addi	sp,fp,-8
10000420:	dfc00317 	ldw	ra,12(sp)
10000424:	df000217 	ldw	fp,8(sp)
10000428:	dc400117 	ldw	r17,4(sp)
1000042c:	dc000017 	ldw	r16,0(sp)
10000430:	dec00404 	addi	sp,sp,16
10000434:	f800283a 	ret

10000438 <textVGAColorClr>:
#include <alt_types.h>
#include "text_mode_vga_color.h"
#include "palette_test.h"

void textVGAColorClr()
{
10000438:	defffe04 	addi	sp,sp,-8
1000043c:	df000115 	stw	fp,4(sp)
10000440:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
10000444:	e03fff15 	stw	zero,-4(fp)
10000448:	00000706 	br	10000468 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
1000044c:	d0e00217 	ldw	r3,-32760(gp)
10000450:	e0bfff17 	ldw	r2,-4(fp)
10000454:	1885883a 	add	r2,r3,r2
10000458:	10000005 	stb	zero,0(r2)
#include "text_mode_vga_color.h"
#include "palette_test.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
1000045c:	e0bfff17 	ldw	r2,-4(fp)
10000460:	10800044 	addi	r2,r2,1
10000464:	e0bfff15 	stw	r2,-4(fp)
10000468:	e0bfff17 	ldw	r2,-4(fp)
1000046c:	1084b010 	cmplti	r2,r2,4800
10000470:	103ff61e 	bne	r2,zero,1000044c <__alt_data_end+0xf800044c>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
10000474:	0001883a 	nop
10000478:	e037883a 	mov	sp,fp
1000047c:	df000017 	ldw	fp,0(sp)
10000480:	dec00104 	addi	sp,sp,4
10000484:	f800283a 	ret

10000488 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
10000488:	defff704 	addi	sp,sp,-36
1000048c:	dfc00815 	stw	ra,32(sp)
10000490:	df000715 	stw	fp,28(sp)
10000494:	dc000615 	stw	r16,24(sp)
10000498:	df000704 	addi	fp,sp,28
1000049c:	e13ffa15 	stw	r4,-24(fp)
100004a0:	e17ffb15 	stw	r5,-20(fp)
100004a4:	e1bffc15 	stw	r6,-16(fp)
100004a8:	3807883a 	mov	r3,r7
100004ac:	e0800217 	ldw	r2,8(fp)
100004b0:	e0fffd05 	stb	r3,-12(fp)
100004b4:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
100004b8:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
100004bc:	00002706 	br	1000055c <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
100004c0:	d4200217 	ldw	r16,-32760(gp)
100004c4:	01401404 	movi	r5,80
100004c8:	e13ffc17 	ldw	r4,-16(fp)
100004cc:	0000b600 	call	10000b60 <__mulsi3>
100004d0:	1007883a 	mov	r3,r2
100004d4:	e0bffb17 	ldw	r2,-20(fp)
100004d8:	1887883a 	add	r3,r3,r2
100004dc:	e0bff917 	ldw	r2,-28(fp)
100004e0:	1885883a 	add	r2,r3,r2
100004e4:	1085883a 	add	r2,r2,r2
100004e8:	1009883a 	mov	r4,r2
100004ec:	e0bffe03 	ldbu	r2,-8(fp)
100004f0:	1004913a 	slli	r2,r2,4
100004f4:	1007883a 	mov	r3,r2
100004f8:	e0bffd03 	ldbu	r2,-12(fp)
100004fc:	1884b03a 	or	r2,r3,r2
10000500:	1007883a 	mov	r3,r2
10000504:	8105883a 	add	r2,r16,r4
10000508:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
1000050c:	d4200217 	ldw	r16,-32760(gp)
10000510:	01401404 	movi	r5,80
10000514:	e13ffc17 	ldw	r4,-16(fp)
10000518:	0000b600 	call	10000b60 <__mulsi3>
1000051c:	1007883a 	mov	r3,r2
10000520:	e0bffb17 	ldw	r2,-20(fp)
10000524:	1887883a 	add	r3,r3,r2
10000528:	e0bff917 	ldw	r2,-28(fp)
1000052c:	1885883a 	add	r2,r3,r2
10000530:	1085883a 	add	r2,r2,r2
10000534:	10800044 	addi	r2,r2,1
10000538:	e0fff917 	ldw	r3,-28(fp)
1000053c:	e13ffa17 	ldw	r4,-24(fp)
10000540:	20c7883a 	add	r3,r4,r3
10000544:	18c00003 	ldbu	r3,0(r3)
10000548:	8085883a 	add	r2,r16,r2
1000054c:	10c00005 	stb	r3,0(r2)
		i++;
10000550:	e0bff917 	ldw	r2,-28(fp)
10000554:	10800044 	addi	r2,r2,1
10000558:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
1000055c:	e0bff917 	ldw	r2,-28(fp)
10000560:	e0fffa17 	ldw	r3,-24(fp)
10000564:	1885883a 	add	r2,r3,r2
10000568:	10800003 	ldbu	r2,0(r2)
1000056c:	10803fcc 	andi	r2,r2,255
10000570:	1080201c 	xori	r2,r2,128
10000574:	10bfe004 	addi	r2,r2,-128
10000578:	103fd11e 	bne	r2,zero,100004c0 <__alt_data_end+0xf80004c0>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
1000057c:	0001883a 	nop
10000580:	e6ffff04 	addi	sp,fp,-4
10000584:	dfc00217 	ldw	ra,8(sp)
10000588:	df000117 	ldw	fp,4(sp)
1000058c:	dc000017 	ldw	r16,0(sp)
10000590:	dec00304 	addi	sp,sp,12
10000594:	f800283a 	ret

10000598 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
10000598:	defffb04 	addi	sp,sp,-20
1000059c:	df000415 	stw	fp,16(sp)
100005a0:	df000404 	addi	fp,sp,16
100005a4:	2011883a 	mov	r8,r4
100005a8:	2809883a 	mov	r4,r5
100005ac:	3007883a 	mov	r3,r6
100005b0:	3805883a 	mov	r2,r7
100005b4:	e23ffc05 	stb	r8,-16(fp)
100005b8:	e13ffd05 	stb	r4,-12(fp)
100005bc:	e0fffe05 	stb	r3,-8(fp)
100005c0:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	 if (color % 2 == 0)
100005c4:	e0bffc03 	ldbu	r2,-16(fp)
100005c8:	1080004c 	andi	r2,r2,1
100005cc:	10803fcc 	andi	r2,r2,255
100005d0:	10002c1e 	bne	r2,zero,10000684 <setColorPalette+0xec>
	    {
	    	vga_ctrl->PALETTE[color / 2] &= 0xFFFFE000;
100005d4:	d1200217 	ldw	r4,-32760(gp)
100005d8:	e0bffc03 	ldbu	r2,-16(fp)
100005dc:	1004d07a 	srli	r2,r2,1
100005e0:	11403fcc 	andi	r5,r2,255
100005e4:	d0e00217 	ldw	r3,-32760(gp)
100005e8:	10803fcc 	andi	r2,r2,255
100005ec:	10820004 	addi	r2,r2,2048
100005f0:	1085883a 	add	r2,r2,r2
100005f4:	1085883a 	add	r2,r2,r2
100005f8:	1885883a 	add	r2,r3,r2
100005fc:	10c00017 	ldw	r3,0(r2)
10000600:	00b80004 	movi	r2,-8192
10000604:	1886703a 	and	r3,r3,r2
10000608:	28820004 	addi	r2,r5,2048
1000060c:	1085883a 	add	r2,r2,r2
10000610:	1085883a 	add	r2,r2,r2
10000614:	2085883a 	add	r2,r4,r2
10000618:	10c00015 	stw	r3,0(r2)
	        vga_ctrl->PALETTE[color / 2] |= red << 9 | green << 5 | blue << 1;
1000061c:	d1200217 	ldw	r4,-32760(gp)
10000620:	e0bffc03 	ldbu	r2,-16(fp)
10000624:	1004d07a 	srli	r2,r2,1
10000628:	11403fcc 	andi	r5,r2,255
1000062c:	d0e00217 	ldw	r3,-32760(gp)
10000630:	10803fcc 	andi	r2,r2,255
10000634:	10820004 	addi	r2,r2,2048
10000638:	1085883a 	add	r2,r2,r2
1000063c:	1085883a 	add	r2,r2,r2
10000640:	1885883a 	add	r2,r3,r2
10000644:	10c00017 	ldw	r3,0(r2)
10000648:	e0bffd03 	ldbu	r2,-12(fp)
1000064c:	100c927a 	slli	r6,r2,9
10000650:	e0bffe03 	ldbu	r2,-8(fp)
10000654:	1004917a 	slli	r2,r2,5
10000658:	308cb03a 	or	r6,r6,r2
1000065c:	e0bfff03 	ldbu	r2,-4(fp)
10000660:	1085883a 	add	r2,r2,r2
10000664:	3084b03a 	or	r2,r6,r2
10000668:	1886b03a 	or	r3,r3,r2
1000066c:	28820004 	addi	r2,r5,2048
10000670:	1085883a 	add	r2,r2,r2
10000674:	1085883a 	add	r2,r2,r2
10000678:	2085883a 	add	r2,r4,r2
1000067c:	10c00015 	stw	r3,0(r2)
	    else
	    {
	    	vga_ctrl->PALETTE[color / 2] &= 0x00001FFF;
	        vga_ctrl->PALETTE[color / 2] |= red << 21 | green << 17 | blue << 13;
	    }
}
10000680:	00002a06 	br	1000072c <setColorPalette+0x194>
	    	vga_ctrl->PALETTE[color / 2] &= 0xFFFFE000;
	        vga_ctrl->PALETTE[color / 2] |= red << 9 | green << 5 | blue << 1;
	    }
	    else
	    {
	    	vga_ctrl->PALETTE[color / 2] &= 0x00001FFF;
10000684:	d1200217 	ldw	r4,-32760(gp)
10000688:	e0bffc03 	ldbu	r2,-16(fp)
1000068c:	1004d07a 	srli	r2,r2,1
10000690:	11403fcc 	andi	r5,r2,255
10000694:	d0e00217 	ldw	r3,-32760(gp)
10000698:	10803fcc 	andi	r2,r2,255
1000069c:	10820004 	addi	r2,r2,2048
100006a0:	1085883a 	add	r2,r2,r2
100006a4:	1085883a 	add	r2,r2,r2
100006a8:	1885883a 	add	r2,r3,r2
100006ac:	10800017 	ldw	r2,0(r2)
100006b0:	10c7ffcc 	andi	r3,r2,8191
100006b4:	28820004 	addi	r2,r5,2048
100006b8:	1085883a 	add	r2,r2,r2
100006bc:	1085883a 	add	r2,r2,r2
100006c0:	2085883a 	add	r2,r4,r2
100006c4:	10c00015 	stw	r3,0(r2)
	        vga_ctrl->PALETTE[color / 2] |= red << 21 | green << 17 | blue << 13;
100006c8:	d1200217 	ldw	r4,-32760(gp)
100006cc:	e0bffc03 	ldbu	r2,-16(fp)
100006d0:	1004d07a 	srli	r2,r2,1
100006d4:	11403fcc 	andi	r5,r2,255
100006d8:	d0e00217 	ldw	r3,-32760(gp)
100006dc:	10803fcc 	andi	r2,r2,255
100006e0:	10820004 	addi	r2,r2,2048
100006e4:	1085883a 	add	r2,r2,r2
100006e8:	1085883a 	add	r2,r2,r2
100006ec:	1885883a 	add	r2,r3,r2
100006f0:	10800017 	ldw	r2,0(r2)
100006f4:	e0fffd03 	ldbu	r3,-12(fp)
100006f8:	180c957a 	slli	r6,r3,21
100006fc:	e0fffe03 	ldbu	r3,-8(fp)
10000700:	1806947a 	slli	r3,r3,17
10000704:	30ccb03a 	or	r6,r6,r3
10000708:	e0ffff03 	ldbu	r3,-4(fp)
1000070c:	1806937a 	slli	r3,r3,13
10000710:	30c6b03a 	or	r3,r6,r3
10000714:	10c6b03a 	or	r3,r2,r3
10000718:	28820004 	addi	r2,r5,2048
1000071c:	1085883a 	add	r2,r2,r2
10000720:	1085883a 	add	r2,r2,r2
10000724:	2085883a 	add	r2,r4,r2
10000728:	10c00015 	stw	r3,0(r2)
	    }
}
1000072c:	0001883a 	nop
10000730:	e037883a 	mov	sp,fp
10000734:	df000017 	ldw	fp,0(sp)
10000738:	dec00104 	addi	sp,sp,4
1000073c:	f800283a 	ret

10000740 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
10000740:	deffe004 	addi	sp,sp,-128
10000744:	dfc01f15 	stw	ra,124(sp)
10000748:	df001e15 	stw	fp,120(sp)
1000074c:	dcc01d15 	stw	r19,116(sp)
10000750:	dc801c15 	stw	r18,112(sp)
10000754:	dc401b15 	stw	r17,108(sp)
10000758:	dc001a15 	stw	r16,104(sp)
1000075c:	df001e04 	addi	fp,sp,120
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
10000760:	00004380 	call	10000438 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
10000764:	e03fe515 	stw	zero,-108(fp)
10000768:	00002806 	br	1000080c <textVGAColorScreenSaver+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
1000076c:	e0bfe517 	ldw	r2,-108(fp)
10000770:	14403fcc 	andi	r17,r2,255
10000774:	04040074 	movhi	r16,4097
10000778:	8439bd04 	addi	r16,r16,-6412
1000077c:	e0bfe517 	ldw	r2,-108(fp)
10000780:	014005c4 	movi	r5,23
10000784:	1009883a 	mov	r4,r2
10000788:	0000b600 	call	10000b60 <__mulsi3>
1000078c:	8085883a 	add	r2,r16,r2
10000790:	10800504 	addi	r2,r2,20
10000794:	10800003 	ldbu	r2,0(r2)
10000798:	14803fcc 	andi	r18,r2,255
1000079c:	04040074 	movhi	r16,4097
100007a0:	8439bd04 	addi	r16,r16,-6412
100007a4:	e0bfe517 	ldw	r2,-108(fp)
100007a8:	014005c4 	movi	r5,23
100007ac:	1009883a 	mov	r4,r2
100007b0:	0000b600 	call	10000b60 <__mulsi3>
100007b4:	8085883a 	add	r2,r16,r2
100007b8:	10800544 	addi	r2,r2,21
100007bc:	10800003 	ldbu	r2,0(r2)
100007c0:	14c03fcc 	andi	r19,r2,255
100007c4:	04040074 	movhi	r16,4097
100007c8:	8439bd04 	addi	r16,r16,-6412
100007cc:	e0bfe517 	ldw	r2,-108(fp)
100007d0:	014005c4 	movi	r5,23
100007d4:	1009883a 	mov	r4,r2
100007d8:	0000b600 	call	10000b60 <__mulsi3>
100007dc:	8085883a 	add	r2,r16,r2
100007e0:	10800584 	addi	r2,r2,22
100007e4:	10800003 	ldbu	r2,0(r2)
100007e8:	10803fcc 	andi	r2,r2,255
100007ec:	100f883a 	mov	r7,r2
100007f0:	980d883a 	mov	r6,r19
100007f4:	900b883a 	mov	r5,r18
100007f8:	8809883a 	mov	r4,r17
100007fc:	00005980 	call	10000598 <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
10000800:	e0bfe517 	ldw	r2,-108(fp)
10000804:	10800044 	addi	r2,r2,1
10000808:	e0bfe515 	stw	r2,-108(fp)
1000080c:	e0bfe517 	ldw	r2,-108(fp)
10000810:	10800410 	cmplti	r2,r2,16
10000814:	103fd51e 	bne	r2,zero,1000076c <__alt_data_end+0xf800076c>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	while (1)
	{
		fg = rand() % 16;
10000818:	0000ba00 	call	10000ba0 <rand>
1000081c:	1007883a 	mov	r3,r2
10000820:	00a00034 	movhi	r2,32768
10000824:	108003c4 	addi	r2,r2,15
10000828:	1884703a 	and	r2,r3,r2
1000082c:	1000040e 	bge	r2,zero,10000840 <textVGAColorScreenSaver+0x100>
10000830:	10bfffc4 	addi	r2,r2,-1
10000834:	00fffc04 	movi	r3,-16
10000838:	10c4b03a 	or	r2,r2,r3
1000083c:	10800044 	addi	r2,r2,1
10000840:	e0bfe315 	stw	r2,-116(fp)
		bg = rand() % 16;
10000844:	0000ba00 	call	10000ba0 <rand>
10000848:	1007883a 	mov	r3,r2
1000084c:	00a00034 	movhi	r2,32768
10000850:	108003c4 	addi	r2,r2,15
10000854:	1884703a 	and	r2,r3,r2
10000858:	1000040e 	bge	r2,zero,1000086c <textVGAColorScreenSaver+0x12c>
1000085c:	10bfffc4 	addi	r2,r2,-1
10000860:	00fffc04 	movi	r3,-16
10000864:	10c4b03a 	or	r2,r2,r3
10000868:	10800044 	addi	r2,r2,1
1000086c:	e0bfe415 	stw	r2,-112(fp)
		while (fg == bg)
10000870:	00001606 	br	100008cc <textVGAColorScreenSaver+0x18c>
		{
			fg = rand() % 16;
10000874:	0000ba00 	call	10000ba0 <rand>
10000878:	1007883a 	mov	r3,r2
1000087c:	00a00034 	movhi	r2,32768
10000880:	108003c4 	addi	r2,r2,15
10000884:	1884703a 	and	r2,r3,r2
10000888:	1000040e 	bge	r2,zero,1000089c <textVGAColorScreenSaver+0x15c>
1000088c:	10bfffc4 	addi	r2,r2,-1
10000890:	00fffc04 	movi	r3,-16
10000894:	10c4b03a 	or	r2,r2,r3
10000898:	10800044 	addi	r2,r2,1
1000089c:	e0bfe315 	stw	r2,-116(fp)
			bg = rand() % 16;
100008a0:	0000ba00 	call	10000ba0 <rand>
100008a4:	1007883a 	mov	r3,r2
100008a8:	00a00034 	movhi	r2,32768
100008ac:	108003c4 	addi	r2,r2,15
100008b0:	1884703a 	and	r2,r3,r2
100008b4:	1000040e 	bge	r2,zero,100008c8 <textVGAColorScreenSaver+0x188>
100008b8:	10bfffc4 	addi	r2,r2,-1
100008bc:	00fffc04 	movi	r3,-16
100008c0:	10c4b03a 	or	r2,r2,r3
100008c4:	10800044 	addi	r2,r2,1
100008c8:	e0bfe415 	stw	r2,-112(fp)
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
100008cc:	e0ffe317 	ldw	r3,-116(fp)
100008d0:	e0bfe417 	ldw	r2,-112(fp)
100008d4:	18bfe726 	beq	r3,r2,10000874 <__alt_data_end+0xf8000874>
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
100008d8:	014005c4 	movi	r5,23
100008dc:	e13fe317 	ldw	r4,-116(fp)
100008e0:	0000b600 	call	10000b60 <__mulsi3>
100008e4:	1007883a 	mov	r3,r2
100008e8:	00840074 	movhi	r2,4097
100008ec:	10b9bd04 	addi	r2,r2,-6412
100008f0:	18a1883a 	add	r16,r3,r2
100008f4:	014005c4 	movi	r5,23
100008f8:	e13fe417 	ldw	r4,-112(fp)
100008fc:	0000b600 	call	10000b60 <__mulsi3>
10000900:	1007883a 	mov	r3,r2
10000904:	00840074 	movhi	r2,4097
10000908:	10b9bd04 	addi	r2,r2,-6412
1000090c:	1887883a 	add	r3,r3,r2
10000910:	e0bfe804 	addi	r2,fp,-96
10000914:	180f883a 	mov	r7,r3
10000918:	800d883a 	mov	r6,r16
1000091c:	01440074 	movhi	r5,4097
10000920:	29783d04 	addi	r5,r5,-7948
10000924:	1009883a 	mov	r4,r2
10000928:	0000c5c0 	call	10000c5c <sprintf>
		x = rand() % (80-strlen(color_string));
1000092c:	0000ba00 	call	10000ba0 <rand>
10000930:	1021883a 	mov	r16,r2
10000934:	e0bfe804 	addi	r2,fp,-96
10000938:	1009883a 	mov	r4,r2
1000093c:	0000cc80 	call	10000cc8 <strlen>
10000940:	1007883a 	mov	r3,r2
10000944:	00801404 	movi	r2,80
10000948:	10c5c83a 	sub	r2,r2,r3
1000094c:	100b883a 	mov	r5,r2
10000950:	8009883a 	mov	r4,r16
10000954:	0000b080 	call	10000b08 <__umodsi3>
10000958:	e0bfe615 	stw	r2,-104(fp)
		y = rand() % 30;
1000095c:	0000ba00 	call	10000ba0 <rand>
10000960:	01400784 	movi	r5,30
10000964:	1009883a 	mov	r4,r2
10000968:	0000a300 	call	10000a30 <__modsi3>
1000096c:	e0bfe715 	stw	r2,-100(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
10000970:	e0bfe417 	ldw	r2,-112(fp)
10000974:	11003fcc 	andi	r4,r2,255
10000978:	e0bfe317 	ldw	r2,-116(fp)
1000097c:	10803fcc 	andi	r2,r2,255
10000980:	e0ffe804 	addi	r3,fp,-96
10000984:	d8800015 	stw	r2,0(sp)
10000988:	200f883a 	mov	r7,r4
1000098c:	e1bfe717 	ldw	r6,-100(fp)
10000990:	e17fe617 	ldw	r5,-104(fp)
10000994:	1809883a 	mov	r4,r3
10000998:	00004880 	call	10000488 <textVGADrawColorText>
		usleep (100000);
1000099c:	010000b4 	movhi	r4,2
100009a0:	2121a804 	addi	r4,r4,-31072
100009a4:	000c0740 	call	1000c074 <usleep>
	}
100009a8:	003f9b06 	br	10000818 <__alt_data_end+0xf8000818>

100009ac <__divsi3>:
100009ac:	20001b16 	blt	r4,zero,10000a1c <__divsi3+0x70>
100009b0:	000f883a 	mov	r7,zero
100009b4:	28001616 	blt	r5,zero,10000a10 <__divsi3+0x64>
100009b8:	200d883a 	mov	r6,r4
100009bc:	29001a2e 	bgeu	r5,r4,10000a28 <__divsi3+0x7c>
100009c0:	00800804 	movi	r2,32
100009c4:	00c00044 	movi	r3,1
100009c8:	00000106 	br	100009d0 <__divsi3+0x24>
100009cc:	10000d26 	beq	r2,zero,10000a04 <__divsi3+0x58>
100009d0:	294b883a 	add	r5,r5,r5
100009d4:	10bfffc4 	addi	r2,r2,-1
100009d8:	18c7883a 	add	r3,r3,r3
100009dc:	293ffb36 	bltu	r5,r4,100009cc <__alt_data_end+0xf80009cc>
100009e0:	0005883a 	mov	r2,zero
100009e4:	18000726 	beq	r3,zero,10000a04 <__divsi3+0x58>
100009e8:	0005883a 	mov	r2,zero
100009ec:	31400236 	bltu	r6,r5,100009f8 <__divsi3+0x4c>
100009f0:	314dc83a 	sub	r6,r6,r5
100009f4:	10c4b03a 	or	r2,r2,r3
100009f8:	1806d07a 	srli	r3,r3,1
100009fc:	280ad07a 	srli	r5,r5,1
10000a00:	183ffa1e 	bne	r3,zero,100009ec <__alt_data_end+0xf80009ec>
10000a04:	38000126 	beq	r7,zero,10000a0c <__divsi3+0x60>
10000a08:	0085c83a 	sub	r2,zero,r2
10000a0c:	f800283a 	ret
10000a10:	014bc83a 	sub	r5,zero,r5
10000a14:	39c0005c 	xori	r7,r7,1
10000a18:	003fe706 	br	100009b8 <__alt_data_end+0xf80009b8>
10000a1c:	0109c83a 	sub	r4,zero,r4
10000a20:	01c00044 	movi	r7,1
10000a24:	003fe306 	br	100009b4 <__alt_data_end+0xf80009b4>
10000a28:	00c00044 	movi	r3,1
10000a2c:	003fee06 	br	100009e8 <__alt_data_end+0xf80009e8>

10000a30 <__modsi3>:
10000a30:	20001716 	blt	r4,zero,10000a90 <__modsi3+0x60>
10000a34:	000f883a 	mov	r7,zero
10000a38:	2005883a 	mov	r2,r4
10000a3c:	28001216 	blt	r5,zero,10000a88 <__modsi3+0x58>
10000a40:	2900162e 	bgeu	r5,r4,10000a9c <__modsi3+0x6c>
10000a44:	01800804 	movi	r6,32
10000a48:	00c00044 	movi	r3,1
10000a4c:	00000106 	br	10000a54 <__modsi3+0x24>
10000a50:	30000a26 	beq	r6,zero,10000a7c <__modsi3+0x4c>
10000a54:	294b883a 	add	r5,r5,r5
10000a58:	31bfffc4 	addi	r6,r6,-1
10000a5c:	18c7883a 	add	r3,r3,r3
10000a60:	293ffb36 	bltu	r5,r4,10000a50 <__alt_data_end+0xf8000a50>
10000a64:	18000526 	beq	r3,zero,10000a7c <__modsi3+0x4c>
10000a68:	1806d07a 	srli	r3,r3,1
10000a6c:	11400136 	bltu	r2,r5,10000a74 <__modsi3+0x44>
10000a70:	1145c83a 	sub	r2,r2,r5
10000a74:	280ad07a 	srli	r5,r5,1
10000a78:	183ffb1e 	bne	r3,zero,10000a68 <__alt_data_end+0xf8000a68>
10000a7c:	38000126 	beq	r7,zero,10000a84 <__modsi3+0x54>
10000a80:	0085c83a 	sub	r2,zero,r2
10000a84:	f800283a 	ret
10000a88:	014bc83a 	sub	r5,zero,r5
10000a8c:	003fec06 	br	10000a40 <__alt_data_end+0xf8000a40>
10000a90:	0109c83a 	sub	r4,zero,r4
10000a94:	01c00044 	movi	r7,1
10000a98:	003fe706 	br	10000a38 <__alt_data_end+0xf8000a38>
10000a9c:	00c00044 	movi	r3,1
10000aa0:	003ff106 	br	10000a68 <__alt_data_end+0xf8000a68>

10000aa4 <__udivsi3>:
10000aa4:	200d883a 	mov	r6,r4
10000aa8:	2900152e 	bgeu	r5,r4,10000b00 <__udivsi3+0x5c>
10000aac:	28001416 	blt	r5,zero,10000b00 <__udivsi3+0x5c>
10000ab0:	00800804 	movi	r2,32
10000ab4:	00c00044 	movi	r3,1
10000ab8:	00000206 	br	10000ac4 <__udivsi3+0x20>
10000abc:	10000e26 	beq	r2,zero,10000af8 <__udivsi3+0x54>
10000ac0:	28000516 	blt	r5,zero,10000ad8 <__udivsi3+0x34>
10000ac4:	294b883a 	add	r5,r5,r5
10000ac8:	10bfffc4 	addi	r2,r2,-1
10000acc:	18c7883a 	add	r3,r3,r3
10000ad0:	293ffa36 	bltu	r5,r4,10000abc <__alt_data_end+0xf8000abc>
10000ad4:	18000826 	beq	r3,zero,10000af8 <__udivsi3+0x54>
10000ad8:	0005883a 	mov	r2,zero
10000adc:	31400236 	bltu	r6,r5,10000ae8 <__udivsi3+0x44>
10000ae0:	314dc83a 	sub	r6,r6,r5
10000ae4:	10c4b03a 	or	r2,r2,r3
10000ae8:	1806d07a 	srli	r3,r3,1
10000aec:	280ad07a 	srli	r5,r5,1
10000af0:	183ffa1e 	bne	r3,zero,10000adc <__alt_data_end+0xf8000adc>
10000af4:	f800283a 	ret
10000af8:	0005883a 	mov	r2,zero
10000afc:	f800283a 	ret
10000b00:	00c00044 	movi	r3,1
10000b04:	003ff406 	br	10000ad8 <__alt_data_end+0xf8000ad8>

10000b08 <__umodsi3>:
10000b08:	2005883a 	mov	r2,r4
10000b0c:	2900122e 	bgeu	r5,r4,10000b58 <__umodsi3+0x50>
10000b10:	28001116 	blt	r5,zero,10000b58 <__umodsi3+0x50>
10000b14:	01800804 	movi	r6,32
10000b18:	00c00044 	movi	r3,1
10000b1c:	00000206 	br	10000b28 <__umodsi3+0x20>
10000b20:	30000c26 	beq	r6,zero,10000b54 <__umodsi3+0x4c>
10000b24:	28000516 	blt	r5,zero,10000b3c <__umodsi3+0x34>
10000b28:	294b883a 	add	r5,r5,r5
10000b2c:	31bfffc4 	addi	r6,r6,-1
10000b30:	18c7883a 	add	r3,r3,r3
10000b34:	293ffa36 	bltu	r5,r4,10000b20 <__alt_data_end+0xf8000b20>
10000b38:	18000626 	beq	r3,zero,10000b54 <__umodsi3+0x4c>
10000b3c:	1806d07a 	srli	r3,r3,1
10000b40:	11400136 	bltu	r2,r5,10000b48 <__umodsi3+0x40>
10000b44:	1145c83a 	sub	r2,r2,r5
10000b48:	280ad07a 	srli	r5,r5,1
10000b4c:	183ffb1e 	bne	r3,zero,10000b3c <__alt_data_end+0xf8000b3c>
10000b50:	f800283a 	ret
10000b54:	f800283a 	ret
10000b58:	00c00044 	movi	r3,1
10000b5c:	003ff706 	br	10000b3c <__alt_data_end+0xf8000b3c>

10000b60 <__mulsi3>:
10000b60:	0005883a 	mov	r2,zero
10000b64:	20000726 	beq	r4,zero,10000b84 <__mulsi3+0x24>
10000b68:	20c0004c 	andi	r3,r4,1
10000b6c:	2008d07a 	srli	r4,r4,1
10000b70:	18000126 	beq	r3,zero,10000b78 <__mulsi3+0x18>
10000b74:	1145883a 	add	r2,r2,r5
10000b78:	294b883a 	add	r5,r5,r5
10000b7c:	203ffa1e 	bne	r4,zero,10000b68 <__alt_data_end+0xf8000b68>
10000b80:	f800283a 	ret
10000b84:	f800283a 	ret

10000b88 <srand>:
10000b88:	00840074 	movhi	r2,4097
10000b8c:	1080c804 	addi	r2,r2,800
10000b90:	10800017 	ldw	r2,0(r2)
10000b94:	11002915 	stw	r4,164(r2)
10000b98:	10002a15 	stw	zero,168(r2)
10000b9c:	f800283a 	ret

10000ba0 <rand>:
10000ba0:	00840074 	movhi	r2,4097
10000ba4:	defffe04 	addi	sp,sp,-8
10000ba8:	1080c804 	addi	r2,r2,800
10000bac:	dc000015 	stw	r16,0(sp)
10000bb0:	14000017 	ldw	r16,0(r2)
10000bb4:	dfc00115 	stw	ra,4(sp)
10000bb8:	01932574 	movhi	r6,19605
10000bbc:	81002917 	ldw	r4,164(r16)
10000bc0:	81402a17 	ldw	r5,168(r16)
10000bc4:	01d614b4 	movhi	r7,22610
10000bc8:	319fcb44 	addi	r6,r6,32557
10000bcc:	39fd0b44 	addi	r7,r7,-3027
10000bd0:	00088a40 	call	100088a4 <__muldi3>
10000bd4:	11000044 	addi	r4,r2,1
10000bd8:	2085803a 	cmpltu	r2,r4,r2
10000bdc:	10c7883a 	add	r3,r2,r3
10000be0:	00a00034 	movhi	r2,32768
10000be4:	10bfffc4 	addi	r2,r2,-1
10000be8:	1884703a 	and	r2,r3,r2
10000bec:	81002915 	stw	r4,164(r16)
10000bf0:	80c02a15 	stw	r3,168(r16)
10000bf4:	dfc00117 	ldw	ra,4(sp)
10000bf8:	dc000017 	ldw	r16,0(sp)
10000bfc:	dec00204 	addi	sp,sp,8
10000c00:	f800283a 	ret

10000c04 <_sprintf_r>:
10000c04:	deffe404 	addi	sp,sp,-112
10000c08:	2807883a 	mov	r3,r5
10000c0c:	dfc01a15 	stw	ra,104(sp)
10000c10:	d9c01b15 	stw	r7,108(sp)
10000c14:	00a00034 	movhi	r2,32768
10000c18:	10bfffc4 	addi	r2,r2,-1
10000c1c:	02008204 	movi	r8,520
10000c20:	d8800215 	stw	r2,8(sp)
10000c24:	d8800515 	stw	r2,20(sp)
10000c28:	d9c01b04 	addi	r7,sp,108
10000c2c:	d80b883a 	mov	r5,sp
10000c30:	00bfffc4 	movi	r2,-1
10000c34:	d8c00015 	stw	r3,0(sp)
10000c38:	d8c00415 	stw	r3,16(sp)
10000c3c:	da00030d 	sth	r8,12(sp)
10000c40:	d880038d 	sth	r2,14(sp)
10000c44:	0000d600 	call	10000d60 <___svfprintf_internal_r>
10000c48:	d8c00017 	ldw	r3,0(sp)
10000c4c:	18000005 	stb	zero,0(r3)
10000c50:	dfc01a17 	ldw	ra,104(sp)
10000c54:	dec01c04 	addi	sp,sp,112
10000c58:	f800283a 	ret

10000c5c <sprintf>:
10000c5c:	deffe304 	addi	sp,sp,-116
10000c60:	2007883a 	mov	r3,r4
10000c64:	dfc01a15 	stw	ra,104(sp)
10000c68:	d9801b15 	stw	r6,108(sp)
10000c6c:	d9c01c15 	stw	r7,112(sp)
10000c70:	01040074 	movhi	r4,4097
10000c74:	2100c804 	addi	r4,r4,800
10000c78:	21000017 	ldw	r4,0(r4)
10000c7c:	00a00034 	movhi	r2,32768
10000c80:	10bfffc4 	addi	r2,r2,-1
10000c84:	280d883a 	mov	r6,r5
10000c88:	02008204 	movi	r8,520
10000c8c:	d8800215 	stw	r2,8(sp)
10000c90:	d8800515 	stw	r2,20(sp)
10000c94:	d9c01b04 	addi	r7,sp,108
10000c98:	d80b883a 	mov	r5,sp
10000c9c:	00bfffc4 	movi	r2,-1
10000ca0:	d8c00015 	stw	r3,0(sp)
10000ca4:	d8c00415 	stw	r3,16(sp)
10000ca8:	da00030d 	sth	r8,12(sp)
10000cac:	d880038d 	sth	r2,14(sp)
10000cb0:	0000d600 	call	10000d60 <___svfprintf_internal_r>
10000cb4:	d8c00017 	ldw	r3,0(sp)
10000cb8:	18000005 	stb	zero,0(r3)
10000cbc:	dfc01a17 	ldw	ra,104(sp)
10000cc0:	dec01d04 	addi	sp,sp,116
10000cc4:	f800283a 	ret

10000cc8 <strlen>:
10000cc8:	208000cc 	andi	r2,r4,3
10000ccc:	10002026 	beq	r2,zero,10000d50 <strlen+0x88>
10000cd0:	20800007 	ldb	r2,0(r4)
10000cd4:	10002026 	beq	r2,zero,10000d58 <strlen+0x90>
10000cd8:	2005883a 	mov	r2,r4
10000cdc:	00000206 	br	10000ce8 <strlen+0x20>
10000ce0:	10c00007 	ldb	r3,0(r2)
10000ce4:	18001826 	beq	r3,zero,10000d48 <strlen+0x80>
10000ce8:	10800044 	addi	r2,r2,1
10000cec:	10c000cc 	andi	r3,r2,3
10000cf0:	183ffb1e 	bne	r3,zero,10000ce0 <__alt_data_end+0xf8000ce0>
10000cf4:	10c00017 	ldw	r3,0(r2)
10000cf8:	01ffbff4 	movhi	r7,65279
10000cfc:	39ffbfc4 	addi	r7,r7,-257
10000d00:	00ca303a 	nor	r5,zero,r3
10000d04:	01a02074 	movhi	r6,32897
10000d08:	19c7883a 	add	r3,r3,r7
10000d0c:	31a02004 	addi	r6,r6,-32640
10000d10:	1946703a 	and	r3,r3,r5
10000d14:	1986703a 	and	r3,r3,r6
10000d18:	1800091e 	bne	r3,zero,10000d40 <strlen+0x78>
10000d1c:	10800104 	addi	r2,r2,4
10000d20:	10c00017 	ldw	r3,0(r2)
10000d24:	19cb883a 	add	r5,r3,r7
10000d28:	00c6303a 	nor	r3,zero,r3
10000d2c:	28c6703a 	and	r3,r5,r3
10000d30:	1986703a 	and	r3,r3,r6
10000d34:	183ff926 	beq	r3,zero,10000d1c <__alt_data_end+0xf8000d1c>
10000d38:	00000106 	br	10000d40 <strlen+0x78>
10000d3c:	10800044 	addi	r2,r2,1
10000d40:	10c00007 	ldb	r3,0(r2)
10000d44:	183ffd1e 	bne	r3,zero,10000d3c <__alt_data_end+0xf8000d3c>
10000d48:	1105c83a 	sub	r2,r2,r4
10000d4c:	f800283a 	ret
10000d50:	2005883a 	mov	r2,r4
10000d54:	003fe706 	br	10000cf4 <__alt_data_end+0xf8000cf4>
10000d58:	0005883a 	mov	r2,zero
10000d5c:	f800283a 	ret

10000d60 <___svfprintf_internal_r>:
10000d60:	deffb704 	addi	sp,sp,-292
10000d64:	dfc04815 	stw	ra,288(sp)
10000d68:	ddc04615 	stw	r23,280(sp)
10000d6c:	d9402d15 	stw	r5,180(sp)
10000d70:	d9003915 	stw	r4,228(sp)
10000d74:	302f883a 	mov	r23,r6
10000d78:	d9c02e15 	stw	r7,184(sp)
10000d7c:	df004715 	stw	fp,284(sp)
10000d80:	dd804515 	stw	r22,276(sp)
10000d84:	dd404415 	stw	r21,272(sp)
10000d88:	dd004315 	stw	r20,268(sp)
10000d8c:	dcc04215 	stw	r19,264(sp)
10000d90:	dc804115 	stw	r18,260(sp)
10000d94:	dc404015 	stw	r17,256(sp)
10000d98:	dc003f15 	stw	r16,252(sp)
10000d9c:	00049780 	call	10004978 <_localeconv_r>
10000da0:	10800017 	ldw	r2,0(r2)
10000da4:	1009883a 	mov	r4,r2
10000da8:	d8803415 	stw	r2,208(sp)
10000dac:	0000cc80 	call	10000cc8 <strlen>
10000db0:	d8c02d17 	ldw	r3,180(sp)
10000db4:	d8803815 	stw	r2,224(sp)
10000db8:	1880030b 	ldhu	r2,12(r3)
10000dbc:	1080200c 	andi	r2,r2,128
10000dc0:	10000226 	beq	r2,zero,10000dcc <___svfprintf_internal_r+0x6c>
10000dc4:	18800417 	ldw	r2,16(r3)
10000dc8:	1006b126 	beq	r2,zero,10002890 <___svfprintf_internal_r+0x1b30>
10000dcc:	dcc03917 	ldw	r19,228(sp)
10000dd0:	d8c00404 	addi	r3,sp,16
10000dd4:	05440074 	movhi	r21,4097
10000dd8:	d9001e04 	addi	r4,sp,120
10000ddc:	ad785684 	addi	r21,r21,-7846
10000de0:	d8c01e15 	stw	r3,120(sp)
10000de4:	d8002015 	stw	zero,128(sp)
10000de8:	d8001f15 	stw	zero,124(sp)
10000dec:	d8003315 	stw	zero,204(sp)
10000df0:	d8003615 	stw	zero,216(sp)
10000df4:	d8003715 	stw	zero,220(sp)
10000df8:	1811883a 	mov	r8,r3
10000dfc:	d8003a15 	stw	zero,232(sp)
10000e00:	d8003b15 	stw	zero,236(sp)
10000e04:	d8002f15 	stw	zero,188(sp)
10000e08:	d9002815 	stw	r4,160(sp)
10000e0c:	b8800007 	ldb	r2,0(r23)
10000e10:	10027726 	beq	r2,zero,100017f0 <___svfprintf_internal_r+0xa90>
10000e14:	00c00944 	movi	r3,37
10000e18:	b823883a 	mov	r17,r23
10000e1c:	10c0021e 	bne	r2,r3,10000e28 <___svfprintf_internal_r+0xc8>
10000e20:	00001406 	br	10000e74 <___svfprintf_internal_r+0x114>
10000e24:	10c00326 	beq	r2,r3,10000e34 <___svfprintf_internal_r+0xd4>
10000e28:	8c400044 	addi	r17,r17,1
10000e2c:	88800007 	ldb	r2,0(r17)
10000e30:	103ffc1e 	bne	r2,zero,10000e24 <__alt_data_end+0xf8000e24>
10000e34:	8de1c83a 	sub	r16,r17,r23
10000e38:	80000e26 	beq	r16,zero,10000e74 <___svfprintf_internal_r+0x114>
10000e3c:	d8c02017 	ldw	r3,128(sp)
10000e40:	d8801f17 	ldw	r2,124(sp)
10000e44:	45c00015 	stw	r23,0(r8)
10000e48:	1c07883a 	add	r3,r3,r16
10000e4c:	10800044 	addi	r2,r2,1
10000e50:	d8c02015 	stw	r3,128(sp)
10000e54:	44000115 	stw	r16,4(r8)
10000e58:	d8801f15 	stw	r2,124(sp)
10000e5c:	00c001c4 	movi	r3,7
10000e60:	18809916 	blt	r3,r2,100010c8 <___svfprintf_internal_r+0x368>
10000e64:	42000204 	addi	r8,r8,8
10000e68:	d9402f17 	ldw	r5,188(sp)
10000e6c:	2c0b883a 	add	r5,r5,r16
10000e70:	d9402f15 	stw	r5,188(sp)
10000e74:	88800007 	ldb	r2,0(r17)
10000e78:	10009a26 	beq	r2,zero,100010e4 <___svfprintf_internal_r+0x384>
10000e7c:	8dc00044 	addi	r23,r17,1
10000e80:	8c400047 	ldb	r17,1(r17)
10000e84:	0021883a 	mov	r16,zero
10000e88:	00bfffc4 	movi	r2,-1
10000e8c:	0025883a 	mov	r18,zero
10000e90:	dc002905 	stb	r16,164(sp)
10000e94:	d8002785 	stb	zero,158(sp)
10000e98:	d8002b05 	stb	zero,172(sp)
10000e9c:	d8802a15 	stw	r2,168(sp)
10000ea0:	d8003115 	stw	zero,196(sp)
10000ea4:	05001604 	movi	r20,88
10000ea8:	05800244 	movi	r22,9
10000eac:	4039883a 	mov	fp,r8
10000eb0:	9021883a 	mov	r16,r18
10000eb4:	bdc00044 	addi	r23,r23,1
10000eb8:	88bff804 	addi	r2,r17,-32
10000ebc:	a0831e36 	bltu	r20,r2,10001b38 <___svfprintf_internal_r+0xdd8>
10000ec0:	100490ba 	slli	r2,r2,2
10000ec4:	00c40034 	movhi	r3,4096
10000ec8:	18c3b604 	addi	r3,r3,3800
10000ecc:	10c5883a 	add	r2,r2,r3
10000ed0:	10800017 	ldw	r2,0(r2)
10000ed4:	1000683a 	jmp	r2
10000ed8:	10001a80 	call	110001a8 <_gp+0xfe7e98>
10000edc:	10001b38 	rdprs	zero,r2,108
10000ee0:	10001b38 	rdprs	zero,r2,108
10000ee4:	10001a74 	orhi	zero,r2,105
10000ee8:	10001b38 	rdprs	zero,r2,108
10000eec:	10001b38 	rdprs	zero,r2,108
10000ef0:	10001b38 	rdprs	zero,r2,108
10000ef4:	10001b38 	rdprs	zero,r2,108
10000ef8:	10001b38 	rdprs	zero,r2,108
10000efc:	10001b38 	rdprs	zero,r2,108
10000f00:	10001140 	call	11000114 <_gp+0xfe7e04>
10000f04:	10001984 	addi	zero,r2,102
10000f08:	10001b38 	rdprs	zero,r2,108
10000f0c:	1000104c 	andi	zero,r2,65
10000f10:	10001164 	muli	zero,r2,69
10000f14:	10001b38 	rdprs	zero,r2,108
10000f18:	100011f0 	cmpltui	zero,r2,71
10000f1c:	100011b4 	orhi	zero,r2,70
10000f20:	100011b4 	orhi	zero,r2,70
10000f24:	100011b4 	orhi	zero,r2,70
10000f28:	100011b4 	orhi	zero,r2,70
10000f2c:	100011b4 	orhi	zero,r2,70
10000f30:	100011b4 	orhi	zero,r2,70
10000f34:	100011b4 	orhi	zero,r2,70
10000f38:	100011b4 	orhi	zero,r2,70
10000f3c:	100011b4 	orhi	zero,r2,70
10000f40:	10001b38 	rdprs	zero,r2,108
10000f44:	10001b38 	rdprs	zero,r2,108
10000f48:	10001b38 	rdprs	zero,r2,108
10000f4c:	10001b38 	rdprs	zero,r2,108
10000f50:	10001b38 	rdprs	zero,r2,108
10000f54:	10001b38 	rdprs	zero,r2,108
10000f58:	10001b38 	rdprs	zero,r2,108
10000f5c:	10001b38 	rdprs	zero,r2,108
10000f60:	10001b38 	rdprs	zero,r2,108
10000f64:	10001b38 	rdprs	zero,r2,108
10000f68:	100012b4 	orhi	zero,r2,74
10000f6c:	100011fc 	xorhi	zero,r2,71
10000f70:	10001b38 	rdprs	zero,r2,108
10000f74:	100011fc 	xorhi	zero,r2,71
10000f78:	10001b38 	rdprs	zero,r2,108
10000f7c:	10001b38 	rdprs	zero,r2,108
10000f80:	10001b38 	rdprs	zero,r2,108
10000f84:	10001b38 	rdprs	zero,r2,108
10000f88:	100012a8 	cmpgeui	zero,r2,74
10000f8c:	10001b38 	rdprs	zero,r2,108
10000f90:	10001b38 	rdprs	zero,r2,108
10000f94:	1000137c 	xorhi	zero,r2,77
10000f98:	10001b38 	rdprs	zero,r2,108
10000f9c:	10001b38 	rdprs	zero,r2,108
10000fa0:	10001b38 	rdprs	zero,r2,108
10000fa4:	10001b38 	rdprs	zero,r2,108
10000fa8:	10001b38 	rdprs	zero,r2,108
10000fac:	100017f8 	rdprs	zero,r2,95
10000fb0:	10001b38 	rdprs	zero,r2,108
10000fb4:	10001b38 	rdprs	zero,r2,108
10000fb8:	10001864 	muli	zero,r2,97
10000fbc:	10001b38 	rdprs	zero,r2,108
10000fc0:	10001b38 	rdprs	zero,r2,108
10000fc4:	10001b38 	rdprs	zero,r2,108
10000fc8:	10001b38 	rdprs	zero,r2,108
10000fcc:	10001b38 	rdprs	zero,r2,108
10000fd0:	10001b38 	rdprs	zero,r2,108
10000fd4:	10001b38 	rdprs	zero,r2,108
10000fd8:	10001b38 	rdprs	zero,r2,108
10000fdc:	10001b38 	rdprs	zero,r2,108
10000fe0:	10001b38 	rdprs	zero,r2,108
10000fe4:	10001920 	cmpeqi	zero,r2,100
10000fe8:	10001aa0 	cmpeqi	zero,r2,106
10000fec:	100011fc 	xorhi	zero,r2,71
10000ff0:	100011fc 	xorhi	zero,r2,71
10000ff4:	100011fc 	xorhi	zero,r2,71
10000ff8:	10001b14 	ori	zero,r2,108
10000ffc:	10001aa0 	cmpeqi	zero,r2,106
10001000:	10001b38 	rdprs	zero,r2,108
10001004:	10001b38 	rdprs	zero,r2,108
10001008:	10001ac0 	call	110001ac <_gp+0xfe7e9c>
1000100c:	10001b38 	rdprs	zero,r2,108
10001010:	10001ad4 	ori	zero,r2,107
10001014:	10001964 	muli	zero,r2,101
10001018:	10001058 	cmpnei	zero,r2,65
1000101c:	1000199c 	xori	zero,r2,102
10001020:	10001b38 	rdprs	zero,r2,108
10001024:	100019a8 	cmpgeui	zero,r2,102
10001028:	10001b38 	rdprs	zero,r2,108
1000102c:	10001a0c 	andi	zero,r2,104
10001030:	10001b38 	rdprs	zero,r2,108
10001034:	10001b38 	rdprs	zero,r2,108
10001038:	10001a2c 	andhi	zero,r2,104
1000103c:	d8c03117 	ldw	r3,196(sp)
10001040:	d8802e15 	stw	r2,184(sp)
10001044:	00c7c83a 	sub	r3,zero,r3
10001048:	d8c03115 	stw	r3,196(sp)
1000104c:	84000114 	ori	r16,r16,4
10001050:	bc400007 	ldb	r17,0(r23)
10001054:	003f9706 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10001058:	00800c04 	movi	r2,48
1000105c:	d8802705 	stb	r2,156(sp)
10001060:	00801e04 	movi	r2,120
10001064:	d8802745 	stb	r2,157(sp)
10001068:	d9002a17 	ldw	r4,168(sp)
1000106c:	d8802e17 	ldw	r2,184(sp)
10001070:	d8002785 	stb	zero,158(sp)
10001074:	e011883a 	mov	r8,fp
10001078:	10c00104 	addi	r3,r2,4
1000107c:	15000017 	ldw	r20,0(r2)
10001080:	002d883a 	mov	r22,zero
10001084:	80800094 	ori	r2,r16,2
10001088:	2002b616 	blt	r4,zero,10001b64 <___svfprintf_internal_r+0xe04>
1000108c:	00bfdfc4 	movi	r2,-129
10001090:	80a4703a 	and	r18,r16,r2
10001094:	d8c02e15 	stw	r3,184(sp)
10001098:	94800094 	ori	r18,r18,2
1000109c:	a002a01e 	bne	r20,zero,10001b20 <___svfprintf_internal_r+0xdc0>
100010a0:	01440074 	movhi	r5,4097
100010a4:	29784f04 	addi	r5,r5,-7876
100010a8:	d9403a15 	stw	r5,232(sp)
100010ac:	04401e04 	movi	r17,120
100010b0:	d8c02a17 	ldw	r3,168(sp)
100010b4:	0039883a 	mov	fp,zero
100010b8:	1801e626 	beq	r3,zero,10001854 <___svfprintf_internal_r+0xaf4>
100010bc:	0029883a 	mov	r20,zero
100010c0:	002d883a 	mov	r22,zero
100010c4:	00020506 	br	100018dc <___svfprintf_internal_r+0xb7c>
100010c8:	d9402d17 	ldw	r5,180(sp)
100010cc:	d9801e04 	addi	r6,sp,120
100010d0:	9809883a 	mov	r4,r19
100010d4:	000663c0 	call	1000663c <__ssprint_r>
100010d8:	1000081e 	bne	r2,zero,100010fc <___svfprintf_internal_r+0x39c>
100010dc:	da000404 	addi	r8,sp,16
100010e0:	003f6106 	br	10000e68 <__alt_data_end+0xf8000e68>
100010e4:	d8802017 	ldw	r2,128(sp)
100010e8:	10000426 	beq	r2,zero,100010fc <___svfprintf_internal_r+0x39c>
100010ec:	d9402d17 	ldw	r5,180(sp)
100010f0:	d9003917 	ldw	r4,228(sp)
100010f4:	d9801e04 	addi	r6,sp,120
100010f8:	000663c0 	call	1000663c <__ssprint_r>
100010fc:	d8802d17 	ldw	r2,180(sp)
10001100:	10c0030b 	ldhu	r3,12(r2)
10001104:	d8802f17 	ldw	r2,188(sp)
10001108:	18c0100c 	andi	r3,r3,64
1000110c:	1806251e 	bne	r3,zero,100029a4 <___svfprintf_internal_r+0x1c44>
10001110:	dfc04817 	ldw	ra,288(sp)
10001114:	df004717 	ldw	fp,284(sp)
10001118:	ddc04617 	ldw	r23,280(sp)
1000111c:	dd804517 	ldw	r22,276(sp)
10001120:	dd404417 	ldw	r21,272(sp)
10001124:	dd004317 	ldw	r20,268(sp)
10001128:	dcc04217 	ldw	r19,264(sp)
1000112c:	dc804117 	ldw	r18,260(sp)
10001130:	dc404017 	ldw	r17,256(sp)
10001134:	dc003f17 	ldw	r16,252(sp)
10001138:	dec04904 	addi	sp,sp,292
1000113c:	f800283a 	ret
10001140:	d9002e17 	ldw	r4,184(sp)
10001144:	d9402e17 	ldw	r5,184(sp)
10001148:	21000017 	ldw	r4,0(r4)
1000114c:	28800104 	addi	r2,r5,4
10001150:	d9003115 	stw	r4,196(sp)
10001154:	203fb916 	blt	r4,zero,1000103c <__alt_data_end+0xf800103c>
10001158:	d8802e15 	stw	r2,184(sp)
1000115c:	bc400007 	ldb	r17,0(r23)
10001160:	003f5406 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10001164:	bc400007 	ldb	r17,0(r23)
10001168:	01000a84 	movi	r4,42
1000116c:	b8c00044 	addi	r3,r23,1
10001170:	89076926 	beq	r17,r4,10002f18 <___svfprintf_internal_r+0x21b8>
10001174:	8cbff404 	addi	r18,r17,-48
10001178:	b486b936 	bltu	r22,r18,10002c60 <___svfprintf_internal_r+0x1f00>
1000117c:	0009883a 	mov	r4,zero
10001180:	1823883a 	mov	r17,r3
10001184:	01400284 	movi	r5,10
10001188:	0000b600 	call	10000b60 <__mulsi3>
1000118c:	88c00007 	ldb	r3,0(r17)
10001190:	1489883a 	add	r4,r2,r18
10001194:	8dc00044 	addi	r23,r17,1
10001198:	1cbff404 	addi	r18,r3,-48
1000119c:	b823883a 	mov	r17,r23
100011a0:	b4bff82e 	bgeu	r22,r18,10001184 <__alt_data_end+0xf8001184>
100011a4:	1823883a 	mov	r17,r3
100011a8:	20060416 	blt	r4,zero,100029bc <___svfprintf_internal_r+0x1c5c>
100011ac:	d9002a15 	stw	r4,168(sp)
100011b0:	003f4106 	br	10000eb8 <__alt_data_end+0xf8000eb8>
100011b4:	8cbff404 	addi	r18,r17,-48
100011b8:	d8003115 	stw	zero,196(sp)
100011bc:	0009883a 	mov	r4,zero
100011c0:	b823883a 	mov	r17,r23
100011c4:	01400284 	movi	r5,10
100011c8:	0000b600 	call	10000b60 <__mulsi3>
100011cc:	88c00007 	ldb	r3,0(r17)
100011d0:	9089883a 	add	r4,r18,r2
100011d4:	bdc00044 	addi	r23,r23,1
100011d8:	1cbff404 	addi	r18,r3,-48
100011dc:	b823883a 	mov	r17,r23
100011e0:	b4bff82e 	bgeu	r22,r18,100011c4 <__alt_data_end+0xf80011c4>
100011e4:	1823883a 	mov	r17,r3
100011e8:	d9003115 	stw	r4,196(sp)
100011ec:	003f3206 	br	10000eb8 <__alt_data_end+0xf8000eb8>
100011f0:	84002014 	ori	r16,r16,128
100011f4:	bc400007 	ldb	r17,0(r23)
100011f8:	003f2e06 	br	10000eb4 <__alt_data_end+0xf8000eb4>
100011fc:	8025883a 	mov	r18,r16
10001200:	dc002903 	ldbu	r16,164(sp)
10001204:	e011883a 	mov	r8,fp
10001208:	84003fcc 	andi	r16,r16,255
1000120c:	8007721e 	bne	r16,zero,10002fd8 <___svfprintf_internal_r+0x2278>
10001210:	9080020c 	andi	r2,r18,8
10001214:	1004a526 	beq	r2,zero,100024ac <___svfprintf_internal_r+0x174c>
10001218:	d9002e17 	ldw	r4,184(sp)
1000121c:	d9402e17 	ldw	r5,184(sp)
10001220:	d8802e17 	ldw	r2,184(sp)
10001224:	21000017 	ldw	r4,0(r4)
10001228:	29400117 	ldw	r5,4(r5)
1000122c:	10800204 	addi	r2,r2,8
10001230:	d9003615 	stw	r4,216(sp)
10001234:	d9403715 	stw	r5,220(sp)
10001238:	d8802e15 	stw	r2,184(sp)
1000123c:	d9003617 	ldw	r4,216(sp)
10001240:	d9403717 	ldw	r5,220(sp)
10001244:	da003e15 	stw	r8,248(sp)
10001248:	04000044 	movi	r16,1
1000124c:	00064980 	call	10006498 <__fpclassifyd>
10001250:	da003e17 	ldw	r8,248(sp)
10001254:	1404731e 	bne	r2,r16,10002424 <___svfprintf_internal_r+0x16c4>
10001258:	d9003617 	ldw	r4,216(sp)
1000125c:	d9403717 	ldw	r5,220(sp)
10001260:	000d883a 	mov	r6,zero
10001264:	000f883a 	mov	r7,zero
10001268:	000a9500 	call	1000a950 <__ledf2>
1000126c:	da003e17 	ldw	r8,248(sp)
10001270:	10061b16 	blt	r2,zero,10002ae0 <___svfprintf_internal_r+0x1d80>
10001274:	df002783 	ldbu	fp,158(sp)
10001278:	008011c4 	movi	r2,71
1000127c:	1445810e 	bge	r2,r17,10002884 <___svfprintf_internal_r+0x1b24>
10001280:	04040074 	movhi	r16,4097
10001284:	84384704 	addi	r16,r16,-7908
10001288:	00c000c4 	movi	r3,3
1000128c:	00bfdfc4 	movi	r2,-129
10001290:	d8c02915 	stw	r3,164(sp)
10001294:	90a4703a 	and	r18,r18,r2
10001298:	d8c02b15 	stw	r3,172(sp)
1000129c:	d8002a15 	stw	zero,168(sp)
100012a0:	d8003215 	stw	zero,200(sp)
100012a4:	00006c06 	br	10001458 <___svfprintf_internal_r+0x6f8>
100012a8:	84000214 	ori	r16,r16,8
100012ac:	bc400007 	ldb	r17,0(r23)
100012b0:	003f0006 	br	10000eb4 <__alt_data_end+0xf8000eb4>
100012b4:	8025883a 	mov	r18,r16
100012b8:	dc002903 	ldbu	r16,164(sp)
100012bc:	e011883a 	mov	r8,fp
100012c0:	84003fcc 	andi	r16,r16,255
100012c4:	80073f1e 	bne	r16,zero,10002fc4 <___svfprintf_internal_r+0x2264>
100012c8:	94800414 	ori	r18,r18,16
100012cc:	9080080c 	andi	r2,r18,32
100012d0:	1003bb26 	beq	r2,zero,100021c0 <___svfprintf_internal_r+0x1460>
100012d4:	d9002e17 	ldw	r4,184(sp)
100012d8:	20800117 	ldw	r2,4(r4)
100012dc:	25000017 	ldw	r20,0(r4)
100012e0:	21000204 	addi	r4,r4,8
100012e4:	d9002e15 	stw	r4,184(sp)
100012e8:	102d883a 	mov	r22,r2
100012ec:	1003bd16 	blt	r2,zero,100021e4 <___svfprintf_internal_r+0x1484>
100012f0:	d9002a17 	ldw	r4,168(sp)
100012f4:	df002783 	ldbu	fp,158(sp)
100012f8:	2003d016 	blt	r4,zero,1000223c <___svfprintf_internal_r+0x14dc>
100012fc:	00ffdfc4 	movi	r3,-129
10001300:	a584b03a 	or	r2,r20,r22
10001304:	90e4703a 	and	r18,r18,r3
10001308:	10015026 	beq	r2,zero,1000184c <___svfprintf_internal_r+0xaec>
1000130c:	b0037026 	beq	r22,zero,100020d0 <___svfprintf_internal_r+0x1370>
10001310:	dc402915 	stw	r17,164(sp)
10001314:	dc001e04 	addi	r16,sp,120
10001318:	b023883a 	mov	r17,r22
1000131c:	402d883a 	mov	r22,r8
10001320:	a009883a 	mov	r4,r20
10001324:	880b883a 	mov	r5,r17
10001328:	01800284 	movi	r6,10
1000132c:	000f883a 	mov	r7,zero
10001330:	0008fac0 	call	10008fac <__umoddi3>
10001334:	10800c04 	addi	r2,r2,48
10001338:	843fffc4 	addi	r16,r16,-1
1000133c:	a009883a 	mov	r4,r20
10001340:	880b883a 	mov	r5,r17
10001344:	80800005 	stb	r2,0(r16)
10001348:	01800284 	movi	r6,10
1000134c:	000f883a 	mov	r7,zero
10001350:	00089b00 	call	100089b0 <__udivdi3>
10001354:	1029883a 	mov	r20,r2
10001358:	10c4b03a 	or	r2,r2,r3
1000135c:	1823883a 	mov	r17,r3
10001360:	103fef1e 	bne	r2,zero,10001320 <__alt_data_end+0xf8001320>
10001364:	d8c02817 	ldw	r3,160(sp)
10001368:	dc402917 	ldw	r17,164(sp)
1000136c:	b011883a 	mov	r8,r22
10001370:	1c07c83a 	sub	r3,r3,r16
10001374:	d8c02b15 	stw	r3,172(sp)
10001378:	00003106 	br	10001440 <___svfprintf_internal_r+0x6e0>
1000137c:	8025883a 	mov	r18,r16
10001380:	dc002903 	ldbu	r16,164(sp)
10001384:	e011883a 	mov	r8,fp
10001388:	84003fcc 	andi	r16,r16,255
1000138c:	80070a1e 	bne	r16,zero,10002fb8 <___svfprintf_internal_r+0x2258>
10001390:	94800414 	ori	r18,r18,16
10001394:	9080080c 	andi	r2,r18,32
10001398:	1002f626 	beq	r2,zero,10001f74 <___svfprintf_internal_r+0x1214>
1000139c:	d9002e17 	ldw	r4,184(sp)
100013a0:	d9402a17 	ldw	r5,168(sp)
100013a4:	d8002785 	stb	zero,158(sp)
100013a8:	20800204 	addi	r2,r4,8
100013ac:	25000017 	ldw	r20,0(r4)
100013b0:	25800117 	ldw	r22,4(r4)
100013b4:	28043716 	blt	r5,zero,10002494 <___svfprintf_internal_r+0x1734>
100013b8:	013fdfc4 	movi	r4,-129
100013bc:	a586b03a 	or	r3,r20,r22
100013c0:	d8802e15 	stw	r2,184(sp)
100013c4:	9124703a 	and	r18,r18,r4
100013c8:	1802f71e 	bne	r3,zero,10001fa8 <___svfprintf_internal_r+0x1248>
100013cc:	d9402a17 	ldw	r5,168(sp)
100013d0:	0039883a 	mov	fp,zero
100013d4:	2806df26 	beq	r5,zero,10002f54 <___svfprintf_internal_r+0x21f4>
100013d8:	0029883a 	mov	r20,zero
100013dc:	002d883a 	mov	r22,zero
100013e0:	dc001e04 	addi	r16,sp,120
100013e4:	a006d0fa 	srli	r3,r20,3
100013e8:	b008977a 	slli	r4,r22,29
100013ec:	b02cd0fa 	srli	r22,r22,3
100013f0:	a50001cc 	andi	r20,r20,7
100013f4:	a0800c04 	addi	r2,r20,48
100013f8:	843fffc4 	addi	r16,r16,-1
100013fc:	20e8b03a 	or	r20,r4,r3
10001400:	80800005 	stb	r2,0(r16)
10001404:	a586b03a 	or	r3,r20,r22
10001408:	183ff61e 	bne	r3,zero,100013e4 <__alt_data_end+0xf80013e4>
1000140c:	90c0004c 	andi	r3,r18,1
10001410:	18013f26 	beq	r3,zero,10001910 <___svfprintf_internal_r+0xbb0>
10001414:	10803fcc 	andi	r2,r2,255
10001418:	1080201c 	xori	r2,r2,128
1000141c:	10bfe004 	addi	r2,r2,-128
10001420:	00c00c04 	movi	r3,48
10001424:	10c13a26 	beq	r2,r3,10001910 <___svfprintf_internal_r+0xbb0>
10001428:	80ffffc5 	stb	r3,-1(r16)
1000142c:	d8c02817 	ldw	r3,160(sp)
10001430:	80bfffc4 	addi	r2,r16,-1
10001434:	1021883a 	mov	r16,r2
10001438:	1887c83a 	sub	r3,r3,r2
1000143c:	d8c02b15 	stw	r3,172(sp)
10001440:	d8802b17 	ldw	r2,172(sp)
10001444:	d9002a17 	ldw	r4,168(sp)
10001448:	1100010e 	bge	r2,r4,10001450 <___svfprintf_internal_r+0x6f0>
1000144c:	2005883a 	mov	r2,r4
10001450:	d8802915 	stw	r2,164(sp)
10001454:	d8003215 	stw	zero,200(sp)
10001458:	e7003fcc 	andi	fp,fp,255
1000145c:	e700201c 	xori	fp,fp,128
10001460:	e73fe004 	addi	fp,fp,-128
10001464:	e0000326 	beq	fp,zero,10001474 <___svfprintf_internal_r+0x714>
10001468:	d8c02917 	ldw	r3,164(sp)
1000146c:	18c00044 	addi	r3,r3,1
10001470:	d8c02915 	stw	r3,164(sp)
10001474:	90c0008c 	andi	r3,r18,2
10001478:	d8c02c15 	stw	r3,176(sp)
1000147c:	18000326 	beq	r3,zero,1000148c <___svfprintf_internal_r+0x72c>
10001480:	d8c02917 	ldw	r3,164(sp)
10001484:	18c00084 	addi	r3,r3,2
10001488:	d8c02915 	stw	r3,164(sp)
1000148c:	90c0210c 	andi	r3,r18,132
10001490:	d8c03015 	stw	r3,192(sp)
10001494:	1801c31e 	bne	r3,zero,10001ba4 <___svfprintf_internal_r+0xe44>
10001498:	d9003117 	ldw	r4,196(sp)
1000149c:	d8c02917 	ldw	r3,164(sp)
100014a0:	20e9c83a 	sub	r20,r4,r3
100014a4:	0501bf0e 	bge	zero,r20,10001ba4 <___svfprintf_internal_r+0xe44>
100014a8:	02400404 	movi	r9,16
100014ac:	d8c02017 	ldw	r3,128(sp)
100014b0:	d8801f17 	ldw	r2,124(sp)
100014b4:	4d053d0e 	bge	r9,r20,100029ac <___svfprintf_internal_r+0x1c4c>
100014b8:	01440074 	movhi	r5,4097
100014bc:	29785a84 	addi	r5,r5,-7830
100014c0:	dc403c15 	stw	r17,240(sp)
100014c4:	d9403515 	stw	r5,212(sp)
100014c8:	a023883a 	mov	r17,r20
100014cc:	482d883a 	mov	r22,r9
100014d0:	9029883a 	mov	r20,r18
100014d4:	070001c4 	movi	fp,7
100014d8:	8025883a 	mov	r18,r16
100014dc:	dc002d17 	ldw	r16,180(sp)
100014e0:	00000306 	br	100014f0 <___svfprintf_internal_r+0x790>
100014e4:	8c7ffc04 	addi	r17,r17,-16
100014e8:	42000204 	addi	r8,r8,8
100014ec:	b440130e 	bge	r22,r17,1000153c <___svfprintf_internal_r+0x7dc>
100014f0:	01040074 	movhi	r4,4097
100014f4:	18c00404 	addi	r3,r3,16
100014f8:	10800044 	addi	r2,r2,1
100014fc:	21385a84 	addi	r4,r4,-7830
10001500:	41000015 	stw	r4,0(r8)
10001504:	45800115 	stw	r22,4(r8)
10001508:	d8c02015 	stw	r3,128(sp)
1000150c:	d8801f15 	stw	r2,124(sp)
10001510:	e0bff40e 	bge	fp,r2,100014e4 <__alt_data_end+0xf80014e4>
10001514:	d9801e04 	addi	r6,sp,120
10001518:	800b883a 	mov	r5,r16
1000151c:	9809883a 	mov	r4,r19
10001520:	000663c0 	call	1000663c <__ssprint_r>
10001524:	103ef51e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001528:	8c7ffc04 	addi	r17,r17,-16
1000152c:	d8c02017 	ldw	r3,128(sp)
10001530:	d8801f17 	ldw	r2,124(sp)
10001534:	da000404 	addi	r8,sp,16
10001538:	b47fed16 	blt	r22,r17,100014f0 <__alt_data_end+0xf80014f0>
1000153c:	9021883a 	mov	r16,r18
10001540:	a025883a 	mov	r18,r20
10001544:	8829883a 	mov	r20,r17
10001548:	dc403c17 	ldw	r17,240(sp)
1000154c:	d9403517 	ldw	r5,212(sp)
10001550:	a0c7883a 	add	r3,r20,r3
10001554:	10800044 	addi	r2,r2,1
10001558:	41400015 	stw	r5,0(r8)
1000155c:	45000115 	stw	r20,4(r8)
10001560:	d8c02015 	stw	r3,128(sp)
10001564:	d8801f15 	stw	r2,124(sp)
10001568:	010001c4 	movi	r4,7
1000156c:	2082c116 	blt	r4,r2,10002074 <___svfprintf_internal_r+0x1314>
10001570:	df002787 	ldb	fp,158(sp)
10001574:	42000204 	addi	r8,r8,8
10001578:	e0000c26 	beq	fp,zero,100015ac <___svfprintf_internal_r+0x84c>
1000157c:	d8801f17 	ldw	r2,124(sp)
10001580:	d9002784 	addi	r4,sp,158
10001584:	18c00044 	addi	r3,r3,1
10001588:	10800044 	addi	r2,r2,1
1000158c:	41000015 	stw	r4,0(r8)
10001590:	01000044 	movi	r4,1
10001594:	41000115 	stw	r4,4(r8)
10001598:	d8c02015 	stw	r3,128(sp)
1000159c:	d8801f15 	stw	r2,124(sp)
100015a0:	010001c4 	movi	r4,7
100015a4:	20825a16 	blt	r4,r2,10001f10 <___svfprintf_internal_r+0x11b0>
100015a8:	42000204 	addi	r8,r8,8
100015ac:	d8802c17 	ldw	r2,176(sp)
100015b0:	10000c26 	beq	r2,zero,100015e4 <___svfprintf_internal_r+0x884>
100015b4:	d8801f17 	ldw	r2,124(sp)
100015b8:	d9002704 	addi	r4,sp,156
100015bc:	18c00084 	addi	r3,r3,2
100015c0:	10800044 	addi	r2,r2,1
100015c4:	41000015 	stw	r4,0(r8)
100015c8:	01000084 	movi	r4,2
100015cc:	41000115 	stw	r4,4(r8)
100015d0:	d8c02015 	stw	r3,128(sp)
100015d4:	d8801f15 	stw	r2,124(sp)
100015d8:	010001c4 	movi	r4,7
100015dc:	20825416 	blt	r4,r2,10001f30 <___svfprintf_internal_r+0x11d0>
100015e0:	42000204 	addi	r8,r8,8
100015e4:	d9003017 	ldw	r4,192(sp)
100015e8:	00802004 	movi	r2,128
100015ec:	2081b926 	beq	r4,r2,10001cd4 <___svfprintf_internal_r+0xf74>
100015f0:	d9402a17 	ldw	r5,168(sp)
100015f4:	d8802b17 	ldw	r2,172(sp)
100015f8:	28adc83a 	sub	r22,r5,r2
100015fc:	05802f0e 	bge	zero,r22,100016bc <___svfprintf_internal_r+0x95c>
10001600:	07000404 	movi	fp,16
10001604:	d8801f17 	ldw	r2,124(sp)
10001608:	e583e20e 	bge	fp,r22,10002594 <___svfprintf_internal_r+0x1834>
1000160c:	01440074 	movhi	r5,4097
10001610:	29785684 	addi	r5,r5,-7846
10001614:	dc402a15 	stw	r17,168(sp)
10001618:	d9402c15 	stw	r5,176(sp)
1000161c:	b023883a 	mov	r17,r22
10001620:	050001c4 	movi	r20,7
10001624:	902d883a 	mov	r22,r18
10001628:	8025883a 	mov	r18,r16
1000162c:	dc002d17 	ldw	r16,180(sp)
10001630:	00000306 	br	10001640 <___svfprintf_internal_r+0x8e0>
10001634:	8c7ffc04 	addi	r17,r17,-16
10001638:	42000204 	addi	r8,r8,8
1000163c:	e440110e 	bge	fp,r17,10001684 <___svfprintf_internal_r+0x924>
10001640:	18c00404 	addi	r3,r3,16
10001644:	10800044 	addi	r2,r2,1
10001648:	45400015 	stw	r21,0(r8)
1000164c:	47000115 	stw	fp,4(r8)
10001650:	d8c02015 	stw	r3,128(sp)
10001654:	d8801f15 	stw	r2,124(sp)
10001658:	a0bff60e 	bge	r20,r2,10001634 <__alt_data_end+0xf8001634>
1000165c:	d9801e04 	addi	r6,sp,120
10001660:	800b883a 	mov	r5,r16
10001664:	9809883a 	mov	r4,r19
10001668:	000663c0 	call	1000663c <__ssprint_r>
1000166c:	103ea31e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001670:	8c7ffc04 	addi	r17,r17,-16
10001674:	d8c02017 	ldw	r3,128(sp)
10001678:	d8801f17 	ldw	r2,124(sp)
1000167c:	da000404 	addi	r8,sp,16
10001680:	e47fef16 	blt	fp,r17,10001640 <__alt_data_end+0xf8001640>
10001684:	9021883a 	mov	r16,r18
10001688:	b025883a 	mov	r18,r22
1000168c:	882d883a 	mov	r22,r17
10001690:	dc402a17 	ldw	r17,168(sp)
10001694:	d9002c17 	ldw	r4,176(sp)
10001698:	1d87883a 	add	r3,r3,r22
1000169c:	10800044 	addi	r2,r2,1
100016a0:	41000015 	stw	r4,0(r8)
100016a4:	45800115 	stw	r22,4(r8)
100016a8:	d8c02015 	stw	r3,128(sp)
100016ac:	d8801f15 	stw	r2,124(sp)
100016b0:	010001c4 	movi	r4,7
100016b4:	20820e16 	blt	r4,r2,10001ef0 <___svfprintf_internal_r+0x1190>
100016b8:	42000204 	addi	r8,r8,8
100016bc:	9080400c 	andi	r2,r18,256
100016c0:	10013a1e 	bne	r2,zero,10001bac <___svfprintf_internal_r+0xe4c>
100016c4:	d9402b17 	ldw	r5,172(sp)
100016c8:	d8801f17 	ldw	r2,124(sp)
100016cc:	44000015 	stw	r16,0(r8)
100016d0:	1947883a 	add	r3,r3,r5
100016d4:	10800044 	addi	r2,r2,1
100016d8:	41400115 	stw	r5,4(r8)
100016dc:	d8c02015 	stw	r3,128(sp)
100016e0:	d8801f15 	stw	r2,124(sp)
100016e4:	010001c4 	movi	r4,7
100016e8:	2081f316 	blt	r4,r2,10001eb8 <___svfprintf_internal_r+0x1158>
100016ec:	42000204 	addi	r8,r8,8
100016f0:	9480010c 	andi	r18,r18,4
100016f4:	90003226 	beq	r18,zero,100017c0 <___svfprintf_internal_r+0xa60>
100016f8:	d9403117 	ldw	r5,196(sp)
100016fc:	d8802917 	ldw	r2,164(sp)
10001700:	28a1c83a 	sub	r16,r5,r2
10001704:	04002e0e 	bge	zero,r16,100017c0 <___svfprintf_internal_r+0xa60>
10001708:	04400404 	movi	r17,16
1000170c:	d8801f17 	ldw	r2,124(sp)
10001710:	8c04db0e 	bge	r17,r16,10002a80 <___svfprintf_internal_r+0x1d20>
10001714:	01440074 	movhi	r5,4097
10001718:	29785a84 	addi	r5,r5,-7830
1000171c:	d9403515 	stw	r5,212(sp)
10001720:	048001c4 	movi	r18,7
10001724:	dd002d17 	ldw	r20,180(sp)
10001728:	00000306 	br	10001738 <___svfprintf_internal_r+0x9d8>
1000172c:	843ffc04 	addi	r16,r16,-16
10001730:	42000204 	addi	r8,r8,8
10001734:	8c00130e 	bge	r17,r16,10001784 <___svfprintf_internal_r+0xa24>
10001738:	01040074 	movhi	r4,4097
1000173c:	18c00404 	addi	r3,r3,16
10001740:	10800044 	addi	r2,r2,1
10001744:	21385a84 	addi	r4,r4,-7830
10001748:	41000015 	stw	r4,0(r8)
1000174c:	44400115 	stw	r17,4(r8)
10001750:	d8c02015 	stw	r3,128(sp)
10001754:	d8801f15 	stw	r2,124(sp)
10001758:	90bff40e 	bge	r18,r2,1000172c <__alt_data_end+0xf800172c>
1000175c:	d9801e04 	addi	r6,sp,120
10001760:	a00b883a 	mov	r5,r20
10001764:	9809883a 	mov	r4,r19
10001768:	000663c0 	call	1000663c <__ssprint_r>
1000176c:	103e631e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001770:	843ffc04 	addi	r16,r16,-16
10001774:	d8c02017 	ldw	r3,128(sp)
10001778:	d8801f17 	ldw	r2,124(sp)
1000177c:	da000404 	addi	r8,sp,16
10001780:	8c3fed16 	blt	r17,r16,10001738 <__alt_data_end+0xf8001738>
10001784:	d9403517 	ldw	r5,212(sp)
10001788:	1c07883a 	add	r3,r3,r16
1000178c:	10800044 	addi	r2,r2,1
10001790:	41400015 	stw	r5,0(r8)
10001794:	44000115 	stw	r16,4(r8)
10001798:	d8c02015 	stw	r3,128(sp)
1000179c:	d8801f15 	stw	r2,124(sp)
100017a0:	010001c4 	movi	r4,7
100017a4:	2080060e 	bge	r4,r2,100017c0 <___svfprintf_internal_r+0xa60>
100017a8:	d9402d17 	ldw	r5,180(sp)
100017ac:	d9801e04 	addi	r6,sp,120
100017b0:	9809883a 	mov	r4,r19
100017b4:	000663c0 	call	1000663c <__ssprint_r>
100017b8:	103e501e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100017bc:	d8c02017 	ldw	r3,128(sp)
100017c0:	d8803117 	ldw	r2,196(sp)
100017c4:	d9002917 	ldw	r4,164(sp)
100017c8:	1100010e 	bge	r2,r4,100017d0 <___svfprintf_internal_r+0xa70>
100017cc:	2005883a 	mov	r2,r4
100017d0:	d9402f17 	ldw	r5,188(sp)
100017d4:	288b883a 	add	r5,r5,r2
100017d8:	d9402f15 	stw	r5,188(sp)
100017dc:	1801be1e 	bne	r3,zero,10001ed8 <___svfprintf_internal_r+0x1178>
100017e0:	b8800007 	ldb	r2,0(r23)
100017e4:	d8001f15 	stw	zero,124(sp)
100017e8:	da000404 	addi	r8,sp,16
100017ec:	103d891e 	bne	r2,zero,10000e14 <__alt_data_end+0xf8000e14>
100017f0:	b823883a 	mov	r17,r23
100017f4:	003d9f06 	br	10000e74 <__alt_data_end+0xf8000e74>
100017f8:	8025883a 	mov	r18,r16
100017fc:	dc002903 	ldbu	r16,164(sp)
10001800:	e011883a 	mov	r8,fp
10001804:	84003fcc 	andi	r16,r16,255
10001808:	8005e61e 	bne	r16,zero,10002fa4 <___svfprintf_internal_r+0x2244>
1000180c:	94800414 	ori	r18,r18,16
10001810:	9080080c 	andi	r2,r18,32
10001814:	10022026 	beq	r2,zero,10002098 <___svfprintf_internal_r+0x1338>
10001818:	d9002e17 	ldw	r4,184(sp)
1000181c:	d9402a17 	ldw	r5,168(sp)
10001820:	d8002785 	stb	zero,158(sp)
10001824:	20c00204 	addi	r3,r4,8
10001828:	25000017 	ldw	r20,0(r4)
1000182c:	25800117 	ldw	r22,4(r4)
10001830:	2803ad16 	blt	r5,zero,100026e8 <___svfprintf_internal_r+0x1988>
10001834:	013fdfc4 	movi	r4,-129
10001838:	a584b03a 	or	r2,r20,r22
1000183c:	d8c02e15 	stw	r3,184(sp)
10001840:	9124703a 	and	r18,r18,r4
10001844:	0039883a 	mov	fp,zero
10001848:	103eb01e 	bne	r2,zero,1000130c <__alt_data_end+0xf800130c>
1000184c:	d8802a17 	ldw	r2,168(sp)
10001850:	1002e71e 	bne	r2,zero,100023f0 <___svfprintf_internal_r+0x1690>
10001854:	d8002a15 	stw	zero,168(sp)
10001858:	d8002b15 	stw	zero,172(sp)
1000185c:	dc001e04 	addi	r16,sp,120
10001860:	003ef706 	br	10001440 <__alt_data_end+0xf8001440>
10001864:	8025883a 	mov	r18,r16
10001868:	dc002903 	ldbu	r16,164(sp)
1000186c:	e011883a 	mov	r8,fp
10001870:	84003fcc 	andi	r16,r16,255
10001874:	8005c81e 	bne	r16,zero,10002f98 <___svfprintf_internal_r+0x2238>
10001878:	01040074 	movhi	r4,4097
1000187c:	21384a04 	addi	r4,r4,-7896
10001880:	d9003a15 	stw	r4,232(sp)
10001884:	9080080c 	andi	r2,r18,32
10001888:	10007226 	beq	r2,zero,10001a54 <___svfprintf_internal_r+0xcf4>
1000188c:	d9402e17 	ldw	r5,184(sp)
10001890:	2d000017 	ldw	r20,0(r5)
10001894:	2d800117 	ldw	r22,4(r5)
10001898:	29400204 	addi	r5,r5,8
1000189c:	d9402e15 	stw	r5,184(sp)
100018a0:	9080004c 	andi	r2,r18,1
100018a4:	1001aa26 	beq	r2,zero,10001f50 <___svfprintf_internal_r+0x11f0>
100018a8:	a584b03a 	or	r2,r20,r22
100018ac:	10032526 	beq	r2,zero,10002544 <___svfprintf_internal_r+0x17e4>
100018b0:	d8c02a17 	ldw	r3,168(sp)
100018b4:	00800c04 	movi	r2,48
100018b8:	d8802705 	stb	r2,156(sp)
100018bc:	dc402745 	stb	r17,157(sp)
100018c0:	d8002785 	stb	zero,158(sp)
100018c4:	90800094 	ori	r2,r18,2
100018c8:	1804a316 	blt	r3,zero,10002b58 <___svfprintf_internal_r+0x1df8>
100018cc:	00bfdfc4 	movi	r2,-129
100018d0:	90a4703a 	and	r18,r18,r2
100018d4:	94800094 	ori	r18,r18,2
100018d8:	0039883a 	mov	fp,zero
100018dc:	d9003a17 	ldw	r4,232(sp)
100018e0:	dc001e04 	addi	r16,sp,120
100018e4:	a08003cc 	andi	r2,r20,15
100018e8:	b006973a 	slli	r3,r22,28
100018ec:	2085883a 	add	r2,r4,r2
100018f0:	a028d13a 	srli	r20,r20,4
100018f4:	10800003 	ldbu	r2,0(r2)
100018f8:	b02cd13a 	srli	r22,r22,4
100018fc:	843fffc4 	addi	r16,r16,-1
10001900:	1d28b03a 	or	r20,r3,r20
10001904:	80800005 	stb	r2,0(r16)
10001908:	a584b03a 	or	r2,r20,r22
1000190c:	103ff51e 	bne	r2,zero,100018e4 <__alt_data_end+0xf80018e4>
10001910:	d8c02817 	ldw	r3,160(sp)
10001914:	1c07c83a 	sub	r3,r3,r16
10001918:	d8c02b15 	stw	r3,172(sp)
1000191c:	003ec806 	br	10001440 <__alt_data_end+0xf8001440>
10001920:	d8c02e17 	ldw	r3,184(sp)
10001924:	d9002e17 	ldw	r4,184(sp)
10001928:	8025883a 	mov	r18,r16
1000192c:	18800017 	ldw	r2,0(r3)
10001930:	21000104 	addi	r4,r4,4
10001934:	00c00044 	movi	r3,1
10001938:	e011883a 	mov	r8,fp
1000193c:	d8c02915 	stw	r3,164(sp)
10001940:	d8002785 	stb	zero,158(sp)
10001944:	d8801405 	stb	r2,80(sp)
10001948:	d9002e15 	stw	r4,184(sp)
1000194c:	d8c02b15 	stw	r3,172(sp)
10001950:	d8002a15 	stw	zero,168(sp)
10001954:	d8003215 	stw	zero,200(sp)
10001958:	dc001404 	addi	r16,sp,80
1000195c:	0039883a 	mov	fp,zero
10001960:	003ec406 	br	10001474 <__alt_data_end+0xf8001474>
10001964:	8025883a 	mov	r18,r16
10001968:	dc002903 	ldbu	r16,164(sp)
1000196c:	e011883a 	mov	r8,fp
10001970:	84003fcc 	andi	r16,r16,255
10001974:	803e8726 	beq	r16,zero,10001394 <__alt_data_end+0xf8001394>
10001978:	d8c02b03 	ldbu	r3,172(sp)
1000197c:	d8c02785 	stb	r3,158(sp)
10001980:	003e8406 	br	10001394 <__alt_data_end+0xf8001394>
10001984:	00c00044 	movi	r3,1
10001988:	d8c02905 	stb	r3,164(sp)
1000198c:	00c00ac4 	movi	r3,43
10001990:	d8c02b05 	stb	r3,172(sp)
10001994:	bc400007 	ldb	r17,0(r23)
10001998:	003d4606 	br	10000eb4 <__alt_data_end+0xf8000eb4>
1000199c:	84000814 	ori	r16,r16,32
100019a0:	bc400007 	ldb	r17,0(r23)
100019a4:	003d4306 	br	10000eb4 <__alt_data_end+0xf8000eb4>
100019a8:	d8802e17 	ldw	r2,184(sp)
100019ac:	8025883a 	mov	r18,r16
100019b0:	d8002785 	stb	zero,158(sp)
100019b4:	14000017 	ldw	r16,0(r2)
100019b8:	e011883a 	mov	r8,fp
100019bc:	15000104 	addi	r20,r2,4
100019c0:	80042126 	beq	r16,zero,10002a48 <___svfprintf_internal_r+0x1ce8>
100019c4:	d8c02a17 	ldw	r3,168(sp)
100019c8:	1803ee16 	blt	r3,zero,10002984 <___svfprintf_internal_r+0x1c24>
100019cc:	180d883a 	mov	r6,r3
100019d0:	000b883a 	mov	r5,zero
100019d4:	8009883a 	mov	r4,r16
100019d8:	df003e15 	stw	fp,248(sp)
100019dc:	00051b40 	call	100051b4 <memchr>
100019e0:	da003e17 	ldw	r8,248(sp)
100019e4:	10046a26 	beq	r2,zero,10002b90 <___svfprintf_internal_r+0x1e30>
100019e8:	1405c83a 	sub	r2,r2,r16
100019ec:	d8802b15 	stw	r2,172(sp)
100019f0:	1003ea16 	blt	r2,zero,1000299c <___svfprintf_internal_r+0x1c3c>
100019f4:	df002783 	ldbu	fp,158(sp)
100019f8:	d8802915 	stw	r2,164(sp)
100019fc:	dd002e15 	stw	r20,184(sp)
10001a00:	d8002a15 	stw	zero,168(sp)
10001a04:	d8003215 	stw	zero,200(sp)
10001a08:	003e9306 	br	10001458 <__alt_data_end+0xf8001458>
10001a0c:	8025883a 	mov	r18,r16
10001a10:	dc002903 	ldbu	r16,164(sp)
10001a14:	e011883a 	mov	r8,fp
10001a18:	84003fcc 	andi	r16,r16,255
10001a1c:	803f7c26 	beq	r16,zero,10001810 <__alt_data_end+0xf8001810>
10001a20:	d8c02b03 	ldbu	r3,172(sp)
10001a24:	d8c02785 	stb	r3,158(sp)
10001a28:	003f7906 	br	10001810 <__alt_data_end+0xf8001810>
10001a2c:	8025883a 	mov	r18,r16
10001a30:	dc002903 	ldbu	r16,164(sp)
10001a34:	e011883a 	mov	r8,fp
10001a38:	84003fcc 	andi	r16,r16,255
10001a3c:	8005741e 	bne	r16,zero,10003010 <___svfprintf_internal_r+0x22b0>
10001a40:	01040074 	movhi	r4,4097
10001a44:	21384f04 	addi	r4,r4,-7876
10001a48:	d9003a15 	stw	r4,232(sp)
10001a4c:	9080080c 	andi	r2,r18,32
10001a50:	103f8e1e 	bne	r2,zero,1000188c <__alt_data_end+0xf800188c>
10001a54:	9080040c 	andi	r2,r18,16
10001a58:	1002a726 	beq	r2,zero,100024f8 <___svfprintf_internal_r+0x1798>
10001a5c:	d8802e17 	ldw	r2,184(sp)
10001a60:	002d883a 	mov	r22,zero
10001a64:	15000017 	ldw	r20,0(r2)
10001a68:	10800104 	addi	r2,r2,4
10001a6c:	d8802e15 	stw	r2,184(sp)
10001a70:	003f8b06 	br	100018a0 <__alt_data_end+0xf80018a0>
10001a74:	84000054 	ori	r16,r16,1
10001a78:	bc400007 	ldb	r17,0(r23)
10001a7c:	003d0d06 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10001a80:	d8802b07 	ldb	r2,172(sp)
10001a84:	1002a41e 	bne	r2,zero,10002518 <___svfprintf_internal_r+0x17b8>
10001a88:	00c00044 	movi	r3,1
10001a8c:	d8c02905 	stb	r3,164(sp)
10001a90:	00c00804 	movi	r3,32
10001a94:	d8c02b05 	stb	r3,172(sp)
10001a98:	bc400007 	ldb	r17,0(r23)
10001a9c:	003d0506 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10001aa0:	8025883a 	mov	r18,r16
10001aa4:	dc002903 	ldbu	r16,164(sp)
10001aa8:	e011883a 	mov	r8,fp
10001aac:	84003fcc 	andi	r16,r16,255
10001ab0:	803e0626 	beq	r16,zero,100012cc <__alt_data_end+0xf80012cc>
10001ab4:	d8c02b03 	ldbu	r3,172(sp)
10001ab8:	d8c02785 	stb	r3,158(sp)
10001abc:	003e0306 	br	100012cc <__alt_data_end+0xf80012cc>
10001ac0:	bc400007 	ldb	r17,0(r23)
10001ac4:	00801b04 	movi	r2,108
10001ac8:	88830a26 	beq	r17,r2,100026f4 <___svfprintf_internal_r+0x1994>
10001acc:	84000414 	ori	r16,r16,16
10001ad0:	003cf806 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10001ad4:	8025883a 	mov	r18,r16
10001ad8:	dc002903 	ldbu	r16,164(sp)
10001adc:	e011883a 	mov	r8,fp
10001ae0:	84003fcc 	andi	r16,r16,255
10001ae4:	8005471e 	bne	r16,zero,10003004 <___svfprintf_internal_r+0x22a4>
10001ae8:	9080080c 	andi	r2,r18,32
10001aec:	10028c26 	beq	r2,zero,10002520 <___svfprintf_internal_r+0x17c0>
10001af0:	d9002e17 	ldw	r4,184(sp)
10001af4:	d9402f17 	ldw	r5,188(sp)
10001af8:	20800017 	ldw	r2,0(r4)
10001afc:	2807d7fa 	srai	r3,r5,31
10001b00:	21000104 	addi	r4,r4,4
10001b04:	d9002e15 	stw	r4,184(sp)
10001b08:	11400015 	stw	r5,0(r2)
10001b0c:	10c00115 	stw	r3,4(r2)
10001b10:	003cbe06 	br	10000e0c <__alt_data_end+0xf8000e0c>
10001b14:	84001014 	ori	r16,r16,64
10001b18:	bc400007 	ldb	r17,0(r23)
10001b1c:	003ce506 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10001b20:	01040074 	movhi	r4,4097
10001b24:	21384f04 	addi	r4,r4,-7876
10001b28:	0039883a 	mov	fp,zero
10001b2c:	d9003a15 	stw	r4,232(sp)
10001b30:	04401e04 	movi	r17,120
10001b34:	003f6906 	br	100018dc <__alt_data_end+0xf80018dc>
10001b38:	8025883a 	mov	r18,r16
10001b3c:	dc002903 	ldbu	r16,164(sp)
10001b40:	e011883a 	mov	r8,fp
10001b44:	84003fcc 	andi	r16,r16,255
10001b48:	8005261e 	bne	r16,zero,10002fe4 <___svfprintf_internal_r+0x2284>
10001b4c:	883d6526 	beq	r17,zero,100010e4 <__alt_data_end+0xf80010e4>
10001b50:	00c00044 	movi	r3,1
10001b54:	d8c02915 	stw	r3,164(sp)
10001b58:	dc401405 	stb	r17,80(sp)
10001b5c:	d8002785 	stb	zero,158(sp)
10001b60:	003f7a06 	br	1000194c <__alt_data_end+0xf800194c>
10001b64:	01040074 	movhi	r4,4097
10001b68:	21384f04 	addi	r4,r4,-7876
10001b6c:	d9003a15 	stw	r4,232(sp)
10001b70:	d8c02e15 	stw	r3,184(sp)
10001b74:	1025883a 	mov	r18,r2
10001b78:	04401e04 	movi	r17,120
10001b7c:	a584b03a 	or	r2,r20,r22
10001b80:	1000fa1e 	bne	r2,zero,10001f6c <___svfprintf_internal_r+0x120c>
10001b84:	0039883a 	mov	fp,zero
10001b88:	00800084 	movi	r2,2
10001b8c:	10803fcc 	andi	r2,r2,255
10001b90:	00c00044 	movi	r3,1
10001b94:	10c21626 	beq	r2,r3,100023f0 <___svfprintf_internal_r+0x1690>
10001b98:	00c00084 	movi	r3,2
10001b9c:	10fe0e1e 	bne	r2,r3,100013d8 <__alt_data_end+0xf80013d8>
10001ba0:	003d4606 	br	100010bc <__alt_data_end+0xf80010bc>
10001ba4:	d8c02017 	ldw	r3,128(sp)
10001ba8:	003e7306 	br	10001578 <__alt_data_end+0xf8001578>
10001bac:	00801944 	movi	r2,101
10001bb0:	14407c0e 	bge	r2,r17,10001da4 <___svfprintf_internal_r+0x1044>
10001bb4:	d9003617 	ldw	r4,216(sp)
10001bb8:	d9403717 	ldw	r5,220(sp)
10001bbc:	000d883a 	mov	r6,zero
10001bc0:	000f883a 	mov	r7,zero
10001bc4:	d8c03d15 	stw	r3,244(sp)
10001bc8:	da003e15 	stw	r8,248(sp)
10001bcc:	000a7ec0 	call	1000a7ec <__eqdf2>
10001bd0:	d8c03d17 	ldw	r3,244(sp)
10001bd4:	da003e17 	ldw	r8,248(sp)
10001bd8:	1000f51e 	bne	r2,zero,10001fb0 <___svfprintf_internal_r+0x1250>
10001bdc:	d8801f17 	ldw	r2,124(sp)
10001be0:	01040074 	movhi	r4,4097
10001be4:	21385604 	addi	r4,r4,-7848
10001be8:	18c00044 	addi	r3,r3,1
10001bec:	10800044 	addi	r2,r2,1
10001bf0:	41000015 	stw	r4,0(r8)
10001bf4:	01000044 	movi	r4,1
10001bf8:	41000115 	stw	r4,4(r8)
10001bfc:	d8c02015 	stw	r3,128(sp)
10001c00:	d8801f15 	stw	r2,124(sp)
10001c04:	010001c4 	movi	r4,7
10001c08:	20826616 	blt	r4,r2,100025a4 <___svfprintf_internal_r+0x1844>
10001c0c:	42000204 	addi	r8,r8,8
10001c10:	d8802617 	ldw	r2,152(sp)
10001c14:	d9403317 	ldw	r5,204(sp)
10001c18:	11400216 	blt	r2,r5,10001c24 <___svfprintf_internal_r+0xec4>
10001c1c:	9080004c 	andi	r2,r18,1
10001c20:	103eb326 	beq	r2,zero,100016f0 <__alt_data_end+0xf80016f0>
10001c24:	d8803817 	ldw	r2,224(sp)
10001c28:	d9003417 	ldw	r4,208(sp)
10001c2c:	d9403817 	ldw	r5,224(sp)
10001c30:	1887883a 	add	r3,r3,r2
10001c34:	d8801f17 	ldw	r2,124(sp)
10001c38:	41000015 	stw	r4,0(r8)
10001c3c:	41400115 	stw	r5,4(r8)
10001c40:	10800044 	addi	r2,r2,1
10001c44:	d8c02015 	stw	r3,128(sp)
10001c48:	d8801f15 	stw	r2,124(sp)
10001c4c:	010001c4 	movi	r4,7
10001c50:	2082af16 	blt	r4,r2,10002710 <___svfprintf_internal_r+0x19b0>
10001c54:	42000204 	addi	r8,r8,8
10001c58:	d8803317 	ldw	r2,204(sp)
10001c5c:	143fffc4 	addi	r16,r2,-1
10001c60:	043ea30e 	bge	zero,r16,100016f0 <__alt_data_end+0xf80016f0>
10001c64:	04400404 	movi	r17,16
10001c68:	d8801f17 	ldw	r2,124(sp)
10001c6c:	8c00860e 	bge	r17,r16,10001e88 <___svfprintf_internal_r+0x1128>
10001c70:	01440074 	movhi	r5,4097
10001c74:	29785684 	addi	r5,r5,-7846
10001c78:	d9402c15 	stw	r5,176(sp)
10001c7c:	058001c4 	movi	r22,7
10001c80:	dd002d17 	ldw	r20,180(sp)
10001c84:	00000306 	br	10001c94 <___svfprintf_internal_r+0xf34>
10001c88:	42000204 	addi	r8,r8,8
10001c8c:	843ffc04 	addi	r16,r16,-16
10001c90:	8c00800e 	bge	r17,r16,10001e94 <___svfprintf_internal_r+0x1134>
10001c94:	18c00404 	addi	r3,r3,16
10001c98:	10800044 	addi	r2,r2,1
10001c9c:	45400015 	stw	r21,0(r8)
10001ca0:	44400115 	stw	r17,4(r8)
10001ca4:	d8c02015 	stw	r3,128(sp)
10001ca8:	d8801f15 	stw	r2,124(sp)
10001cac:	b0bff60e 	bge	r22,r2,10001c88 <__alt_data_end+0xf8001c88>
10001cb0:	d9801e04 	addi	r6,sp,120
10001cb4:	a00b883a 	mov	r5,r20
10001cb8:	9809883a 	mov	r4,r19
10001cbc:	000663c0 	call	1000663c <__ssprint_r>
10001cc0:	103d0e1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001cc4:	d8c02017 	ldw	r3,128(sp)
10001cc8:	d8801f17 	ldw	r2,124(sp)
10001ccc:	da000404 	addi	r8,sp,16
10001cd0:	003fee06 	br	10001c8c <__alt_data_end+0xf8001c8c>
10001cd4:	d9403117 	ldw	r5,196(sp)
10001cd8:	d8802917 	ldw	r2,164(sp)
10001cdc:	28adc83a 	sub	r22,r5,r2
10001ce0:	05be430e 	bge	zero,r22,100015f0 <__alt_data_end+0xf80015f0>
10001ce4:	07000404 	movi	fp,16
10001ce8:	d8801f17 	ldw	r2,124(sp)
10001cec:	e583a20e 	bge	fp,r22,10002b78 <___svfprintf_internal_r+0x1e18>
10001cf0:	01440074 	movhi	r5,4097
10001cf4:	29785684 	addi	r5,r5,-7846
10001cf8:	dc403015 	stw	r17,192(sp)
10001cfc:	d9402c15 	stw	r5,176(sp)
10001d00:	b023883a 	mov	r17,r22
10001d04:	050001c4 	movi	r20,7
10001d08:	902d883a 	mov	r22,r18
10001d0c:	8025883a 	mov	r18,r16
10001d10:	dc002d17 	ldw	r16,180(sp)
10001d14:	00000306 	br	10001d24 <___svfprintf_internal_r+0xfc4>
10001d18:	8c7ffc04 	addi	r17,r17,-16
10001d1c:	42000204 	addi	r8,r8,8
10001d20:	e440110e 	bge	fp,r17,10001d68 <___svfprintf_internal_r+0x1008>
10001d24:	18c00404 	addi	r3,r3,16
10001d28:	10800044 	addi	r2,r2,1
10001d2c:	45400015 	stw	r21,0(r8)
10001d30:	47000115 	stw	fp,4(r8)
10001d34:	d8c02015 	stw	r3,128(sp)
10001d38:	d8801f15 	stw	r2,124(sp)
10001d3c:	a0bff60e 	bge	r20,r2,10001d18 <__alt_data_end+0xf8001d18>
10001d40:	d9801e04 	addi	r6,sp,120
10001d44:	800b883a 	mov	r5,r16
10001d48:	9809883a 	mov	r4,r19
10001d4c:	000663c0 	call	1000663c <__ssprint_r>
10001d50:	103cea1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001d54:	8c7ffc04 	addi	r17,r17,-16
10001d58:	d8c02017 	ldw	r3,128(sp)
10001d5c:	d8801f17 	ldw	r2,124(sp)
10001d60:	da000404 	addi	r8,sp,16
10001d64:	e47fef16 	blt	fp,r17,10001d24 <__alt_data_end+0xf8001d24>
10001d68:	9021883a 	mov	r16,r18
10001d6c:	b025883a 	mov	r18,r22
10001d70:	882d883a 	mov	r22,r17
10001d74:	dc403017 	ldw	r17,192(sp)
10001d78:	d9002c17 	ldw	r4,176(sp)
10001d7c:	1d87883a 	add	r3,r3,r22
10001d80:	10800044 	addi	r2,r2,1
10001d84:	41000015 	stw	r4,0(r8)
10001d88:	45800115 	stw	r22,4(r8)
10001d8c:	d8c02015 	stw	r3,128(sp)
10001d90:	d8801f15 	stw	r2,124(sp)
10001d94:	010001c4 	movi	r4,7
10001d98:	20819a16 	blt	r4,r2,10002404 <___svfprintf_internal_r+0x16a4>
10001d9c:	42000204 	addi	r8,r8,8
10001da0:	003e1306 	br	100015f0 <__alt_data_end+0xf80015f0>
10001da4:	d9403317 	ldw	r5,204(sp)
10001da8:	00800044 	movi	r2,1
10001dac:	18c00044 	addi	r3,r3,1
10001db0:	1141710e 	bge	r2,r5,10002378 <___svfprintf_internal_r+0x1618>
10001db4:	dc401f17 	ldw	r17,124(sp)
10001db8:	00800044 	movi	r2,1
10001dbc:	40800115 	stw	r2,4(r8)
10001dc0:	8c400044 	addi	r17,r17,1
10001dc4:	44000015 	stw	r16,0(r8)
10001dc8:	d8c02015 	stw	r3,128(sp)
10001dcc:	dc401f15 	stw	r17,124(sp)
10001dd0:	008001c4 	movi	r2,7
10001dd4:	14417416 	blt	r2,r17,100023a8 <___svfprintf_internal_r+0x1648>
10001dd8:	42000204 	addi	r8,r8,8
10001ddc:	d8803817 	ldw	r2,224(sp)
10001de0:	d9003417 	ldw	r4,208(sp)
10001de4:	8c400044 	addi	r17,r17,1
10001de8:	10c7883a 	add	r3,r2,r3
10001dec:	40800115 	stw	r2,4(r8)
10001df0:	41000015 	stw	r4,0(r8)
10001df4:	d8c02015 	stw	r3,128(sp)
10001df8:	dc401f15 	stw	r17,124(sp)
10001dfc:	008001c4 	movi	r2,7
10001e00:	14417216 	blt	r2,r17,100023cc <___svfprintf_internal_r+0x166c>
10001e04:	45800204 	addi	r22,r8,8
10001e08:	d9003617 	ldw	r4,216(sp)
10001e0c:	d9403717 	ldw	r5,220(sp)
10001e10:	000d883a 	mov	r6,zero
10001e14:	000f883a 	mov	r7,zero
10001e18:	d8c03d15 	stw	r3,244(sp)
10001e1c:	000a7ec0 	call	1000a7ec <__eqdf2>
10001e20:	d8c03d17 	ldw	r3,244(sp)
10001e24:	1000b326 	beq	r2,zero,100020f4 <___svfprintf_internal_r+0x1394>
10001e28:	d9403317 	ldw	r5,204(sp)
10001e2c:	84000044 	addi	r16,r16,1
10001e30:	8c400044 	addi	r17,r17,1
10001e34:	28bfffc4 	addi	r2,r5,-1
10001e38:	1887883a 	add	r3,r3,r2
10001e3c:	b0800115 	stw	r2,4(r22)
10001e40:	b4000015 	stw	r16,0(r22)
10001e44:	d8c02015 	stw	r3,128(sp)
10001e48:	dc401f15 	stw	r17,124(sp)
10001e4c:	008001c4 	movi	r2,7
10001e50:	1440d216 	blt	r2,r17,1000219c <___svfprintf_internal_r+0x143c>
10001e54:	b5800204 	addi	r22,r22,8
10001e58:	d9003b17 	ldw	r4,236(sp)
10001e5c:	df0022c4 	addi	fp,sp,139
10001e60:	8c400044 	addi	r17,r17,1
10001e64:	20c7883a 	add	r3,r4,r3
10001e68:	b7000015 	stw	fp,0(r22)
10001e6c:	b1000115 	stw	r4,4(r22)
10001e70:	d8c02015 	stw	r3,128(sp)
10001e74:	dc401f15 	stw	r17,124(sp)
10001e78:	008001c4 	movi	r2,7
10001e7c:	14400e16 	blt	r2,r17,10001eb8 <___svfprintf_internal_r+0x1158>
10001e80:	b2000204 	addi	r8,r22,8
10001e84:	003e1a06 	br	100016f0 <__alt_data_end+0xf80016f0>
10001e88:	01040074 	movhi	r4,4097
10001e8c:	21385684 	addi	r4,r4,-7846
10001e90:	d9002c15 	stw	r4,176(sp)
10001e94:	d9002c17 	ldw	r4,176(sp)
10001e98:	1c07883a 	add	r3,r3,r16
10001e9c:	44000115 	stw	r16,4(r8)
10001ea0:	41000015 	stw	r4,0(r8)
10001ea4:	10800044 	addi	r2,r2,1
10001ea8:	d8c02015 	stw	r3,128(sp)
10001eac:	d8801f15 	stw	r2,124(sp)
10001eb0:	010001c4 	movi	r4,7
10001eb4:	20be0d0e 	bge	r4,r2,100016ec <__alt_data_end+0xf80016ec>
10001eb8:	d9402d17 	ldw	r5,180(sp)
10001ebc:	d9801e04 	addi	r6,sp,120
10001ec0:	9809883a 	mov	r4,r19
10001ec4:	000663c0 	call	1000663c <__ssprint_r>
10001ec8:	103c8c1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001ecc:	d8c02017 	ldw	r3,128(sp)
10001ed0:	da000404 	addi	r8,sp,16
10001ed4:	003e0606 	br	100016f0 <__alt_data_end+0xf80016f0>
10001ed8:	d9402d17 	ldw	r5,180(sp)
10001edc:	d9801e04 	addi	r6,sp,120
10001ee0:	9809883a 	mov	r4,r19
10001ee4:	000663c0 	call	1000663c <__ssprint_r>
10001ee8:	103e3d26 	beq	r2,zero,100017e0 <__alt_data_end+0xf80017e0>
10001eec:	003c8306 	br	100010fc <__alt_data_end+0xf80010fc>
10001ef0:	d9402d17 	ldw	r5,180(sp)
10001ef4:	d9801e04 	addi	r6,sp,120
10001ef8:	9809883a 	mov	r4,r19
10001efc:	000663c0 	call	1000663c <__ssprint_r>
10001f00:	103c7e1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001f04:	d8c02017 	ldw	r3,128(sp)
10001f08:	da000404 	addi	r8,sp,16
10001f0c:	003deb06 	br	100016bc <__alt_data_end+0xf80016bc>
10001f10:	d9402d17 	ldw	r5,180(sp)
10001f14:	d9801e04 	addi	r6,sp,120
10001f18:	9809883a 	mov	r4,r19
10001f1c:	000663c0 	call	1000663c <__ssprint_r>
10001f20:	103c761e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001f24:	d8c02017 	ldw	r3,128(sp)
10001f28:	da000404 	addi	r8,sp,16
10001f2c:	003d9f06 	br	100015ac <__alt_data_end+0xf80015ac>
10001f30:	d9402d17 	ldw	r5,180(sp)
10001f34:	d9801e04 	addi	r6,sp,120
10001f38:	9809883a 	mov	r4,r19
10001f3c:	000663c0 	call	1000663c <__ssprint_r>
10001f40:	103c6e1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10001f44:	d8c02017 	ldw	r3,128(sp)
10001f48:	da000404 	addi	r8,sp,16
10001f4c:	003da506 	br	100015e4 <__alt_data_end+0xf80015e4>
10001f50:	d9402a17 	ldw	r5,168(sp)
10001f54:	d8002785 	stb	zero,158(sp)
10001f58:	283f0816 	blt	r5,zero,10001b7c <__alt_data_end+0xf8001b7c>
10001f5c:	00ffdfc4 	movi	r3,-129
10001f60:	a584b03a 	or	r2,r20,r22
10001f64:	90e4703a 	and	r18,r18,r3
10001f68:	103c5126 	beq	r2,zero,100010b0 <__alt_data_end+0xf80010b0>
10001f6c:	0039883a 	mov	fp,zero
10001f70:	003e5a06 	br	100018dc <__alt_data_end+0xf80018dc>
10001f74:	9080040c 	andi	r2,r18,16
10001f78:	10013d26 	beq	r2,zero,10002470 <___svfprintf_internal_r+0x1710>
10001f7c:	d8c02e17 	ldw	r3,184(sp)
10001f80:	d9002a17 	ldw	r4,168(sp)
10001f84:	d8002785 	stb	zero,158(sp)
10001f88:	18800104 	addi	r2,r3,4
10001f8c:	1d000017 	ldw	r20,0(r3)
10001f90:	002d883a 	mov	r22,zero
10001f94:	20013f16 	blt	r4,zero,10002494 <___svfprintf_internal_r+0x1734>
10001f98:	00ffdfc4 	movi	r3,-129
10001f9c:	d8802e15 	stw	r2,184(sp)
10001fa0:	90e4703a 	and	r18,r18,r3
10001fa4:	a03d0926 	beq	r20,zero,100013cc <__alt_data_end+0xf80013cc>
10001fa8:	0039883a 	mov	fp,zero
10001fac:	003d0c06 	br	100013e0 <__alt_data_end+0xf80013e0>
10001fb0:	dc402617 	ldw	r17,152(sp)
10001fb4:	0441830e 	bge	zero,r17,100025c4 <___svfprintf_internal_r+0x1864>
10001fb8:	dc403217 	ldw	r17,200(sp)
10001fbc:	d8803317 	ldw	r2,204(sp)
10001fc0:	1440010e 	bge	r2,r17,10001fc8 <___svfprintf_internal_r+0x1268>
10001fc4:	1023883a 	mov	r17,r2
10001fc8:	04400a0e 	bge	zero,r17,10001ff4 <___svfprintf_internal_r+0x1294>
10001fcc:	d8801f17 	ldw	r2,124(sp)
10001fd0:	1c47883a 	add	r3,r3,r17
10001fd4:	44000015 	stw	r16,0(r8)
10001fd8:	10800044 	addi	r2,r2,1
10001fdc:	44400115 	stw	r17,4(r8)
10001fe0:	d8c02015 	stw	r3,128(sp)
10001fe4:	d8801f15 	stw	r2,124(sp)
10001fe8:	010001c4 	movi	r4,7
10001fec:	20827516 	blt	r4,r2,100029c4 <___svfprintf_internal_r+0x1c64>
10001ff0:	42000204 	addi	r8,r8,8
10001ff4:	88027b16 	blt	r17,zero,100029e4 <___svfprintf_internal_r+0x1c84>
10001ff8:	d9003217 	ldw	r4,200(sp)
10001ffc:	2463c83a 	sub	r17,r4,r17
10002000:	0440990e 	bge	zero,r17,10002268 <___svfprintf_internal_r+0x1508>
10002004:	05800404 	movi	r22,16
10002008:	d8801f17 	ldw	r2,124(sp)
1000200c:	b441530e 	bge	r22,r17,1000255c <___svfprintf_internal_r+0x17fc>
10002010:	01040074 	movhi	r4,4097
10002014:	21385684 	addi	r4,r4,-7846
10002018:	d9002c15 	stw	r4,176(sp)
1000201c:	070001c4 	movi	fp,7
10002020:	dd002d17 	ldw	r20,180(sp)
10002024:	00000306 	br	10002034 <___svfprintf_internal_r+0x12d4>
10002028:	42000204 	addi	r8,r8,8
1000202c:	8c7ffc04 	addi	r17,r17,-16
10002030:	b4414d0e 	bge	r22,r17,10002568 <___svfprintf_internal_r+0x1808>
10002034:	18c00404 	addi	r3,r3,16
10002038:	10800044 	addi	r2,r2,1
1000203c:	45400015 	stw	r21,0(r8)
10002040:	45800115 	stw	r22,4(r8)
10002044:	d8c02015 	stw	r3,128(sp)
10002048:	d8801f15 	stw	r2,124(sp)
1000204c:	e0bff60e 	bge	fp,r2,10002028 <__alt_data_end+0xf8002028>
10002050:	d9801e04 	addi	r6,sp,120
10002054:	a00b883a 	mov	r5,r20
10002058:	9809883a 	mov	r4,r19
1000205c:	000663c0 	call	1000663c <__ssprint_r>
10002060:	103c261e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002064:	d8c02017 	ldw	r3,128(sp)
10002068:	d8801f17 	ldw	r2,124(sp)
1000206c:	da000404 	addi	r8,sp,16
10002070:	003fee06 	br	1000202c <__alt_data_end+0xf800202c>
10002074:	d9402d17 	ldw	r5,180(sp)
10002078:	d9801e04 	addi	r6,sp,120
1000207c:	9809883a 	mov	r4,r19
10002080:	000663c0 	call	1000663c <__ssprint_r>
10002084:	103c1d1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002088:	d8c02017 	ldw	r3,128(sp)
1000208c:	df002787 	ldb	fp,158(sp)
10002090:	da000404 	addi	r8,sp,16
10002094:	003d3806 	br	10001578 <__alt_data_end+0xf8001578>
10002098:	9080040c 	andi	r2,r18,16
1000209c:	10005c26 	beq	r2,zero,10002210 <___svfprintf_internal_r+0x14b0>
100020a0:	d8c02e17 	ldw	r3,184(sp)
100020a4:	d9002a17 	ldw	r4,168(sp)
100020a8:	d8002785 	stb	zero,158(sp)
100020ac:	18800104 	addi	r2,r3,4
100020b0:	1d000017 	ldw	r20,0(r3)
100020b4:	002d883a 	mov	r22,zero
100020b8:	20005e16 	blt	r4,zero,10002234 <___svfprintf_internal_r+0x14d4>
100020bc:	00ffdfc4 	movi	r3,-129
100020c0:	d8802e15 	stw	r2,184(sp)
100020c4:	90e4703a 	and	r18,r18,r3
100020c8:	0039883a 	mov	fp,zero
100020cc:	a03ddf26 	beq	r20,zero,1000184c <__alt_data_end+0xf800184c>
100020d0:	00800244 	movi	r2,9
100020d4:	153c8e36 	bltu	r2,r20,10001310 <__alt_data_end+0xf8001310>
100020d8:	a5000c04 	addi	r20,r20,48
100020dc:	dc001dc4 	addi	r16,sp,119
100020e0:	dd001dc5 	stb	r20,119(sp)
100020e4:	d8c02817 	ldw	r3,160(sp)
100020e8:	1c07c83a 	sub	r3,r3,r16
100020ec:	d8c02b15 	stw	r3,172(sp)
100020f0:	003cd306 	br	10001440 <__alt_data_end+0xf8001440>
100020f4:	d8803317 	ldw	r2,204(sp)
100020f8:	143fffc4 	addi	r16,r2,-1
100020fc:	043f560e 	bge	zero,r16,10001e58 <__alt_data_end+0xf8001e58>
10002100:	07000404 	movi	fp,16
10002104:	e403530e 	bge	fp,r16,10002e54 <___svfprintf_internal_r+0x20f4>
10002108:	01440074 	movhi	r5,4097
1000210c:	29785684 	addi	r5,r5,-7846
10002110:	d9402c15 	stw	r5,176(sp)
10002114:	01c001c4 	movi	r7,7
10002118:	dd002d17 	ldw	r20,180(sp)
1000211c:	00000306 	br	1000212c <___svfprintf_internal_r+0x13cc>
10002120:	843ffc04 	addi	r16,r16,-16
10002124:	b5800204 	addi	r22,r22,8
10002128:	e400130e 	bge	fp,r16,10002178 <___svfprintf_internal_r+0x1418>
1000212c:	18c00404 	addi	r3,r3,16
10002130:	8c400044 	addi	r17,r17,1
10002134:	b5400015 	stw	r21,0(r22)
10002138:	b7000115 	stw	fp,4(r22)
1000213c:	d8c02015 	stw	r3,128(sp)
10002140:	dc401f15 	stw	r17,124(sp)
10002144:	3c7ff60e 	bge	r7,r17,10002120 <__alt_data_end+0xf8002120>
10002148:	d9801e04 	addi	r6,sp,120
1000214c:	a00b883a 	mov	r5,r20
10002150:	9809883a 	mov	r4,r19
10002154:	d9c03d15 	stw	r7,244(sp)
10002158:	000663c0 	call	1000663c <__ssprint_r>
1000215c:	d9c03d17 	ldw	r7,244(sp)
10002160:	103be61e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002164:	843ffc04 	addi	r16,r16,-16
10002168:	d8c02017 	ldw	r3,128(sp)
1000216c:	dc401f17 	ldw	r17,124(sp)
10002170:	dd800404 	addi	r22,sp,16
10002174:	e43fed16 	blt	fp,r16,1000212c <__alt_data_end+0xf800212c>
10002178:	d8802c17 	ldw	r2,176(sp)
1000217c:	1c07883a 	add	r3,r3,r16
10002180:	8c400044 	addi	r17,r17,1
10002184:	b0800015 	stw	r2,0(r22)
10002188:	b4000115 	stw	r16,4(r22)
1000218c:	d8c02015 	stw	r3,128(sp)
10002190:	dc401f15 	stw	r17,124(sp)
10002194:	008001c4 	movi	r2,7
10002198:	147f2e0e 	bge	r2,r17,10001e54 <__alt_data_end+0xf8001e54>
1000219c:	d9402d17 	ldw	r5,180(sp)
100021a0:	d9801e04 	addi	r6,sp,120
100021a4:	9809883a 	mov	r4,r19
100021a8:	000663c0 	call	1000663c <__ssprint_r>
100021ac:	103bd31e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100021b0:	d8c02017 	ldw	r3,128(sp)
100021b4:	dc401f17 	ldw	r17,124(sp)
100021b8:	dd800404 	addi	r22,sp,16
100021bc:	003f2606 	br	10001e58 <__alt_data_end+0xf8001e58>
100021c0:	9080040c 	andi	r2,r18,16
100021c4:	1000c326 	beq	r2,zero,100024d4 <___svfprintf_internal_r+0x1774>
100021c8:	d9402e17 	ldw	r5,184(sp)
100021cc:	2d000017 	ldw	r20,0(r5)
100021d0:	29400104 	addi	r5,r5,4
100021d4:	d9402e15 	stw	r5,184(sp)
100021d8:	a02dd7fa 	srai	r22,r20,31
100021dc:	b005883a 	mov	r2,r22
100021e0:	103c430e 	bge	r2,zero,100012f0 <__alt_data_end+0xf80012f0>
100021e4:	d9402a17 	ldw	r5,168(sp)
100021e8:	0529c83a 	sub	r20,zero,r20
100021ec:	07000b44 	movi	fp,45
100021f0:	a004c03a 	cmpne	r2,r20,zero
100021f4:	05adc83a 	sub	r22,zero,r22
100021f8:	df002785 	stb	fp,158(sp)
100021fc:	b0adc83a 	sub	r22,r22,r2
10002200:	28022e16 	blt	r5,zero,10002abc <___svfprintf_internal_r+0x1d5c>
10002204:	00bfdfc4 	movi	r2,-129
10002208:	90a4703a 	and	r18,r18,r2
1000220c:	003c3f06 	br	1000130c <__alt_data_end+0xf800130c>
10002210:	9080100c 	andi	r2,r18,64
10002214:	d8002785 	stb	zero,158(sp)
10002218:	10012526 	beq	r2,zero,100026b0 <___svfprintf_internal_r+0x1950>
1000221c:	d9402e17 	ldw	r5,184(sp)
10002220:	d8c02a17 	ldw	r3,168(sp)
10002224:	002d883a 	mov	r22,zero
10002228:	28800104 	addi	r2,r5,4
1000222c:	2d00000b 	ldhu	r20,0(r5)
10002230:	183fa20e 	bge	r3,zero,100020bc <__alt_data_end+0xf80020bc>
10002234:	d8802e15 	stw	r2,184(sp)
10002238:	0039883a 	mov	fp,zero
1000223c:	a584b03a 	or	r2,r20,r22
10002240:	103c321e 	bne	r2,zero,1000130c <__alt_data_end+0xf800130c>
10002244:	00800044 	movi	r2,1
10002248:	003e5006 	br	10001b8c <__alt_data_end+0xf8001b8c>
1000224c:	d9402d17 	ldw	r5,180(sp)
10002250:	d9801e04 	addi	r6,sp,120
10002254:	9809883a 	mov	r4,r19
10002258:	000663c0 	call	1000663c <__ssprint_r>
1000225c:	103ba71e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002260:	d8c02017 	ldw	r3,128(sp)
10002264:	da000404 	addi	r8,sp,16
10002268:	d9003217 	ldw	r4,200(sp)
1000226c:	d8802617 	ldw	r2,152(sp)
10002270:	d9403317 	ldw	r5,204(sp)
10002274:	8123883a 	add	r17,r16,r4
10002278:	11400216 	blt	r2,r5,10002284 <___svfprintf_internal_r+0x1524>
1000227c:	9100004c 	andi	r4,r18,1
10002280:	20000d26 	beq	r4,zero,100022b8 <___svfprintf_internal_r+0x1558>
10002284:	d9003817 	ldw	r4,224(sp)
10002288:	d9403417 	ldw	r5,208(sp)
1000228c:	1907883a 	add	r3,r3,r4
10002290:	d9001f17 	ldw	r4,124(sp)
10002294:	41400015 	stw	r5,0(r8)
10002298:	d9403817 	ldw	r5,224(sp)
1000229c:	21000044 	addi	r4,r4,1
100022a0:	d8c02015 	stw	r3,128(sp)
100022a4:	41400115 	stw	r5,4(r8)
100022a8:	d9001f15 	stw	r4,124(sp)
100022ac:	014001c4 	movi	r5,7
100022b0:	2901dc16 	blt	r5,r4,10002a24 <___svfprintf_internal_r+0x1cc4>
100022b4:	42000204 	addi	r8,r8,8
100022b8:	d9003317 	ldw	r4,204(sp)
100022bc:	8121883a 	add	r16,r16,r4
100022c0:	2085c83a 	sub	r2,r4,r2
100022c4:	8461c83a 	sub	r16,r16,r17
100022c8:	1400010e 	bge	r2,r16,100022d0 <___svfprintf_internal_r+0x1570>
100022cc:	1021883a 	mov	r16,r2
100022d0:	04000a0e 	bge	zero,r16,100022fc <___svfprintf_internal_r+0x159c>
100022d4:	d9001f17 	ldw	r4,124(sp)
100022d8:	1c07883a 	add	r3,r3,r16
100022dc:	44400015 	stw	r17,0(r8)
100022e0:	21000044 	addi	r4,r4,1
100022e4:	44000115 	stw	r16,4(r8)
100022e8:	d8c02015 	stw	r3,128(sp)
100022ec:	d9001f15 	stw	r4,124(sp)
100022f0:	014001c4 	movi	r5,7
100022f4:	2901e616 	blt	r5,r4,10002a90 <___svfprintf_internal_r+0x1d30>
100022f8:	42000204 	addi	r8,r8,8
100022fc:	8001f616 	blt	r16,zero,10002ad8 <___svfprintf_internal_r+0x1d78>
10002300:	1421c83a 	sub	r16,r2,r16
10002304:	043cfa0e 	bge	zero,r16,100016f0 <__alt_data_end+0xf80016f0>
10002308:	04400404 	movi	r17,16
1000230c:	d8801f17 	ldw	r2,124(sp)
10002310:	8c3edd0e 	bge	r17,r16,10001e88 <__alt_data_end+0xf8001e88>
10002314:	01440074 	movhi	r5,4097
10002318:	29785684 	addi	r5,r5,-7846
1000231c:	d9402c15 	stw	r5,176(sp)
10002320:	058001c4 	movi	r22,7
10002324:	dd002d17 	ldw	r20,180(sp)
10002328:	00000306 	br	10002338 <___svfprintf_internal_r+0x15d8>
1000232c:	42000204 	addi	r8,r8,8
10002330:	843ffc04 	addi	r16,r16,-16
10002334:	8c3ed70e 	bge	r17,r16,10001e94 <__alt_data_end+0xf8001e94>
10002338:	18c00404 	addi	r3,r3,16
1000233c:	10800044 	addi	r2,r2,1
10002340:	45400015 	stw	r21,0(r8)
10002344:	44400115 	stw	r17,4(r8)
10002348:	d8c02015 	stw	r3,128(sp)
1000234c:	d8801f15 	stw	r2,124(sp)
10002350:	b0bff60e 	bge	r22,r2,1000232c <__alt_data_end+0xf800232c>
10002354:	d9801e04 	addi	r6,sp,120
10002358:	a00b883a 	mov	r5,r20
1000235c:	9809883a 	mov	r4,r19
10002360:	000663c0 	call	1000663c <__ssprint_r>
10002364:	103b651e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002368:	d8c02017 	ldw	r3,128(sp)
1000236c:	d8801f17 	ldw	r2,124(sp)
10002370:	da000404 	addi	r8,sp,16
10002374:	003fee06 	br	10002330 <__alt_data_end+0xf8002330>
10002378:	9088703a 	and	r4,r18,r2
1000237c:	203e8d1e 	bne	r4,zero,10001db4 <__alt_data_end+0xf8001db4>
10002380:	dc401f17 	ldw	r17,124(sp)
10002384:	40800115 	stw	r2,4(r8)
10002388:	44000015 	stw	r16,0(r8)
1000238c:	8c400044 	addi	r17,r17,1
10002390:	d8c02015 	stw	r3,128(sp)
10002394:	dc401f15 	stw	r17,124(sp)
10002398:	008001c4 	movi	r2,7
1000239c:	147f7f16 	blt	r2,r17,1000219c <__alt_data_end+0xf800219c>
100023a0:	45800204 	addi	r22,r8,8
100023a4:	003eac06 	br	10001e58 <__alt_data_end+0xf8001e58>
100023a8:	d9402d17 	ldw	r5,180(sp)
100023ac:	d9801e04 	addi	r6,sp,120
100023b0:	9809883a 	mov	r4,r19
100023b4:	000663c0 	call	1000663c <__ssprint_r>
100023b8:	103b501e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100023bc:	d8c02017 	ldw	r3,128(sp)
100023c0:	dc401f17 	ldw	r17,124(sp)
100023c4:	da000404 	addi	r8,sp,16
100023c8:	003e8406 	br	10001ddc <__alt_data_end+0xf8001ddc>
100023cc:	d9402d17 	ldw	r5,180(sp)
100023d0:	d9801e04 	addi	r6,sp,120
100023d4:	9809883a 	mov	r4,r19
100023d8:	000663c0 	call	1000663c <__ssprint_r>
100023dc:	103b471e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100023e0:	d8c02017 	ldw	r3,128(sp)
100023e4:	dc401f17 	ldw	r17,124(sp)
100023e8:	dd800404 	addi	r22,sp,16
100023ec:	003e8606 	br	10001e08 <__alt_data_end+0xf8001e08>
100023f0:	0029883a 	mov	r20,zero
100023f4:	a5000c04 	addi	r20,r20,48
100023f8:	dc001dc4 	addi	r16,sp,119
100023fc:	dd001dc5 	stb	r20,119(sp)
10002400:	003f3806 	br	100020e4 <__alt_data_end+0xf80020e4>
10002404:	d9402d17 	ldw	r5,180(sp)
10002408:	d9801e04 	addi	r6,sp,120
1000240c:	9809883a 	mov	r4,r19
10002410:	000663c0 	call	1000663c <__ssprint_r>
10002414:	103b391e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002418:	d8c02017 	ldw	r3,128(sp)
1000241c:	da000404 	addi	r8,sp,16
10002420:	003c7306 	br	100015f0 <__alt_data_end+0xf80015f0>
10002424:	d9003617 	ldw	r4,216(sp)
10002428:	d9403717 	ldw	r5,220(sp)
1000242c:	da003e15 	stw	r8,248(sp)
10002430:	00064980 	call	10006498 <__fpclassifyd>
10002434:	da003e17 	ldw	r8,248(sp)
10002438:	1000bd1e 	bne	r2,zero,10002730 <___svfprintf_internal_r+0x19d0>
1000243c:	008011c4 	movi	r2,71
10002440:	14411e0e 	bge	r2,r17,100028bc <___svfprintf_internal_r+0x1b5c>
10002444:	04040074 	movhi	r16,4097
10002448:	84384904 	addi	r16,r16,-7900
1000244c:	00c000c4 	movi	r3,3
10002450:	00bfdfc4 	movi	r2,-129
10002454:	d8c02915 	stw	r3,164(sp)
10002458:	90a4703a 	and	r18,r18,r2
1000245c:	df002783 	ldbu	fp,158(sp)
10002460:	d8c02b15 	stw	r3,172(sp)
10002464:	d8002a15 	stw	zero,168(sp)
10002468:	d8003215 	stw	zero,200(sp)
1000246c:	003bfa06 	br	10001458 <__alt_data_end+0xf8001458>
10002470:	9080100c 	andi	r2,r18,64
10002474:	d8002785 	stb	zero,158(sp)
10002478:	10009426 	beq	r2,zero,100026cc <___svfprintf_internal_r+0x196c>
1000247c:	d9402e17 	ldw	r5,184(sp)
10002480:	d8c02a17 	ldw	r3,168(sp)
10002484:	002d883a 	mov	r22,zero
10002488:	28800104 	addi	r2,r5,4
1000248c:	2d00000b 	ldhu	r20,0(r5)
10002490:	183ec10e 	bge	r3,zero,10001f98 <__alt_data_end+0xf8001f98>
10002494:	a586b03a 	or	r3,r20,r22
10002498:	d8802e15 	stw	r2,184(sp)
1000249c:	183ec21e 	bne	r3,zero,10001fa8 <__alt_data_end+0xf8001fa8>
100024a0:	0039883a 	mov	fp,zero
100024a4:	0005883a 	mov	r2,zero
100024a8:	003db806 	br	10001b8c <__alt_data_end+0xf8001b8c>
100024ac:	d8c02e17 	ldw	r3,184(sp)
100024b0:	d9002e17 	ldw	r4,184(sp)
100024b4:	d9402e17 	ldw	r5,184(sp)
100024b8:	18c00017 	ldw	r3,0(r3)
100024bc:	21000117 	ldw	r4,4(r4)
100024c0:	29400204 	addi	r5,r5,8
100024c4:	d8c03615 	stw	r3,216(sp)
100024c8:	d9003715 	stw	r4,220(sp)
100024cc:	d9402e15 	stw	r5,184(sp)
100024d0:	003b5a06 	br	1000123c <__alt_data_end+0xf800123c>
100024d4:	9080100c 	andi	r2,r18,64
100024d8:	10010726 	beq	r2,zero,100028f8 <___svfprintf_internal_r+0x1b98>
100024dc:	d8802e17 	ldw	r2,184(sp)
100024e0:	1500000f 	ldh	r20,0(r2)
100024e4:	10800104 	addi	r2,r2,4
100024e8:	d8802e15 	stw	r2,184(sp)
100024ec:	a02dd7fa 	srai	r22,r20,31
100024f0:	b005883a 	mov	r2,r22
100024f4:	003b7d06 	br	100012ec <__alt_data_end+0xf80012ec>
100024f8:	9080100c 	andi	r2,r18,64
100024fc:	10010526 	beq	r2,zero,10002914 <___svfprintf_internal_r+0x1bb4>
10002500:	d8c02e17 	ldw	r3,184(sp)
10002504:	002d883a 	mov	r22,zero
10002508:	1d00000b 	ldhu	r20,0(r3)
1000250c:	18c00104 	addi	r3,r3,4
10002510:	d8c02e15 	stw	r3,184(sp)
10002514:	003ce206 	br	100018a0 <__alt_data_end+0xf80018a0>
10002518:	bc400007 	ldb	r17,0(r23)
1000251c:	003a6506 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10002520:	9080040c 	andi	r2,r18,16
10002524:	10010126 	beq	r2,zero,1000292c <___svfprintf_internal_r+0x1bcc>
10002528:	d8c02e17 	ldw	r3,184(sp)
1000252c:	d9002f17 	ldw	r4,188(sp)
10002530:	18800017 	ldw	r2,0(r3)
10002534:	18c00104 	addi	r3,r3,4
10002538:	d8c02e15 	stw	r3,184(sp)
1000253c:	11000015 	stw	r4,0(r2)
10002540:	003a3206 	br	10000e0c <__alt_data_end+0xf8000e0c>
10002544:	d9002a17 	ldw	r4,168(sp)
10002548:	d8002785 	stb	zero,158(sp)
1000254c:	203d8d16 	blt	r4,zero,10001b84 <__alt_data_end+0xf8001b84>
10002550:	00bfdfc4 	movi	r2,-129
10002554:	90a4703a 	and	r18,r18,r2
10002558:	003ad506 	br	100010b0 <__alt_data_end+0xf80010b0>
1000255c:	01440074 	movhi	r5,4097
10002560:	29785684 	addi	r5,r5,-7846
10002564:	d9402c15 	stw	r5,176(sp)
10002568:	d9402c17 	ldw	r5,176(sp)
1000256c:	1c47883a 	add	r3,r3,r17
10002570:	10800044 	addi	r2,r2,1
10002574:	41400015 	stw	r5,0(r8)
10002578:	44400115 	stw	r17,4(r8)
1000257c:	d8c02015 	stw	r3,128(sp)
10002580:	d8801f15 	stw	r2,124(sp)
10002584:	010001c4 	movi	r4,7
10002588:	20bf3016 	blt	r4,r2,1000224c <__alt_data_end+0xf800224c>
1000258c:	42000204 	addi	r8,r8,8
10002590:	003f3506 	br	10002268 <__alt_data_end+0xf8002268>
10002594:	01040074 	movhi	r4,4097
10002598:	21385684 	addi	r4,r4,-7846
1000259c:	d9002c15 	stw	r4,176(sp)
100025a0:	003c3c06 	br	10001694 <__alt_data_end+0xf8001694>
100025a4:	d9402d17 	ldw	r5,180(sp)
100025a8:	d9801e04 	addi	r6,sp,120
100025ac:	9809883a 	mov	r4,r19
100025b0:	000663c0 	call	1000663c <__ssprint_r>
100025b4:	103ad11e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100025b8:	d8c02017 	ldw	r3,128(sp)
100025bc:	da000404 	addi	r8,sp,16
100025c0:	003d9306 	br	10001c10 <__alt_data_end+0xf8001c10>
100025c4:	d8801f17 	ldw	r2,124(sp)
100025c8:	01440074 	movhi	r5,4097
100025cc:	01000044 	movi	r4,1
100025d0:	18c00044 	addi	r3,r3,1
100025d4:	10800044 	addi	r2,r2,1
100025d8:	29785604 	addi	r5,r5,-7848
100025dc:	41000115 	stw	r4,4(r8)
100025e0:	41400015 	stw	r5,0(r8)
100025e4:	d8c02015 	stw	r3,128(sp)
100025e8:	d8801f15 	stw	r2,124(sp)
100025ec:	010001c4 	movi	r4,7
100025f0:	2080b516 	blt	r4,r2,100028c8 <___svfprintf_internal_r+0x1b68>
100025f4:	42000204 	addi	r8,r8,8
100025f8:	8800041e 	bne	r17,zero,1000260c <___svfprintf_internal_r+0x18ac>
100025fc:	d8803317 	ldw	r2,204(sp)
10002600:	1000021e 	bne	r2,zero,1000260c <___svfprintf_internal_r+0x18ac>
10002604:	9080004c 	andi	r2,r18,1
10002608:	103c3926 	beq	r2,zero,100016f0 <__alt_data_end+0xf80016f0>
1000260c:	d9003817 	ldw	r4,224(sp)
10002610:	d8801f17 	ldw	r2,124(sp)
10002614:	d9403417 	ldw	r5,208(sp)
10002618:	20c7883a 	add	r3,r4,r3
1000261c:	10800044 	addi	r2,r2,1
10002620:	41000115 	stw	r4,4(r8)
10002624:	41400015 	stw	r5,0(r8)
10002628:	d8c02015 	stw	r3,128(sp)
1000262c:	d8801f15 	stw	r2,124(sp)
10002630:	010001c4 	movi	r4,7
10002634:	20818016 	blt	r4,r2,10002c38 <___svfprintf_internal_r+0x1ed8>
10002638:	42000204 	addi	r8,r8,8
1000263c:	0463c83a 	sub	r17,zero,r17
10002640:	0440cb0e 	bge	zero,r17,10002970 <___svfprintf_internal_r+0x1c10>
10002644:	05800404 	movi	r22,16
10002648:	b440e80e 	bge	r22,r17,100029ec <___svfprintf_internal_r+0x1c8c>
1000264c:	01440074 	movhi	r5,4097
10002650:	29785684 	addi	r5,r5,-7846
10002654:	d9402c15 	stw	r5,176(sp)
10002658:	070001c4 	movi	fp,7
1000265c:	dd002d17 	ldw	r20,180(sp)
10002660:	00000306 	br	10002670 <___svfprintf_internal_r+0x1910>
10002664:	42000204 	addi	r8,r8,8
10002668:	8c7ffc04 	addi	r17,r17,-16
1000266c:	b440e20e 	bge	r22,r17,100029f8 <___svfprintf_internal_r+0x1c98>
10002670:	18c00404 	addi	r3,r3,16
10002674:	10800044 	addi	r2,r2,1
10002678:	45400015 	stw	r21,0(r8)
1000267c:	45800115 	stw	r22,4(r8)
10002680:	d8c02015 	stw	r3,128(sp)
10002684:	d8801f15 	stw	r2,124(sp)
10002688:	e0bff60e 	bge	fp,r2,10002664 <__alt_data_end+0xf8002664>
1000268c:	d9801e04 	addi	r6,sp,120
10002690:	a00b883a 	mov	r5,r20
10002694:	9809883a 	mov	r4,r19
10002698:	000663c0 	call	1000663c <__ssprint_r>
1000269c:	103a971e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100026a0:	d8c02017 	ldw	r3,128(sp)
100026a4:	d8801f17 	ldw	r2,124(sp)
100026a8:	da000404 	addi	r8,sp,16
100026ac:	003fee06 	br	10002668 <__alt_data_end+0xf8002668>
100026b0:	d9002e17 	ldw	r4,184(sp)
100026b4:	d9402a17 	ldw	r5,168(sp)
100026b8:	002d883a 	mov	r22,zero
100026bc:	20800104 	addi	r2,r4,4
100026c0:	25000017 	ldw	r20,0(r4)
100026c4:	283e7d0e 	bge	r5,zero,100020bc <__alt_data_end+0xf80020bc>
100026c8:	003eda06 	br	10002234 <__alt_data_end+0xf8002234>
100026cc:	d9002e17 	ldw	r4,184(sp)
100026d0:	d9402a17 	ldw	r5,168(sp)
100026d4:	002d883a 	mov	r22,zero
100026d8:	20800104 	addi	r2,r4,4
100026dc:	25000017 	ldw	r20,0(r4)
100026e0:	283e2d0e 	bge	r5,zero,10001f98 <__alt_data_end+0xf8001f98>
100026e4:	003f6b06 	br	10002494 <__alt_data_end+0xf8002494>
100026e8:	d8c02e15 	stw	r3,184(sp)
100026ec:	0039883a 	mov	fp,zero
100026f0:	003ed206 	br	1000223c <__alt_data_end+0xf800223c>
100026f4:	bc400043 	ldbu	r17,1(r23)
100026f8:	84000814 	ori	r16,r16,32
100026fc:	bdc00044 	addi	r23,r23,1
10002700:	8c403fcc 	andi	r17,r17,255
10002704:	8c40201c 	xori	r17,r17,128
10002708:	8c7fe004 	addi	r17,r17,-128
1000270c:	0039e906 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10002710:	d9402d17 	ldw	r5,180(sp)
10002714:	d9801e04 	addi	r6,sp,120
10002718:	9809883a 	mov	r4,r19
1000271c:	000663c0 	call	1000663c <__ssprint_r>
10002720:	103a761e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002724:	d8c02017 	ldw	r3,128(sp)
10002728:	da000404 	addi	r8,sp,16
1000272c:	003d4a06 	br	10001c58 <__alt_data_end+0xf8001c58>
10002730:	d9002a17 	ldw	r4,168(sp)
10002734:	05bff7c4 	movi	r22,-33
10002738:	00bfffc4 	movi	r2,-1
1000273c:	8dac703a 	and	r22,r17,r22
10002740:	20806a26 	beq	r4,r2,100028ec <___svfprintf_internal_r+0x1b8c>
10002744:	008011c4 	movi	r2,71
10002748:	b0813726 	beq	r22,r2,10002c28 <___svfprintf_internal_r+0x1ec8>
1000274c:	d9003717 	ldw	r4,220(sp)
10002750:	90c04014 	ori	r3,r18,256
10002754:	d8c02c15 	stw	r3,176(sp)
10002758:	20015d16 	blt	r4,zero,10002cd0 <___svfprintf_internal_r+0x1f70>
1000275c:	dd003717 	ldw	r20,220(sp)
10002760:	d8002905 	stb	zero,164(sp)
10002764:	00801984 	movi	r2,102
10002768:	88814026 	beq	r17,r2,10002c6c <___svfprintf_internal_r+0x1f0c>
1000276c:	00801184 	movi	r2,70
10002770:	88817126 	beq	r17,r2,10002d38 <___svfprintf_internal_r+0x1fd8>
10002774:	00801144 	movi	r2,69
10002778:	b0816226 	beq	r22,r2,10002d04 <___svfprintf_internal_r+0x1fa4>
1000277c:	d8c02a17 	ldw	r3,168(sp)
10002780:	d8802104 	addi	r2,sp,132
10002784:	d8800315 	stw	r2,12(sp)
10002788:	d9403617 	ldw	r5,216(sp)
1000278c:	d8802504 	addi	r2,sp,148
10002790:	d8800215 	stw	r2,8(sp)
10002794:	d8802604 	addi	r2,sp,152
10002798:	d8c00015 	stw	r3,0(sp)
1000279c:	d8800115 	stw	r2,4(sp)
100027a0:	01c00084 	movi	r7,2
100027a4:	a00d883a 	mov	r6,r20
100027a8:	9809883a 	mov	r4,r19
100027ac:	d8c03d15 	stw	r3,244(sp)
100027b0:	da003e15 	stw	r8,248(sp)
100027b4:	00032440 	call	10003244 <_dtoa_r>
100027b8:	1021883a 	mov	r16,r2
100027bc:	008019c4 	movi	r2,103
100027c0:	d8c03d17 	ldw	r3,244(sp)
100027c4:	da003e17 	ldw	r8,248(sp)
100027c8:	8880e726 	beq	r17,r2,10002b68 <___svfprintf_internal_r+0x1e08>
100027cc:	008011c4 	movi	r2,71
100027d0:	8880d426 	beq	r17,r2,10002b24 <___svfprintf_internal_r+0x1dc4>
100027d4:	80f9883a 	add	fp,r16,r3
100027d8:	d9003617 	ldw	r4,216(sp)
100027dc:	000d883a 	mov	r6,zero
100027e0:	000f883a 	mov	r7,zero
100027e4:	a00b883a 	mov	r5,r20
100027e8:	da003e15 	stw	r8,248(sp)
100027ec:	000a7ec0 	call	1000a7ec <__eqdf2>
100027f0:	da003e17 	ldw	r8,248(sp)
100027f4:	1000e426 	beq	r2,zero,10002b88 <___svfprintf_internal_r+0x1e28>
100027f8:	d8802117 	ldw	r2,132(sp)
100027fc:	1700062e 	bgeu	r2,fp,10002818 <___svfprintf_internal_r+0x1ab8>
10002800:	01000c04 	movi	r4,48
10002804:	10c00044 	addi	r3,r2,1
10002808:	d8c02115 	stw	r3,132(sp)
1000280c:	11000005 	stb	r4,0(r2)
10002810:	d8802117 	ldw	r2,132(sp)
10002814:	173ffb36 	bltu	r2,fp,10002804 <__alt_data_end+0xf8002804>
10002818:	1405c83a 	sub	r2,r2,r16
1000281c:	d8803315 	stw	r2,204(sp)
10002820:	008011c4 	movi	r2,71
10002824:	b080c526 	beq	r22,r2,10002b3c <___svfprintf_internal_r+0x1ddc>
10002828:	00801944 	movi	r2,101
1000282c:	1441d80e 	bge	r2,r17,10002f90 <___svfprintf_internal_r+0x2230>
10002830:	d8c02617 	ldw	r3,152(sp)
10002834:	00801984 	movi	r2,102
10002838:	d8c03215 	stw	r3,200(sp)
1000283c:	88813426 	beq	r17,r2,10002d10 <___svfprintf_internal_r+0x1fb0>
10002840:	d8c03217 	ldw	r3,200(sp)
10002844:	d9003317 	ldw	r4,204(sp)
10002848:	19012516 	blt	r3,r4,10002ce0 <___svfprintf_internal_r+0x1f80>
1000284c:	9480004c 	andi	r18,r18,1
10002850:	9001841e 	bne	r18,zero,10002e64 <___svfprintf_internal_r+0x2104>
10002854:	1805883a 	mov	r2,r3
10002858:	1801cb16 	blt	r3,zero,10002f88 <___svfprintf_internal_r+0x2228>
1000285c:	d8c03217 	ldw	r3,200(sp)
10002860:	044019c4 	movi	r17,103
10002864:	d8c02b15 	stw	r3,172(sp)
10002868:	df002907 	ldb	fp,164(sp)
1000286c:	e000a61e 	bne	fp,zero,10002b08 <___svfprintf_internal_r+0x1da8>
10002870:	df002783 	ldbu	fp,158(sp)
10002874:	d8802915 	stw	r2,164(sp)
10002878:	dc802c17 	ldw	r18,176(sp)
1000287c:	d8002a15 	stw	zero,168(sp)
10002880:	003af506 	br	10001458 <__alt_data_end+0xf8001458>
10002884:	04040074 	movhi	r16,4097
10002888:	84384604 	addi	r16,r16,-7912
1000288c:	003a7e06 	br	10001288 <__alt_data_end+0xf8001288>
10002890:	d9003917 	ldw	r4,228(sp)
10002894:	04001004 	movi	r16,64
10002898:	800b883a 	mov	r5,r16
1000289c:	00049a80 	call	100049a8 <_malloc_r>
100028a0:	d9002d17 	ldw	r4,180(sp)
100028a4:	20800015 	stw	r2,0(r4)
100028a8:	20800415 	stw	r2,16(r4)
100028ac:	1001d026 	beq	r2,zero,10002ff0 <___svfprintf_internal_r+0x2290>
100028b0:	d8802d17 	ldw	r2,180(sp)
100028b4:	14000515 	stw	r16,20(r2)
100028b8:	00394406 	br	10000dcc <__alt_data_end+0xf8000dcc>
100028bc:	04040074 	movhi	r16,4097
100028c0:	84384804 	addi	r16,r16,-7904
100028c4:	003ee106 	br	1000244c <__alt_data_end+0xf800244c>
100028c8:	d9402d17 	ldw	r5,180(sp)
100028cc:	d9801e04 	addi	r6,sp,120
100028d0:	9809883a 	mov	r4,r19
100028d4:	000663c0 	call	1000663c <__ssprint_r>
100028d8:	103a081e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100028dc:	dc402617 	ldw	r17,152(sp)
100028e0:	d8c02017 	ldw	r3,128(sp)
100028e4:	da000404 	addi	r8,sp,16
100028e8:	003f4306 	br	100025f8 <__alt_data_end+0xf80025f8>
100028ec:	01400184 	movi	r5,6
100028f0:	d9402a15 	stw	r5,168(sp)
100028f4:	003f9506 	br	1000274c <__alt_data_end+0xf800274c>
100028f8:	d8c02e17 	ldw	r3,184(sp)
100028fc:	1d000017 	ldw	r20,0(r3)
10002900:	18c00104 	addi	r3,r3,4
10002904:	d8c02e15 	stw	r3,184(sp)
10002908:	a02dd7fa 	srai	r22,r20,31
1000290c:	b005883a 	mov	r2,r22
10002910:	003a7606 	br	100012ec <__alt_data_end+0xf80012ec>
10002914:	d9002e17 	ldw	r4,184(sp)
10002918:	002d883a 	mov	r22,zero
1000291c:	25000017 	ldw	r20,0(r4)
10002920:	21000104 	addi	r4,r4,4
10002924:	d9002e15 	stw	r4,184(sp)
10002928:	003bdd06 	br	100018a0 <__alt_data_end+0xf80018a0>
1000292c:	9480100c 	andi	r18,r18,64
10002930:	90006e26 	beq	r18,zero,10002aec <___svfprintf_internal_r+0x1d8c>
10002934:	d9402e17 	ldw	r5,184(sp)
10002938:	d8c02f17 	ldw	r3,188(sp)
1000293c:	28800017 	ldw	r2,0(r5)
10002940:	29400104 	addi	r5,r5,4
10002944:	d9402e15 	stw	r5,184(sp)
10002948:	10c0000d 	sth	r3,0(r2)
1000294c:	00392f06 	br	10000e0c <__alt_data_end+0xf8000e0c>
10002950:	d9402d17 	ldw	r5,180(sp)
10002954:	d9801e04 	addi	r6,sp,120
10002958:	9809883a 	mov	r4,r19
1000295c:	000663c0 	call	1000663c <__ssprint_r>
10002960:	1039e61e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002964:	d8c02017 	ldw	r3,128(sp)
10002968:	d8801f17 	ldw	r2,124(sp)
1000296c:	da000404 	addi	r8,sp,16
10002970:	d9403317 	ldw	r5,204(sp)
10002974:	10800044 	addi	r2,r2,1
10002978:	44000015 	stw	r16,0(r8)
1000297c:	28c7883a 	add	r3,r5,r3
10002980:	003b5506 	br	100016d8 <__alt_data_end+0xf80016d8>
10002984:	8009883a 	mov	r4,r16
10002988:	df003e15 	stw	fp,248(sp)
1000298c:	0000cc80 	call	10000cc8 <strlen>
10002990:	d8802b15 	stw	r2,172(sp)
10002994:	da003e17 	ldw	r8,248(sp)
10002998:	103c160e 	bge	r2,zero,100019f4 <__alt_data_end+0xf80019f4>
1000299c:	0005883a 	mov	r2,zero
100029a0:	003c1406 	br	100019f4 <__alt_data_end+0xf80019f4>
100029a4:	00bfffc4 	movi	r2,-1
100029a8:	0039d906 	br	10001110 <__alt_data_end+0xf8001110>
100029ac:	01040074 	movhi	r4,4097
100029b0:	21385a84 	addi	r4,r4,-7830
100029b4:	d9003515 	stw	r4,212(sp)
100029b8:	003ae406 	br	1000154c <__alt_data_end+0xf800154c>
100029bc:	013fffc4 	movi	r4,-1
100029c0:	0039fa06 	br	100011ac <__alt_data_end+0xf80011ac>
100029c4:	d9402d17 	ldw	r5,180(sp)
100029c8:	d9801e04 	addi	r6,sp,120
100029cc:	9809883a 	mov	r4,r19
100029d0:	000663c0 	call	1000663c <__ssprint_r>
100029d4:	1039c91e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
100029d8:	d8c02017 	ldw	r3,128(sp)
100029dc:	da000404 	addi	r8,sp,16
100029e0:	003d8406 	br	10001ff4 <__alt_data_end+0xf8001ff4>
100029e4:	0023883a 	mov	r17,zero
100029e8:	003d8306 	br	10001ff8 <__alt_data_end+0xf8001ff8>
100029ec:	01040074 	movhi	r4,4097
100029f0:	21385684 	addi	r4,r4,-7846
100029f4:	d9002c15 	stw	r4,176(sp)
100029f8:	d9002c17 	ldw	r4,176(sp)
100029fc:	1c47883a 	add	r3,r3,r17
10002a00:	10800044 	addi	r2,r2,1
10002a04:	41000015 	stw	r4,0(r8)
10002a08:	44400115 	stw	r17,4(r8)
10002a0c:	d8c02015 	stw	r3,128(sp)
10002a10:	d8801f15 	stw	r2,124(sp)
10002a14:	010001c4 	movi	r4,7
10002a18:	20bfcd16 	blt	r4,r2,10002950 <__alt_data_end+0xf8002950>
10002a1c:	42000204 	addi	r8,r8,8
10002a20:	003fd306 	br	10002970 <__alt_data_end+0xf8002970>
10002a24:	d9402d17 	ldw	r5,180(sp)
10002a28:	d9801e04 	addi	r6,sp,120
10002a2c:	9809883a 	mov	r4,r19
10002a30:	000663c0 	call	1000663c <__ssprint_r>
10002a34:	1039b11e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002a38:	d8802617 	ldw	r2,152(sp)
10002a3c:	d8c02017 	ldw	r3,128(sp)
10002a40:	da000404 	addi	r8,sp,16
10002a44:	003e1c06 	br	100022b8 <__alt_data_end+0xf80022b8>
10002a48:	d8802a17 	ldw	r2,168(sp)
10002a4c:	00c00184 	movi	r3,6
10002a50:	1880012e 	bgeu	r3,r2,10002a58 <___svfprintf_internal_r+0x1cf8>
10002a54:	1805883a 	mov	r2,r3
10002a58:	d8802b15 	stw	r2,172(sp)
10002a5c:	1000f316 	blt	r2,zero,10002e2c <___svfprintf_internal_r+0x20cc>
10002a60:	04040074 	movhi	r16,4097
10002a64:	d8802915 	stw	r2,164(sp)
10002a68:	dd002e15 	stw	r20,184(sp)
10002a6c:	d8002a15 	stw	zero,168(sp)
10002a70:	d8003215 	stw	zero,200(sp)
10002a74:	84385404 	addi	r16,r16,-7856
10002a78:	0039883a 	mov	fp,zero
10002a7c:	003a7d06 	br	10001474 <__alt_data_end+0xf8001474>
10002a80:	01040074 	movhi	r4,4097
10002a84:	21385a84 	addi	r4,r4,-7830
10002a88:	d9003515 	stw	r4,212(sp)
10002a8c:	003b3d06 	br	10001784 <__alt_data_end+0xf8001784>
10002a90:	d9402d17 	ldw	r5,180(sp)
10002a94:	d9801e04 	addi	r6,sp,120
10002a98:	9809883a 	mov	r4,r19
10002a9c:	000663c0 	call	1000663c <__ssprint_r>
10002aa0:	1039961e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002aa4:	d8802617 	ldw	r2,152(sp)
10002aa8:	d9403317 	ldw	r5,204(sp)
10002aac:	d8c02017 	ldw	r3,128(sp)
10002ab0:	da000404 	addi	r8,sp,16
10002ab4:	2885c83a 	sub	r2,r5,r2
10002ab8:	003e1006 	br	100022fc <__alt_data_end+0xf80022fc>
10002abc:	00800044 	movi	r2,1
10002ac0:	10803fcc 	andi	r2,r2,255
10002ac4:	00c00044 	movi	r3,1
10002ac8:	10fa1026 	beq	r2,r3,1000130c <__alt_data_end+0xf800130c>
10002acc:	00c00084 	movi	r3,2
10002ad0:	10fb8226 	beq	r2,r3,100018dc <__alt_data_end+0xf80018dc>
10002ad4:	003a4206 	br	100013e0 <__alt_data_end+0xf80013e0>
10002ad8:	0021883a 	mov	r16,zero
10002adc:	003e0806 	br	10002300 <__alt_data_end+0xf8002300>
10002ae0:	07000b44 	movi	fp,45
10002ae4:	df002785 	stb	fp,158(sp)
10002ae8:	0039e306 	br	10001278 <__alt_data_end+0xf8001278>
10002aec:	d9002e17 	ldw	r4,184(sp)
10002af0:	d9402f17 	ldw	r5,188(sp)
10002af4:	20800017 	ldw	r2,0(r4)
10002af8:	21000104 	addi	r4,r4,4
10002afc:	d9002e15 	stw	r4,184(sp)
10002b00:	11400015 	stw	r5,0(r2)
10002b04:	0038c106 	br	10000e0c <__alt_data_end+0xf8000e0c>
10002b08:	00c00b44 	movi	r3,45
10002b0c:	d8c02785 	stb	r3,158(sp)
10002b10:	d8802915 	stw	r2,164(sp)
10002b14:	dc802c17 	ldw	r18,176(sp)
10002b18:	d8002a15 	stw	zero,168(sp)
10002b1c:	07000b44 	movi	fp,45
10002b20:	003a5106 	br	10001468 <__alt_data_end+0xf8001468>
10002b24:	9080004c 	andi	r2,r18,1
10002b28:	1000941e 	bne	r2,zero,10002d7c <___svfprintf_internal_r+0x201c>
10002b2c:	d8802117 	ldw	r2,132(sp)
10002b30:	1405c83a 	sub	r2,r2,r16
10002b34:	d8803315 	stw	r2,204(sp)
10002b38:	b441151e 	bne	r22,r17,10002f90 <___svfprintf_internal_r+0x2230>
10002b3c:	dd802617 	ldw	r22,152(sp)
10002b40:	00bfff44 	movi	r2,-3
10002b44:	b0801a16 	blt	r22,r2,10002bb0 <___svfprintf_internal_r+0x1e50>
10002b48:	d9402a17 	ldw	r5,168(sp)
10002b4c:	2d801816 	blt	r5,r22,10002bb0 <___svfprintf_internal_r+0x1e50>
10002b50:	dd803215 	stw	r22,200(sp)
10002b54:	003f3a06 	br	10002840 <__alt_data_end+0xf8002840>
10002b58:	1025883a 	mov	r18,r2
10002b5c:	0039883a 	mov	fp,zero
10002b60:	00800084 	movi	r2,2
10002b64:	003fd606 	br	10002ac0 <__alt_data_end+0xf8002ac0>
10002b68:	9080004c 	andi	r2,r18,1
10002b6c:	103f191e 	bne	r2,zero,100027d4 <__alt_data_end+0xf80027d4>
10002b70:	d8802117 	ldw	r2,132(sp)
10002b74:	003f2806 	br	10002818 <__alt_data_end+0xf8002818>
10002b78:	01040074 	movhi	r4,4097
10002b7c:	21385684 	addi	r4,r4,-7846
10002b80:	d9002c15 	stw	r4,176(sp)
10002b84:	003c7c06 	br	10001d78 <__alt_data_end+0xf8001d78>
10002b88:	e005883a 	mov	r2,fp
10002b8c:	003f2206 	br	10002818 <__alt_data_end+0xf8002818>
10002b90:	d9002a17 	ldw	r4,168(sp)
10002b94:	df002783 	ldbu	fp,158(sp)
10002b98:	dd002e15 	stw	r20,184(sp)
10002b9c:	d9002915 	stw	r4,164(sp)
10002ba0:	d9002b15 	stw	r4,172(sp)
10002ba4:	d8002a15 	stw	zero,168(sp)
10002ba8:	d8003215 	stw	zero,200(sp)
10002bac:	003a2a06 	br	10001458 <__alt_data_end+0xf8001458>
10002bb0:	8c7fff84 	addi	r17,r17,-2
10002bb4:	b5bfffc4 	addi	r22,r22,-1
10002bb8:	dd802615 	stw	r22,152(sp)
10002bbc:	dc4022c5 	stb	r17,139(sp)
10002bc0:	b000c316 	blt	r22,zero,10002ed0 <___svfprintf_internal_r+0x2170>
10002bc4:	00800ac4 	movi	r2,43
10002bc8:	d8802305 	stb	r2,140(sp)
10002bcc:	00800244 	movi	r2,9
10002bd0:	15806e16 	blt	r2,r22,10002d8c <___svfprintf_internal_r+0x202c>
10002bd4:	00800c04 	movi	r2,48
10002bd8:	b5800c04 	addi	r22,r22,48
10002bdc:	d8802345 	stb	r2,141(sp)
10002be0:	dd802385 	stb	r22,142(sp)
10002be4:	d88023c4 	addi	r2,sp,143
10002be8:	df0022c4 	addi	fp,sp,139
10002bec:	d8c03317 	ldw	r3,204(sp)
10002bf0:	1739c83a 	sub	fp,r2,fp
10002bf4:	d9003317 	ldw	r4,204(sp)
10002bf8:	e0c7883a 	add	r3,fp,r3
10002bfc:	df003b15 	stw	fp,236(sp)
10002c00:	d8c02b15 	stw	r3,172(sp)
10002c04:	00800044 	movi	r2,1
10002c08:	1100b70e 	bge	r2,r4,10002ee8 <___svfprintf_internal_r+0x2188>
10002c0c:	d8c02b17 	ldw	r3,172(sp)
10002c10:	18c00044 	addi	r3,r3,1
10002c14:	d8c02b15 	stw	r3,172(sp)
10002c18:	1805883a 	mov	r2,r3
10002c1c:	1800b016 	blt	r3,zero,10002ee0 <___svfprintf_internal_r+0x2180>
10002c20:	d8003215 	stw	zero,200(sp)
10002c24:	003f1006 	br	10002868 <__alt_data_end+0xf8002868>
10002c28:	d8802a17 	ldw	r2,168(sp)
10002c2c:	103ec71e 	bne	r2,zero,1000274c <__alt_data_end+0xf800274c>
10002c30:	dc002a15 	stw	r16,168(sp)
10002c34:	003ec506 	br	1000274c <__alt_data_end+0xf800274c>
10002c38:	d9402d17 	ldw	r5,180(sp)
10002c3c:	d9801e04 	addi	r6,sp,120
10002c40:	9809883a 	mov	r4,r19
10002c44:	000663c0 	call	1000663c <__ssprint_r>
10002c48:	10392c1e 	bne	r2,zero,100010fc <__alt_data_end+0xf80010fc>
10002c4c:	dc402617 	ldw	r17,152(sp)
10002c50:	d8c02017 	ldw	r3,128(sp)
10002c54:	d8801f17 	ldw	r2,124(sp)
10002c58:	da000404 	addi	r8,sp,16
10002c5c:	003e7706 	br	1000263c <__alt_data_end+0xf800263c>
10002c60:	182f883a 	mov	r23,r3
10002c64:	d8002a15 	stw	zero,168(sp)
10002c68:	00389306 	br	10000eb8 <__alt_data_end+0xf8000eb8>
10002c6c:	d8c02a17 	ldw	r3,168(sp)
10002c70:	d8802104 	addi	r2,sp,132
10002c74:	d8800315 	stw	r2,12(sp)
10002c78:	d9403617 	ldw	r5,216(sp)
10002c7c:	d8802504 	addi	r2,sp,148
10002c80:	d8800215 	stw	r2,8(sp)
10002c84:	d8802604 	addi	r2,sp,152
10002c88:	d8c00015 	stw	r3,0(sp)
10002c8c:	9809883a 	mov	r4,r19
10002c90:	d8800115 	stw	r2,4(sp)
10002c94:	01c000c4 	movi	r7,3
10002c98:	a00d883a 	mov	r6,r20
10002c9c:	da003e15 	stw	r8,248(sp)
10002ca0:	00032440 	call	10003244 <_dtoa_r>
10002ca4:	d9002a17 	ldw	r4,168(sp)
10002ca8:	da003e17 	ldw	r8,248(sp)
10002cac:	1021883a 	mov	r16,r2
10002cb0:	1139883a 	add	fp,r2,r4
10002cb4:	2007883a 	mov	r3,r4
10002cb8:	81000007 	ldb	r4,0(r16)
10002cbc:	00800c04 	movi	r2,48
10002cc0:	20806f26 	beq	r4,r2,10002e80 <___svfprintf_internal_r+0x2120>
10002cc4:	d8c02617 	ldw	r3,152(sp)
10002cc8:	e0f9883a 	add	fp,fp,r3
10002ccc:	003ec206 	br	100027d8 <__alt_data_end+0xf80027d8>
10002cd0:	00c00b44 	movi	r3,45
10002cd4:	2520003c 	xorhi	r20,r4,32768
10002cd8:	d8c02905 	stb	r3,164(sp)
10002cdc:	003ea106 	br	10002764 <__alt_data_end+0xf8002764>
10002ce0:	d8c03217 	ldw	r3,200(sp)
10002ce4:	00c0890e 	bge	zero,r3,10002f0c <___svfprintf_internal_r+0x21ac>
10002ce8:	00800044 	movi	r2,1
10002cec:	d9003317 	ldw	r4,204(sp)
10002cf0:	1105883a 	add	r2,r2,r4
10002cf4:	d8802b15 	stw	r2,172(sp)
10002cf8:	10005f16 	blt	r2,zero,10002e78 <___svfprintf_internal_r+0x2118>
10002cfc:	044019c4 	movi	r17,103
10002d00:	003ed906 	br	10002868 <__alt_data_end+0xf8002868>
10002d04:	d9002a17 	ldw	r4,168(sp)
10002d08:	20c00044 	addi	r3,r4,1
10002d0c:	003e9c06 	br	10002780 <__alt_data_end+0xf8002780>
10002d10:	d9002a17 	ldw	r4,168(sp)
10002d14:	00c0680e 	bge	zero,r3,10002eb8 <___svfprintf_internal_r+0x2158>
10002d18:	2000461e 	bne	r4,zero,10002e34 <___svfprintf_internal_r+0x20d4>
10002d1c:	9480004c 	andi	r18,r18,1
10002d20:	9000441e 	bne	r18,zero,10002e34 <___svfprintf_internal_r+0x20d4>
10002d24:	1805883a 	mov	r2,r3
10002d28:	1800a116 	blt	r3,zero,10002fb0 <___svfprintf_internal_r+0x2250>
10002d2c:	d8c03217 	ldw	r3,200(sp)
10002d30:	d8c02b15 	stw	r3,172(sp)
10002d34:	003ecc06 	br	10002868 <__alt_data_end+0xf8002868>
10002d38:	d9402a17 	ldw	r5,168(sp)
10002d3c:	d8802104 	addi	r2,sp,132
10002d40:	d8800315 	stw	r2,12(sp)
10002d44:	d9400015 	stw	r5,0(sp)
10002d48:	d8802504 	addi	r2,sp,148
10002d4c:	d9403617 	ldw	r5,216(sp)
10002d50:	d8800215 	stw	r2,8(sp)
10002d54:	d8802604 	addi	r2,sp,152
10002d58:	d8800115 	stw	r2,4(sp)
10002d5c:	01c000c4 	movi	r7,3
10002d60:	a00d883a 	mov	r6,r20
10002d64:	9809883a 	mov	r4,r19
10002d68:	da003e15 	stw	r8,248(sp)
10002d6c:	00032440 	call	10003244 <_dtoa_r>
10002d70:	d8c02a17 	ldw	r3,168(sp)
10002d74:	da003e17 	ldw	r8,248(sp)
10002d78:	1021883a 	mov	r16,r2
10002d7c:	00801184 	movi	r2,70
10002d80:	80f9883a 	add	fp,r16,r3
10002d84:	88bfcc26 	beq	r17,r2,10002cb8 <__alt_data_end+0xf8002cb8>
10002d88:	003e9306 	br	100027d8 <__alt_data_end+0xf80027d8>
10002d8c:	df0022c4 	addi	fp,sp,139
10002d90:	dc002a15 	stw	r16,168(sp)
10002d94:	9829883a 	mov	r20,r19
10002d98:	e021883a 	mov	r16,fp
10002d9c:	4027883a 	mov	r19,r8
10002da0:	b009883a 	mov	r4,r22
10002da4:	01400284 	movi	r5,10
10002da8:	0000a300 	call	10000a30 <__modsi3>
10002dac:	10800c04 	addi	r2,r2,48
10002db0:	843fffc4 	addi	r16,r16,-1
10002db4:	b009883a 	mov	r4,r22
10002db8:	01400284 	movi	r5,10
10002dbc:	80800005 	stb	r2,0(r16)
10002dc0:	00009ac0 	call	100009ac <__divsi3>
10002dc4:	102d883a 	mov	r22,r2
10002dc8:	00800244 	movi	r2,9
10002dcc:	15bff416 	blt	r2,r22,10002da0 <__alt_data_end+0xf8002da0>
10002dd0:	9811883a 	mov	r8,r19
10002dd4:	b0800c04 	addi	r2,r22,48
10002dd8:	a027883a 	mov	r19,r20
10002ddc:	8029883a 	mov	r20,r16
10002de0:	a17fffc4 	addi	r5,r20,-1
10002de4:	a0bfffc5 	stb	r2,-1(r20)
10002de8:	dc002a17 	ldw	r16,168(sp)
10002dec:	2f00782e 	bgeu	r5,fp,10002fd0 <___svfprintf_internal_r+0x2270>
10002df0:	d9c02384 	addi	r7,sp,142
10002df4:	3d0fc83a 	sub	r7,r7,r20
10002df8:	d9002344 	addi	r4,sp,141
10002dfc:	e1cf883a 	add	r7,fp,r7
10002e00:	00000106 	br	10002e08 <___svfprintf_internal_r+0x20a8>
10002e04:	28800003 	ldbu	r2,0(r5)
10002e08:	20800005 	stb	r2,0(r4)
10002e0c:	21000044 	addi	r4,r4,1
10002e10:	29400044 	addi	r5,r5,1
10002e14:	21fffb1e 	bne	r4,r7,10002e04 <__alt_data_end+0xf8002e04>
10002e18:	d8802304 	addi	r2,sp,140
10002e1c:	1505c83a 	sub	r2,r2,r20
10002e20:	d8c02344 	addi	r3,sp,141
10002e24:	1885883a 	add	r2,r3,r2
10002e28:	003f7006 	br	10002bec <__alt_data_end+0xf8002bec>
10002e2c:	0005883a 	mov	r2,zero
10002e30:	003f0b06 	br	10002a60 <__alt_data_end+0xf8002a60>
10002e34:	d9002a17 	ldw	r4,168(sp)
10002e38:	d8c03217 	ldw	r3,200(sp)
10002e3c:	20800044 	addi	r2,r4,1
10002e40:	1885883a 	add	r2,r3,r2
10002e44:	d8802b15 	stw	r2,172(sp)
10002e48:	103e870e 	bge	r2,zero,10002868 <__alt_data_end+0xf8002868>
10002e4c:	0005883a 	mov	r2,zero
10002e50:	003e8506 	br	10002868 <__alt_data_end+0xf8002868>
10002e54:	01040074 	movhi	r4,4097
10002e58:	21385684 	addi	r4,r4,-7846
10002e5c:	d9002c15 	stw	r4,176(sp)
10002e60:	003cc506 	br	10002178 <__alt_data_end+0xf8002178>
10002e64:	d8c03217 	ldw	r3,200(sp)
10002e68:	18c00044 	addi	r3,r3,1
10002e6c:	d8c02b15 	stw	r3,172(sp)
10002e70:	1805883a 	mov	r2,r3
10002e74:	183fa10e 	bge	r3,zero,10002cfc <__alt_data_end+0xf8002cfc>
10002e78:	0005883a 	mov	r2,zero
10002e7c:	003f9f06 	br	10002cfc <__alt_data_end+0xf8002cfc>
10002e80:	d9003617 	ldw	r4,216(sp)
10002e84:	000d883a 	mov	r6,zero
10002e88:	000f883a 	mov	r7,zero
10002e8c:	a00b883a 	mov	r5,r20
10002e90:	d8c03d15 	stw	r3,244(sp)
10002e94:	da003e15 	stw	r8,248(sp)
10002e98:	000a7ec0 	call	1000a7ec <__eqdf2>
10002e9c:	d8c03d17 	ldw	r3,244(sp)
10002ea0:	da003e17 	ldw	r8,248(sp)
10002ea4:	103f8726 	beq	r2,zero,10002cc4 <__alt_data_end+0xf8002cc4>
10002ea8:	00800044 	movi	r2,1
10002eac:	10c7c83a 	sub	r3,r2,r3
10002eb0:	d8c02615 	stw	r3,152(sp)
10002eb4:	003f8406 	br	10002cc8 <__alt_data_end+0xf8002cc8>
10002eb8:	20000e1e 	bne	r4,zero,10002ef4 <___svfprintf_internal_r+0x2194>
10002ebc:	9480004c 	andi	r18,r18,1
10002ec0:	90000c1e 	bne	r18,zero,10002ef4 <___svfprintf_internal_r+0x2194>
10002ec4:	00800044 	movi	r2,1
10002ec8:	d8802b15 	stw	r2,172(sp)
10002ecc:	003e6606 	br	10002868 <__alt_data_end+0xf8002868>
10002ed0:	00800b44 	movi	r2,45
10002ed4:	05adc83a 	sub	r22,zero,r22
10002ed8:	d8802305 	stb	r2,140(sp)
10002edc:	003f3b06 	br	10002bcc <__alt_data_end+0xf8002bcc>
10002ee0:	0005883a 	mov	r2,zero
10002ee4:	003f4e06 	br	10002c20 <__alt_data_end+0xf8002c20>
10002ee8:	90a4703a 	and	r18,r18,r2
10002eec:	903f4a26 	beq	r18,zero,10002c18 <__alt_data_end+0xf8002c18>
10002ef0:	003f4606 	br	10002c0c <__alt_data_end+0xf8002c0c>
10002ef4:	d8c02a17 	ldw	r3,168(sp)
10002ef8:	18c00084 	addi	r3,r3,2
10002efc:	d8c02b15 	stw	r3,172(sp)
10002f00:	1805883a 	mov	r2,r3
10002f04:	183e580e 	bge	r3,zero,10002868 <__alt_data_end+0xf8002868>
10002f08:	003fd006 	br	10002e4c <__alt_data_end+0xf8002e4c>
10002f0c:	00800084 	movi	r2,2
10002f10:	10c5c83a 	sub	r2,r2,r3
10002f14:	003f7506 	br	10002cec <__alt_data_end+0xf8002cec>
10002f18:	d9402e17 	ldw	r5,184(sp)
10002f1c:	d9002e17 	ldw	r4,184(sp)
10002f20:	bc400043 	ldbu	r17,1(r23)
10002f24:	29400017 	ldw	r5,0(r5)
10002f28:	20800104 	addi	r2,r4,4
10002f2c:	d8802e15 	stw	r2,184(sp)
10002f30:	d9402a15 	stw	r5,168(sp)
10002f34:	182f883a 	mov	r23,r3
10002f38:	283df10e 	bge	r5,zero,10002700 <__alt_data_end+0xf8002700>
10002f3c:	8c403fcc 	andi	r17,r17,255
10002f40:	017fffc4 	movi	r5,-1
10002f44:	8c40201c 	xori	r17,r17,128
10002f48:	d9402a15 	stw	r5,168(sp)
10002f4c:	8c7fe004 	addi	r17,r17,-128
10002f50:	0037d806 	br	10000eb4 <__alt_data_end+0xf8000eb4>
10002f54:	9080004c 	andi	r2,r18,1
10002f58:	0039883a 	mov	fp,zero
10002f5c:	10000726 	beq	r2,zero,10002f7c <___svfprintf_internal_r+0x221c>
10002f60:	d8c02817 	ldw	r3,160(sp)
10002f64:	dc001dc4 	addi	r16,sp,119
10002f68:	00800c04 	movi	r2,48
10002f6c:	1c07c83a 	sub	r3,r3,r16
10002f70:	d8801dc5 	stb	r2,119(sp)
10002f74:	d8c02b15 	stw	r3,172(sp)
10002f78:	00393106 	br	10001440 <__alt_data_end+0xf8001440>
10002f7c:	d8002b15 	stw	zero,172(sp)
10002f80:	dc001e04 	addi	r16,sp,120
10002f84:	00392e06 	br	10001440 <__alt_data_end+0xf8001440>
10002f88:	0005883a 	mov	r2,zero
10002f8c:	003e3306 	br	1000285c <__alt_data_end+0xf800285c>
10002f90:	dd802617 	ldw	r22,152(sp)
10002f94:	003f0706 	br	10002bb4 <__alt_data_end+0xf8002bb4>
10002f98:	d8c02b03 	ldbu	r3,172(sp)
10002f9c:	d8c02785 	stb	r3,158(sp)
10002fa0:	003a3506 	br	10001878 <__alt_data_end+0xf8001878>
10002fa4:	d8c02b03 	ldbu	r3,172(sp)
10002fa8:	d8c02785 	stb	r3,158(sp)
10002fac:	003a1706 	br	1000180c <__alt_data_end+0xf800180c>
10002fb0:	0005883a 	mov	r2,zero
10002fb4:	003f5d06 	br	10002d2c <__alt_data_end+0xf8002d2c>
10002fb8:	d8c02b03 	ldbu	r3,172(sp)
10002fbc:	d8c02785 	stb	r3,158(sp)
10002fc0:	0038f306 	br	10001390 <__alt_data_end+0xf8001390>
10002fc4:	d8c02b03 	ldbu	r3,172(sp)
10002fc8:	d8c02785 	stb	r3,158(sp)
10002fcc:	0038be06 	br	100012c8 <__alt_data_end+0xf80012c8>
10002fd0:	d8802344 	addi	r2,sp,141
10002fd4:	003f0506 	br	10002bec <__alt_data_end+0xf8002bec>
10002fd8:	d8c02b03 	ldbu	r3,172(sp)
10002fdc:	d8c02785 	stb	r3,158(sp)
10002fe0:	00388b06 	br	10001210 <__alt_data_end+0xf8001210>
10002fe4:	d8c02b03 	ldbu	r3,172(sp)
10002fe8:	d8c02785 	stb	r3,158(sp)
10002fec:	003ad706 	br	10001b4c <__alt_data_end+0xf8001b4c>
10002ff0:	d9403917 	ldw	r5,228(sp)
10002ff4:	00800304 	movi	r2,12
10002ff8:	28800015 	stw	r2,0(r5)
10002ffc:	00bfffc4 	movi	r2,-1
10003000:	00384306 	br	10001110 <__alt_data_end+0xf8001110>
10003004:	d8c02b03 	ldbu	r3,172(sp)
10003008:	d8c02785 	stb	r3,158(sp)
1000300c:	003ab606 	br	10001ae8 <__alt_data_end+0xf8001ae8>
10003010:	d8c02b03 	ldbu	r3,172(sp)
10003014:	d8c02785 	stb	r3,158(sp)
10003018:	003a8906 	br	10001a40 <__alt_data_end+0xf8001a40>

1000301c <quorem>:
1000301c:	defff204 	addi	sp,sp,-56
10003020:	ddc00b15 	stw	r23,44(sp)
10003024:	20800417 	ldw	r2,16(r4)
10003028:	2dc00417 	ldw	r23,16(r5)
1000302c:	dfc00d15 	stw	ra,52(sp)
10003030:	df000c15 	stw	fp,48(sp)
10003034:	dd800a15 	stw	r22,40(sp)
10003038:	dd400915 	stw	r21,36(sp)
1000303c:	dd000815 	stw	r20,32(sp)
10003040:	dcc00715 	stw	r19,28(sp)
10003044:	dc800615 	stw	r18,24(sp)
10003048:	dc400515 	stw	r17,20(sp)
1000304c:	dc000415 	stw	r16,16(sp)
10003050:	15c07a16 	blt	r2,r23,1000323c <quorem+0x220>
10003054:	bdffffc4 	addi	r23,r23,-1
10003058:	bde9883a 	add	r20,r23,r23
1000305c:	28c00504 	addi	r3,r5,20
10003060:	a529883a 	add	r20,r20,r20
10003064:	1d39883a 	add	fp,r3,r20
10003068:	24c00504 	addi	r19,r4,20
1000306c:	d9400215 	stw	r5,8(sp)
10003070:	9d29883a 	add	r20,r19,r20
10003074:	e1400017 	ldw	r5,0(fp)
10003078:	d9000015 	stw	r4,0(sp)
1000307c:	a1000017 	ldw	r4,0(r20)
10003080:	29400044 	addi	r5,r5,1
10003084:	d8c00115 	stw	r3,4(sp)
10003088:	dd000315 	stw	r20,12(sp)
1000308c:	0000aa40 	call	10000aa4 <__udivsi3>
10003090:	1025883a 	mov	r18,r2
10003094:	10003026 	beq	r2,zero,10003158 <quorem+0x13c>
10003098:	dc400117 	ldw	r17,4(sp)
1000309c:	9829883a 	mov	r20,r19
100030a0:	002d883a 	mov	r22,zero
100030a4:	0021883a 	mov	r16,zero
100030a8:	8d400017 	ldw	r21,0(r17)
100030ac:	900b883a 	mov	r5,r18
100030b0:	8c400104 	addi	r17,r17,4
100030b4:	a93fffcc 	andi	r4,r21,65535
100030b8:	0000b600 	call	10000b60 <__mulsi3>
100030bc:	a808d43a 	srli	r4,r21,16
100030c0:	900b883a 	mov	r5,r18
100030c4:	15ad883a 	add	r22,r2,r22
100030c8:	0000b600 	call	10000b60 <__mulsi3>
100030cc:	a1000017 	ldw	r4,0(r20)
100030d0:	b00cd43a 	srli	r6,r22,16
100030d4:	b0ffffcc 	andi	r3,r22,65535
100030d8:	217fffcc 	andi	r5,r4,65535
100030dc:	2c21883a 	add	r16,r5,r16
100030e0:	80c7c83a 	sub	r3,r16,r3
100030e4:	2008d43a 	srli	r4,r4,16
100030e8:	1185883a 	add	r2,r2,r6
100030ec:	1821d43a 	srai	r16,r3,16
100030f0:	117fffcc 	andi	r5,r2,65535
100030f4:	2149c83a 	sub	r4,r4,r5
100030f8:	2421883a 	add	r16,r4,r16
100030fc:	8008943a 	slli	r4,r16,16
10003100:	18ffffcc 	andi	r3,r3,65535
10003104:	102cd43a 	srli	r22,r2,16
10003108:	20c8b03a 	or	r4,r4,r3
1000310c:	a1000015 	stw	r4,0(r20)
10003110:	8021d43a 	srai	r16,r16,16
10003114:	a5000104 	addi	r20,r20,4
10003118:	e47fe32e 	bgeu	fp,r17,100030a8 <__alt_data_end+0xf80030a8>
1000311c:	d8c00317 	ldw	r3,12(sp)
10003120:	18800017 	ldw	r2,0(r3)
10003124:	10000c1e 	bne	r2,zero,10003158 <quorem+0x13c>
10003128:	18bfff04 	addi	r2,r3,-4
1000312c:	9880082e 	bgeu	r19,r2,10003150 <quorem+0x134>
10003130:	18ffff17 	ldw	r3,-4(r3)
10003134:	18000326 	beq	r3,zero,10003144 <quorem+0x128>
10003138:	00000506 	br	10003150 <quorem+0x134>
1000313c:	10c00017 	ldw	r3,0(r2)
10003140:	1800031e 	bne	r3,zero,10003150 <quorem+0x134>
10003144:	10bfff04 	addi	r2,r2,-4
10003148:	bdffffc4 	addi	r23,r23,-1
1000314c:	98bffb36 	bltu	r19,r2,1000313c <__alt_data_end+0xf800313c>
10003150:	d8c00017 	ldw	r3,0(sp)
10003154:	1dc00415 	stw	r23,16(r3)
10003158:	d9400217 	ldw	r5,8(sp)
1000315c:	d9000017 	ldw	r4,0(sp)
10003160:	0005d640 	call	10005d64 <__mcmp>
10003164:	10002816 	blt	r2,zero,10003208 <quorem+0x1ec>
10003168:	dc400117 	ldw	r17,4(sp)
1000316c:	94800044 	addi	r18,r18,1
10003170:	980d883a 	mov	r6,r19
10003174:	0007883a 	mov	r3,zero
10003178:	31000017 	ldw	r4,0(r6)
1000317c:	89400017 	ldw	r5,0(r17)
10003180:	31800104 	addi	r6,r6,4
10003184:	20bfffcc 	andi	r2,r4,65535
10003188:	10c7883a 	add	r3,r2,r3
1000318c:	28bfffcc 	andi	r2,r5,65535
10003190:	1885c83a 	sub	r2,r3,r2
10003194:	280ad43a 	srli	r5,r5,16
10003198:	2008d43a 	srli	r4,r4,16
1000319c:	1007d43a 	srai	r3,r2,16
100031a0:	10bfffcc 	andi	r2,r2,65535
100031a4:	2149c83a 	sub	r4,r4,r5
100031a8:	20c9883a 	add	r4,r4,r3
100031ac:	200a943a 	slli	r5,r4,16
100031b0:	8c400104 	addi	r17,r17,4
100031b4:	2007d43a 	srai	r3,r4,16
100031b8:	2884b03a 	or	r2,r5,r2
100031bc:	30bfff15 	stw	r2,-4(r6)
100031c0:	e47fed2e 	bgeu	fp,r17,10003178 <__alt_data_end+0xf8003178>
100031c4:	bdc5883a 	add	r2,r23,r23
100031c8:	1085883a 	add	r2,r2,r2
100031cc:	9887883a 	add	r3,r19,r2
100031d0:	18800017 	ldw	r2,0(r3)
100031d4:	10000c1e 	bne	r2,zero,10003208 <quorem+0x1ec>
100031d8:	18bfff04 	addi	r2,r3,-4
100031dc:	9880082e 	bgeu	r19,r2,10003200 <quorem+0x1e4>
100031e0:	18ffff17 	ldw	r3,-4(r3)
100031e4:	18000326 	beq	r3,zero,100031f4 <quorem+0x1d8>
100031e8:	00000506 	br	10003200 <quorem+0x1e4>
100031ec:	10c00017 	ldw	r3,0(r2)
100031f0:	1800031e 	bne	r3,zero,10003200 <quorem+0x1e4>
100031f4:	10bfff04 	addi	r2,r2,-4
100031f8:	bdffffc4 	addi	r23,r23,-1
100031fc:	98bffb36 	bltu	r19,r2,100031ec <__alt_data_end+0xf80031ec>
10003200:	d8c00017 	ldw	r3,0(sp)
10003204:	1dc00415 	stw	r23,16(r3)
10003208:	9005883a 	mov	r2,r18
1000320c:	dfc00d17 	ldw	ra,52(sp)
10003210:	df000c17 	ldw	fp,48(sp)
10003214:	ddc00b17 	ldw	r23,44(sp)
10003218:	dd800a17 	ldw	r22,40(sp)
1000321c:	dd400917 	ldw	r21,36(sp)
10003220:	dd000817 	ldw	r20,32(sp)
10003224:	dcc00717 	ldw	r19,28(sp)
10003228:	dc800617 	ldw	r18,24(sp)
1000322c:	dc400517 	ldw	r17,20(sp)
10003230:	dc000417 	ldw	r16,16(sp)
10003234:	dec00e04 	addi	sp,sp,56
10003238:	f800283a 	ret
1000323c:	0005883a 	mov	r2,zero
10003240:	003ff206 	br	1000320c <__alt_data_end+0xf800320c>

10003244 <_dtoa_r>:
10003244:	20801017 	ldw	r2,64(r4)
10003248:	deffde04 	addi	sp,sp,-136
1000324c:	df002015 	stw	fp,128(sp)
10003250:	dcc01b15 	stw	r19,108(sp)
10003254:	dc801a15 	stw	r18,104(sp)
10003258:	dc401915 	stw	r17,100(sp)
1000325c:	dc001815 	stw	r16,96(sp)
10003260:	dfc02115 	stw	ra,132(sp)
10003264:	ddc01f15 	stw	r23,124(sp)
10003268:	dd801e15 	stw	r22,120(sp)
1000326c:	dd401d15 	stw	r21,116(sp)
10003270:	dd001c15 	stw	r20,112(sp)
10003274:	d9c00315 	stw	r7,12(sp)
10003278:	2039883a 	mov	fp,r4
1000327c:	3023883a 	mov	r17,r6
10003280:	2825883a 	mov	r18,r5
10003284:	dc002417 	ldw	r16,144(sp)
10003288:	3027883a 	mov	r19,r6
1000328c:	10000826 	beq	r2,zero,100032b0 <_dtoa_r+0x6c>
10003290:	21801117 	ldw	r6,68(r4)
10003294:	00c00044 	movi	r3,1
10003298:	100b883a 	mov	r5,r2
1000329c:	1986983a 	sll	r3,r3,r6
100032a0:	11800115 	stw	r6,4(r2)
100032a4:	10c00215 	stw	r3,8(r2)
100032a8:	00054880 	call	10005488 <_Bfree>
100032ac:	e0001015 	stw	zero,64(fp)
100032b0:	88002e16 	blt	r17,zero,1000336c <_dtoa_r+0x128>
100032b4:	80000015 	stw	zero,0(r16)
100032b8:	889ffc2c 	andhi	r2,r17,32752
100032bc:	00dffc34 	movhi	r3,32752
100032c0:	10c01c26 	beq	r2,r3,10003334 <_dtoa_r+0xf0>
100032c4:	000d883a 	mov	r6,zero
100032c8:	000f883a 	mov	r7,zero
100032cc:	9009883a 	mov	r4,r18
100032d0:	980b883a 	mov	r5,r19
100032d4:	000a7ec0 	call	1000a7ec <__eqdf2>
100032d8:	10002b1e 	bne	r2,zero,10003388 <_dtoa_r+0x144>
100032dc:	d9c02317 	ldw	r7,140(sp)
100032e0:	00800044 	movi	r2,1
100032e4:	38800015 	stw	r2,0(r7)
100032e8:	d8802517 	ldw	r2,148(sp)
100032ec:	10019e26 	beq	r2,zero,10003968 <_dtoa_r+0x724>
100032f0:	d8c02517 	ldw	r3,148(sp)
100032f4:	00840074 	movhi	r2,4097
100032f8:	10b85644 	addi	r2,r2,-7847
100032fc:	18800015 	stw	r2,0(r3)
10003300:	10bfffc4 	addi	r2,r2,-1
10003304:	dfc02117 	ldw	ra,132(sp)
10003308:	df002017 	ldw	fp,128(sp)
1000330c:	ddc01f17 	ldw	r23,124(sp)
10003310:	dd801e17 	ldw	r22,120(sp)
10003314:	dd401d17 	ldw	r21,116(sp)
10003318:	dd001c17 	ldw	r20,112(sp)
1000331c:	dcc01b17 	ldw	r19,108(sp)
10003320:	dc801a17 	ldw	r18,104(sp)
10003324:	dc401917 	ldw	r17,100(sp)
10003328:	dc001817 	ldw	r16,96(sp)
1000332c:	dec02204 	addi	sp,sp,136
10003330:	f800283a 	ret
10003334:	d8c02317 	ldw	r3,140(sp)
10003338:	0089c3c4 	movi	r2,9999
1000333c:	18800015 	stw	r2,0(r3)
10003340:	90017726 	beq	r18,zero,10003920 <_dtoa_r+0x6dc>
10003344:	00840074 	movhi	r2,4097
10003348:	10b86204 	addi	r2,r2,-7800
1000334c:	d9002517 	ldw	r4,148(sp)
10003350:	203fec26 	beq	r4,zero,10003304 <__alt_data_end+0xf8003304>
10003354:	10c000c7 	ldb	r3,3(r2)
10003358:	1801781e 	bne	r3,zero,1000393c <_dtoa_r+0x6f8>
1000335c:	10c000c4 	addi	r3,r2,3
10003360:	d9802517 	ldw	r6,148(sp)
10003364:	30c00015 	stw	r3,0(r6)
10003368:	003fe606 	br	10003304 <__alt_data_end+0xf8003304>
1000336c:	04e00034 	movhi	r19,32768
10003370:	9cffffc4 	addi	r19,r19,-1
10003374:	00800044 	movi	r2,1
10003378:	8ce6703a 	and	r19,r17,r19
1000337c:	80800015 	stw	r2,0(r16)
10003380:	9823883a 	mov	r17,r19
10003384:	003fcc06 	br	100032b8 <__alt_data_end+0xf80032b8>
10003388:	d8800204 	addi	r2,sp,8
1000338c:	d8800015 	stw	r2,0(sp)
10003390:	d9c00104 	addi	r7,sp,4
10003394:	900b883a 	mov	r5,r18
10003398:	980d883a 	mov	r6,r19
1000339c:	e009883a 	mov	r4,fp
100033a0:	8820d53a 	srli	r16,r17,20
100033a4:	00061300 	call	10006130 <__d2b>
100033a8:	d8800915 	stw	r2,36(sp)
100033ac:	8001651e 	bne	r16,zero,10003944 <_dtoa_r+0x700>
100033b0:	dd800217 	ldw	r22,8(sp)
100033b4:	dc000117 	ldw	r16,4(sp)
100033b8:	00800804 	movi	r2,32
100033bc:	b421883a 	add	r16,r22,r16
100033c0:	80c10c84 	addi	r3,r16,1074
100033c4:	10c2d10e 	bge	r2,r3,10003f0c <_dtoa_r+0xcc8>
100033c8:	00801004 	movi	r2,64
100033cc:	81010484 	addi	r4,r16,1042
100033d0:	10c7c83a 	sub	r3,r2,r3
100033d4:	9108d83a 	srl	r4,r18,r4
100033d8:	88e2983a 	sll	r17,r17,r3
100033dc:	2448b03a 	or	r4,r4,r17
100033e0:	000bd080 	call	1000bd08 <__floatunsidf>
100033e4:	017f8434 	movhi	r5,65040
100033e8:	01800044 	movi	r6,1
100033ec:	1009883a 	mov	r4,r2
100033f0:	194b883a 	add	r5,r3,r5
100033f4:	843fffc4 	addi	r16,r16,-1
100033f8:	d9801115 	stw	r6,68(sp)
100033fc:	000d883a 	mov	r6,zero
10003400:	01cffe34 	movhi	r7,16376
10003404:	000b2b00 	call	1000b2b0 <__subdf3>
10003408:	0198dbf4 	movhi	r6,25455
1000340c:	01cff4f4 	movhi	r7,16339
10003410:	3190d844 	addi	r6,r6,17249
10003414:	39e1e9c4 	addi	r7,r7,-30809
10003418:	1009883a 	mov	r4,r2
1000341c:	180b883a 	mov	r5,r3
10003420:	000aa440 	call	1000aa44 <__muldf3>
10003424:	01a2d874 	movhi	r6,35681
10003428:	01cff1f4 	movhi	r7,16327
1000342c:	31b22cc4 	addi	r6,r6,-14157
10003430:	39e28a04 	addi	r7,r7,-30168
10003434:	180b883a 	mov	r5,r3
10003438:	1009883a 	mov	r4,r2
1000343c:	00095700 	call	10009570 <__adddf3>
10003440:	8009883a 	mov	r4,r16
10003444:	1029883a 	mov	r20,r2
10003448:	1823883a 	mov	r17,r3
1000344c:	000bc2c0 	call	1000bc2c <__floatsidf>
10003450:	019427f4 	movhi	r6,20639
10003454:	01cff4f4 	movhi	r7,16339
10003458:	319e7ec4 	addi	r6,r6,31227
1000345c:	39d104c4 	addi	r7,r7,17427
10003460:	1009883a 	mov	r4,r2
10003464:	180b883a 	mov	r5,r3
10003468:	000aa440 	call	1000aa44 <__muldf3>
1000346c:	100d883a 	mov	r6,r2
10003470:	180f883a 	mov	r7,r3
10003474:	a009883a 	mov	r4,r20
10003478:	880b883a 	mov	r5,r17
1000347c:	00095700 	call	10009570 <__adddf3>
10003480:	1009883a 	mov	r4,r2
10003484:	180b883a 	mov	r5,r3
10003488:	1029883a 	mov	r20,r2
1000348c:	1823883a 	mov	r17,r3
10003490:	000bbac0 	call	1000bbac <__fixdfsi>
10003494:	000d883a 	mov	r6,zero
10003498:	000f883a 	mov	r7,zero
1000349c:	a009883a 	mov	r4,r20
100034a0:	880b883a 	mov	r5,r17
100034a4:	d8800515 	stw	r2,20(sp)
100034a8:	000a9500 	call	1000a950 <__ledf2>
100034ac:	10028716 	blt	r2,zero,10003ecc <_dtoa_r+0xc88>
100034b0:	d8c00517 	ldw	r3,20(sp)
100034b4:	00800584 	movi	r2,22
100034b8:	10c27536 	bltu	r2,r3,10003e90 <_dtoa_r+0xc4c>
100034bc:	180490fa 	slli	r2,r3,3
100034c0:	00c40074 	movhi	r3,4097
100034c4:	18f87e04 	addi	r3,r3,-7688
100034c8:	1885883a 	add	r2,r3,r2
100034cc:	11000017 	ldw	r4,0(r2)
100034d0:	11400117 	ldw	r5,4(r2)
100034d4:	900d883a 	mov	r6,r18
100034d8:	980f883a 	mov	r7,r19
100034dc:	000a8740 	call	1000a874 <__gedf2>
100034e0:	00828d0e 	bge	zero,r2,10003f18 <_dtoa_r+0xcd4>
100034e4:	d9000517 	ldw	r4,20(sp)
100034e8:	d8000e15 	stw	zero,56(sp)
100034ec:	213fffc4 	addi	r4,r4,-1
100034f0:	d9000515 	stw	r4,20(sp)
100034f4:	b42dc83a 	sub	r22,r22,r16
100034f8:	b5bfffc4 	addi	r22,r22,-1
100034fc:	b0026f16 	blt	r22,zero,10003ebc <_dtoa_r+0xc78>
10003500:	d8000815 	stw	zero,32(sp)
10003504:	d9c00517 	ldw	r7,20(sp)
10003508:	38026416 	blt	r7,zero,10003e9c <_dtoa_r+0xc58>
1000350c:	b1ed883a 	add	r22,r22,r7
10003510:	d9c00d15 	stw	r7,52(sp)
10003514:	d8000a15 	stw	zero,40(sp)
10003518:	d9800317 	ldw	r6,12(sp)
1000351c:	00800244 	movi	r2,9
10003520:	11811436 	bltu	r2,r6,10003974 <_dtoa_r+0x730>
10003524:	00800144 	movi	r2,5
10003528:	1184e10e 	bge	r2,r6,100048b0 <_dtoa_r+0x166c>
1000352c:	31bfff04 	addi	r6,r6,-4
10003530:	d9800315 	stw	r6,12(sp)
10003534:	0023883a 	mov	r17,zero
10003538:	d9800317 	ldw	r6,12(sp)
1000353c:	008000c4 	movi	r2,3
10003540:	30836726 	beq	r6,r2,100042e0 <_dtoa_r+0x109c>
10003544:	1183410e 	bge	r2,r6,1000424c <_dtoa_r+0x1008>
10003548:	d9c00317 	ldw	r7,12(sp)
1000354c:	00800104 	movi	r2,4
10003550:	38827c26 	beq	r7,r2,10003f44 <_dtoa_r+0xd00>
10003554:	00800144 	movi	r2,5
10003558:	3884c41e 	bne	r7,r2,1000486c <_dtoa_r+0x1628>
1000355c:	00800044 	movi	r2,1
10003560:	d8800b15 	stw	r2,44(sp)
10003564:	d8c00517 	ldw	r3,20(sp)
10003568:	d9002217 	ldw	r4,136(sp)
1000356c:	1907883a 	add	r3,r3,r4
10003570:	19800044 	addi	r6,r3,1
10003574:	d8c00c15 	stw	r3,48(sp)
10003578:	d9800615 	stw	r6,24(sp)
1000357c:	0183a40e 	bge	zero,r6,10004410 <_dtoa_r+0x11cc>
10003580:	d9800617 	ldw	r6,24(sp)
10003584:	3021883a 	mov	r16,r6
10003588:	e0001115 	stw	zero,68(fp)
1000358c:	008005c4 	movi	r2,23
10003590:	1184c92e 	bgeu	r2,r6,100048b8 <_dtoa_r+0x1674>
10003594:	00c00044 	movi	r3,1
10003598:	00800104 	movi	r2,4
1000359c:	1085883a 	add	r2,r2,r2
100035a0:	11000504 	addi	r4,r2,20
100035a4:	180b883a 	mov	r5,r3
100035a8:	18c00044 	addi	r3,r3,1
100035ac:	313ffb2e 	bgeu	r6,r4,1000359c <__alt_data_end+0xf800359c>
100035b0:	e1401115 	stw	r5,68(fp)
100035b4:	e009883a 	mov	r4,fp
100035b8:	00053e00 	call	100053e0 <_Balloc>
100035bc:	d8800715 	stw	r2,28(sp)
100035c0:	e0801015 	stw	r2,64(fp)
100035c4:	00800384 	movi	r2,14
100035c8:	1400f736 	bltu	r2,r16,100039a8 <_dtoa_r+0x764>
100035cc:	8800f626 	beq	r17,zero,100039a8 <_dtoa_r+0x764>
100035d0:	d9c00517 	ldw	r7,20(sp)
100035d4:	01c39a0e 	bge	zero,r7,10004440 <_dtoa_r+0x11fc>
100035d8:	388003cc 	andi	r2,r7,15
100035dc:	100490fa 	slli	r2,r2,3
100035e0:	382bd13a 	srai	r21,r7,4
100035e4:	00c40074 	movhi	r3,4097
100035e8:	18f87e04 	addi	r3,r3,-7688
100035ec:	1885883a 	add	r2,r3,r2
100035f0:	a8c0040c 	andi	r3,r21,16
100035f4:	12400017 	ldw	r9,0(r2)
100035f8:	12000117 	ldw	r8,4(r2)
100035fc:	18037926 	beq	r3,zero,100043e4 <_dtoa_r+0x11a0>
10003600:	00840074 	movhi	r2,4097
10003604:	10b87404 	addi	r2,r2,-7728
10003608:	11800817 	ldw	r6,32(r2)
1000360c:	11c00917 	ldw	r7,36(r2)
10003610:	9009883a 	mov	r4,r18
10003614:	980b883a 	mov	r5,r19
10003618:	da001715 	stw	r8,92(sp)
1000361c:	da401615 	stw	r9,88(sp)
10003620:	0009e1c0 	call	10009e1c <__divdf3>
10003624:	da001717 	ldw	r8,92(sp)
10003628:	da401617 	ldw	r9,88(sp)
1000362c:	ad4003cc 	andi	r21,r21,15
10003630:	040000c4 	movi	r16,3
10003634:	1023883a 	mov	r17,r2
10003638:	1829883a 	mov	r20,r3
1000363c:	a8001126 	beq	r21,zero,10003684 <_dtoa_r+0x440>
10003640:	05c40074 	movhi	r23,4097
10003644:	bdf87404 	addi	r23,r23,-7728
10003648:	4805883a 	mov	r2,r9
1000364c:	4007883a 	mov	r3,r8
10003650:	a980004c 	andi	r6,r21,1
10003654:	1009883a 	mov	r4,r2
10003658:	a82bd07a 	srai	r21,r21,1
1000365c:	180b883a 	mov	r5,r3
10003660:	30000426 	beq	r6,zero,10003674 <_dtoa_r+0x430>
10003664:	b9800017 	ldw	r6,0(r23)
10003668:	b9c00117 	ldw	r7,4(r23)
1000366c:	84000044 	addi	r16,r16,1
10003670:	000aa440 	call	1000aa44 <__muldf3>
10003674:	bdc00204 	addi	r23,r23,8
10003678:	a83ff51e 	bne	r21,zero,10003650 <__alt_data_end+0xf8003650>
1000367c:	1013883a 	mov	r9,r2
10003680:	1811883a 	mov	r8,r3
10003684:	480d883a 	mov	r6,r9
10003688:	400f883a 	mov	r7,r8
1000368c:	8809883a 	mov	r4,r17
10003690:	a00b883a 	mov	r5,r20
10003694:	0009e1c0 	call	10009e1c <__divdf3>
10003698:	d8800f15 	stw	r2,60(sp)
1000369c:	d8c01015 	stw	r3,64(sp)
100036a0:	d8c00e17 	ldw	r3,56(sp)
100036a4:	18000626 	beq	r3,zero,100036c0 <_dtoa_r+0x47c>
100036a8:	d9000f17 	ldw	r4,60(sp)
100036ac:	d9401017 	ldw	r5,64(sp)
100036b0:	000d883a 	mov	r6,zero
100036b4:	01cffc34 	movhi	r7,16368
100036b8:	000a9500 	call	1000a950 <__ledf2>
100036bc:	10040b16 	blt	r2,zero,100046ec <_dtoa_r+0x14a8>
100036c0:	8009883a 	mov	r4,r16
100036c4:	000bc2c0 	call	1000bc2c <__floatsidf>
100036c8:	d9800f17 	ldw	r6,60(sp)
100036cc:	d9c01017 	ldw	r7,64(sp)
100036d0:	1009883a 	mov	r4,r2
100036d4:	180b883a 	mov	r5,r3
100036d8:	000aa440 	call	1000aa44 <__muldf3>
100036dc:	000d883a 	mov	r6,zero
100036e0:	01d00734 	movhi	r7,16412
100036e4:	1009883a 	mov	r4,r2
100036e8:	180b883a 	mov	r5,r3
100036ec:	00095700 	call	10009570 <__adddf3>
100036f0:	1021883a 	mov	r16,r2
100036f4:	d8800617 	ldw	r2,24(sp)
100036f8:	047f3034 	movhi	r17,64704
100036fc:	1c63883a 	add	r17,r3,r17
10003700:	10031826 	beq	r2,zero,10004364 <_dtoa_r+0x1120>
10003704:	d8c00517 	ldw	r3,20(sp)
10003708:	db000617 	ldw	r12,24(sp)
1000370c:	d8c01315 	stw	r3,76(sp)
10003710:	d9000b17 	ldw	r4,44(sp)
10003714:	20038f26 	beq	r4,zero,10004554 <_dtoa_r+0x1310>
10003718:	60bfffc4 	addi	r2,r12,-1
1000371c:	100490fa 	slli	r2,r2,3
10003720:	00c40074 	movhi	r3,4097
10003724:	18f87e04 	addi	r3,r3,-7688
10003728:	1885883a 	add	r2,r3,r2
1000372c:	11800017 	ldw	r6,0(r2)
10003730:	11c00117 	ldw	r7,4(r2)
10003734:	d8800717 	ldw	r2,28(sp)
10003738:	0009883a 	mov	r4,zero
1000373c:	014ff834 	movhi	r5,16352
10003740:	db001615 	stw	r12,88(sp)
10003744:	15c00044 	addi	r23,r2,1
10003748:	0009e1c0 	call	10009e1c <__divdf3>
1000374c:	800d883a 	mov	r6,r16
10003750:	880f883a 	mov	r7,r17
10003754:	1009883a 	mov	r4,r2
10003758:	180b883a 	mov	r5,r3
1000375c:	000b2b00 	call	1000b2b0 <__subdf3>
10003760:	d9401017 	ldw	r5,64(sp)
10003764:	d9000f17 	ldw	r4,60(sp)
10003768:	102b883a 	mov	r21,r2
1000376c:	d8c01215 	stw	r3,72(sp)
10003770:	000bbac0 	call	1000bbac <__fixdfsi>
10003774:	1009883a 	mov	r4,r2
10003778:	1029883a 	mov	r20,r2
1000377c:	000bc2c0 	call	1000bc2c <__floatsidf>
10003780:	d9000f17 	ldw	r4,60(sp)
10003784:	d9401017 	ldw	r5,64(sp)
10003788:	100d883a 	mov	r6,r2
1000378c:	180f883a 	mov	r7,r3
10003790:	000b2b00 	call	1000b2b0 <__subdf3>
10003794:	1823883a 	mov	r17,r3
10003798:	d8c00717 	ldw	r3,28(sp)
1000379c:	d9401217 	ldw	r5,72(sp)
100037a0:	a2000c04 	addi	r8,r20,48
100037a4:	1021883a 	mov	r16,r2
100037a8:	1a000005 	stb	r8,0(r3)
100037ac:	800d883a 	mov	r6,r16
100037b0:	880f883a 	mov	r7,r17
100037b4:	a809883a 	mov	r4,r21
100037b8:	4029883a 	mov	r20,r8
100037bc:	000a8740 	call	1000a874 <__gedf2>
100037c0:	00841d16 	blt	zero,r2,10004838 <_dtoa_r+0x15f4>
100037c4:	800d883a 	mov	r6,r16
100037c8:	880f883a 	mov	r7,r17
100037cc:	0009883a 	mov	r4,zero
100037d0:	014ffc34 	movhi	r5,16368
100037d4:	000b2b00 	call	1000b2b0 <__subdf3>
100037d8:	d9401217 	ldw	r5,72(sp)
100037dc:	100d883a 	mov	r6,r2
100037e0:	180f883a 	mov	r7,r3
100037e4:	a809883a 	mov	r4,r21
100037e8:	000a8740 	call	1000a874 <__gedf2>
100037ec:	db001617 	ldw	r12,88(sp)
100037f0:	00840e16 	blt	zero,r2,1000482c <_dtoa_r+0x15e8>
100037f4:	00800044 	movi	r2,1
100037f8:	13006b0e 	bge	r2,r12,100039a8 <_dtoa_r+0x764>
100037fc:	d9000717 	ldw	r4,28(sp)
10003800:	dd800f15 	stw	r22,60(sp)
10003804:	dcc01015 	stw	r19,64(sp)
10003808:	2319883a 	add	r12,r4,r12
1000380c:	dcc01217 	ldw	r19,72(sp)
10003810:	602d883a 	mov	r22,r12
10003814:	dc801215 	stw	r18,72(sp)
10003818:	b825883a 	mov	r18,r23
1000381c:	00000906 	br	10003844 <_dtoa_r+0x600>
10003820:	000b2b00 	call	1000b2b0 <__subdf3>
10003824:	a80d883a 	mov	r6,r21
10003828:	980f883a 	mov	r7,r19
1000382c:	1009883a 	mov	r4,r2
10003830:	180b883a 	mov	r5,r3
10003834:	000a9500 	call	1000a950 <__ledf2>
10003838:	1003e816 	blt	r2,zero,100047dc <_dtoa_r+0x1598>
1000383c:	b825883a 	mov	r18,r23
10003840:	bd83e926 	beq	r23,r22,100047e8 <_dtoa_r+0x15a4>
10003844:	a809883a 	mov	r4,r21
10003848:	980b883a 	mov	r5,r19
1000384c:	000d883a 	mov	r6,zero
10003850:	01d00934 	movhi	r7,16420
10003854:	000aa440 	call	1000aa44 <__muldf3>
10003858:	000d883a 	mov	r6,zero
1000385c:	01d00934 	movhi	r7,16420
10003860:	8009883a 	mov	r4,r16
10003864:	880b883a 	mov	r5,r17
10003868:	102b883a 	mov	r21,r2
1000386c:	1827883a 	mov	r19,r3
10003870:	000aa440 	call	1000aa44 <__muldf3>
10003874:	180b883a 	mov	r5,r3
10003878:	1009883a 	mov	r4,r2
1000387c:	1821883a 	mov	r16,r3
10003880:	1023883a 	mov	r17,r2
10003884:	000bbac0 	call	1000bbac <__fixdfsi>
10003888:	1009883a 	mov	r4,r2
1000388c:	1029883a 	mov	r20,r2
10003890:	000bc2c0 	call	1000bc2c <__floatsidf>
10003894:	8809883a 	mov	r4,r17
10003898:	800b883a 	mov	r5,r16
1000389c:	100d883a 	mov	r6,r2
100038a0:	180f883a 	mov	r7,r3
100038a4:	000b2b00 	call	1000b2b0 <__subdf3>
100038a8:	a5000c04 	addi	r20,r20,48
100038ac:	a80d883a 	mov	r6,r21
100038b0:	980f883a 	mov	r7,r19
100038b4:	1009883a 	mov	r4,r2
100038b8:	180b883a 	mov	r5,r3
100038bc:	95000005 	stb	r20,0(r18)
100038c0:	1021883a 	mov	r16,r2
100038c4:	1823883a 	mov	r17,r3
100038c8:	000a9500 	call	1000a950 <__ledf2>
100038cc:	bdc00044 	addi	r23,r23,1
100038d0:	800d883a 	mov	r6,r16
100038d4:	880f883a 	mov	r7,r17
100038d8:	0009883a 	mov	r4,zero
100038dc:	014ffc34 	movhi	r5,16368
100038e0:	103fcf0e 	bge	r2,zero,10003820 <__alt_data_end+0xf8003820>
100038e4:	d8c01317 	ldw	r3,76(sp)
100038e8:	d8c00515 	stw	r3,20(sp)
100038ec:	d9400917 	ldw	r5,36(sp)
100038f0:	e009883a 	mov	r4,fp
100038f4:	00054880 	call	10005488 <_Bfree>
100038f8:	d9000517 	ldw	r4,20(sp)
100038fc:	d9802317 	ldw	r6,140(sp)
10003900:	d9c02517 	ldw	r7,148(sp)
10003904:	b8000005 	stb	zero,0(r23)
10003908:	20800044 	addi	r2,r4,1
1000390c:	30800015 	stw	r2,0(r6)
10003910:	3802aa26 	beq	r7,zero,100043bc <_dtoa_r+0x1178>
10003914:	3dc00015 	stw	r23,0(r7)
10003918:	d8800717 	ldw	r2,28(sp)
1000391c:	003e7906 	br	10003304 <__alt_data_end+0xf8003304>
10003920:	00800434 	movhi	r2,16
10003924:	10bfffc4 	addi	r2,r2,-1
10003928:	88a2703a 	and	r17,r17,r2
1000392c:	883e851e 	bne	r17,zero,10003344 <__alt_data_end+0xf8003344>
10003930:	00840074 	movhi	r2,4097
10003934:	10b85f04 	addi	r2,r2,-7812
10003938:	003e8406 	br	1000334c <__alt_data_end+0xf800334c>
1000393c:	10c00204 	addi	r3,r2,8
10003940:	003e8706 	br	10003360 <__alt_data_end+0xf8003360>
10003944:	01400434 	movhi	r5,16
10003948:	297fffc4 	addi	r5,r5,-1
1000394c:	994a703a 	and	r5,r19,r5
10003950:	9009883a 	mov	r4,r18
10003954:	843f0044 	addi	r16,r16,-1023
10003958:	294ffc34 	orhi	r5,r5,16368
1000395c:	dd800217 	ldw	r22,8(sp)
10003960:	d8001115 	stw	zero,68(sp)
10003964:	003ea506 	br	100033fc <__alt_data_end+0xf80033fc>
10003968:	00840074 	movhi	r2,4097
1000396c:	10b85604 	addi	r2,r2,-7848
10003970:	003e6406 	br	10003304 <__alt_data_end+0xf8003304>
10003974:	e0001115 	stw	zero,68(fp)
10003978:	000b883a 	mov	r5,zero
1000397c:	e009883a 	mov	r4,fp
10003980:	00053e00 	call	100053e0 <_Balloc>
10003984:	01bfffc4 	movi	r6,-1
10003988:	01c00044 	movi	r7,1
1000398c:	d8800715 	stw	r2,28(sp)
10003990:	d9800c15 	stw	r6,48(sp)
10003994:	e0801015 	stw	r2,64(fp)
10003998:	d8000315 	stw	zero,12(sp)
1000399c:	d9c00b15 	stw	r7,44(sp)
100039a0:	d9800615 	stw	r6,24(sp)
100039a4:	d8002215 	stw	zero,136(sp)
100039a8:	d8800117 	ldw	r2,4(sp)
100039ac:	10008916 	blt	r2,zero,10003bd4 <_dtoa_r+0x990>
100039b0:	d9000517 	ldw	r4,20(sp)
100039b4:	00c00384 	movi	r3,14
100039b8:	19008616 	blt	r3,r4,10003bd4 <_dtoa_r+0x990>
100039bc:	200490fa 	slli	r2,r4,3
100039c0:	00c40074 	movhi	r3,4097
100039c4:	d9802217 	ldw	r6,136(sp)
100039c8:	18f87e04 	addi	r3,r3,-7688
100039cc:	1885883a 	add	r2,r3,r2
100039d0:	14000017 	ldw	r16,0(r2)
100039d4:	14400117 	ldw	r17,4(r2)
100039d8:	30016316 	blt	r6,zero,10003f68 <_dtoa_r+0xd24>
100039dc:	800d883a 	mov	r6,r16
100039e0:	880f883a 	mov	r7,r17
100039e4:	9009883a 	mov	r4,r18
100039e8:	980b883a 	mov	r5,r19
100039ec:	0009e1c0 	call	10009e1c <__divdf3>
100039f0:	180b883a 	mov	r5,r3
100039f4:	1009883a 	mov	r4,r2
100039f8:	000bbac0 	call	1000bbac <__fixdfsi>
100039fc:	1009883a 	mov	r4,r2
10003a00:	102b883a 	mov	r21,r2
10003a04:	000bc2c0 	call	1000bc2c <__floatsidf>
10003a08:	800d883a 	mov	r6,r16
10003a0c:	880f883a 	mov	r7,r17
10003a10:	1009883a 	mov	r4,r2
10003a14:	180b883a 	mov	r5,r3
10003a18:	000aa440 	call	1000aa44 <__muldf3>
10003a1c:	100d883a 	mov	r6,r2
10003a20:	180f883a 	mov	r7,r3
10003a24:	9009883a 	mov	r4,r18
10003a28:	980b883a 	mov	r5,r19
10003a2c:	000b2b00 	call	1000b2b0 <__subdf3>
10003a30:	d9c00717 	ldw	r7,28(sp)
10003a34:	1009883a 	mov	r4,r2
10003a38:	a8800c04 	addi	r2,r21,48
10003a3c:	38800005 	stb	r2,0(r7)
10003a40:	3dc00044 	addi	r23,r7,1
10003a44:	d9c00617 	ldw	r7,24(sp)
10003a48:	01800044 	movi	r6,1
10003a4c:	180b883a 	mov	r5,r3
10003a50:	2005883a 	mov	r2,r4
10003a54:	39803826 	beq	r7,r6,10003b38 <_dtoa_r+0x8f4>
10003a58:	000d883a 	mov	r6,zero
10003a5c:	01d00934 	movhi	r7,16420
10003a60:	000aa440 	call	1000aa44 <__muldf3>
10003a64:	000d883a 	mov	r6,zero
10003a68:	000f883a 	mov	r7,zero
10003a6c:	1009883a 	mov	r4,r2
10003a70:	180b883a 	mov	r5,r3
10003a74:	1025883a 	mov	r18,r2
10003a78:	1827883a 	mov	r19,r3
10003a7c:	000a7ec0 	call	1000a7ec <__eqdf2>
10003a80:	103f9a26 	beq	r2,zero,100038ec <__alt_data_end+0xf80038ec>
10003a84:	d9c00617 	ldw	r7,24(sp)
10003a88:	d8c00717 	ldw	r3,28(sp)
10003a8c:	b829883a 	mov	r20,r23
10003a90:	38bfffc4 	addi	r2,r7,-1
10003a94:	18ad883a 	add	r22,r3,r2
10003a98:	00000a06 	br	10003ac4 <_dtoa_r+0x880>
10003a9c:	000aa440 	call	1000aa44 <__muldf3>
10003aa0:	000d883a 	mov	r6,zero
10003aa4:	000f883a 	mov	r7,zero
10003aa8:	1009883a 	mov	r4,r2
10003aac:	180b883a 	mov	r5,r3
10003ab0:	1025883a 	mov	r18,r2
10003ab4:	1827883a 	mov	r19,r3
10003ab8:	b829883a 	mov	r20,r23
10003abc:	000a7ec0 	call	1000a7ec <__eqdf2>
10003ac0:	103f8a26 	beq	r2,zero,100038ec <__alt_data_end+0xf80038ec>
10003ac4:	800d883a 	mov	r6,r16
10003ac8:	880f883a 	mov	r7,r17
10003acc:	9009883a 	mov	r4,r18
10003ad0:	980b883a 	mov	r5,r19
10003ad4:	0009e1c0 	call	10009e1c <__divdf3>
10003ad8:	180b883a 	mov	r5,r3
10003adc:	1009883a 	mov	r4,r2
10003ae0:	000bbac0 	call	1000bbac <__fixdfsi>
10003ae4:	1009883a 	mov	r4,r2
10003ae8:	102b883a 	mov	r21,r2
10003aec:	000bc2c0 	call	1000bc2c <__floatsidf>
10003af0:	800d883a 	mov	r6,r16
10003af4:	880f883a 	mov	r7,r17
10003af8:	1009883a 	mov	r4,r2
10003afc:	180b883a 	mov	r5,r3
10003b00:	000aa440 	call	1000aa44 <__muldf3>
10003b04:	100d883a 	mov	r6,r2
10003b08:	180f883a 	mov	r7,r3
10003b0c:	9009883a 	mov	r4,r18
10003b10:	980b883a 	mov	r5,r19
10003b14:	000b2b00 	call	1000b2b0 <__subdf3>
10003b18:	aa000c04 	addi	r8,r21,48
10003b1c:	a2000005 	stb	r8,0(r20)
10003b20:	000d883a 	mov	r6,zero
10003b24:	01d00934 	movhi	r7,16420
10003b28:	1009883a 	mov	r4,r2
10003b2c:	180b883a 	mov	r5,r3
10003b30:	a5c00044 	addi	r23,r20,1
10003b34:	b53fd91e 	bne	r22,r20,10003a9c <__alt_data_end+0xf8003a9c>
10003b38:	100d883a 	mov	r6,r2
10003b3c:	180f883a 	mov	r7,r3
10003b40:	1009883a 	mov	r4,r2
10003b44:	180b883a 	mov	r5,r3
10003b48:	00095700 	call	10009570 <__adddf3>
10003b4c:	100d883a 	mov	r6,r2
10003b50:	180f883a 	mov	r7,r3
10003b54:	8009883a 	mov	r4,r16
10003b58:	880b883a 	mov	r5,r17
10003b5c:	1027883a 	mov	r19,r2
10003b60:	1825883a 	mov	r18,r3
10003b64:	000a9500 	call	1000a950 <__ledf2>
10003b68:	10000816 	blt	r2,zero,10003b8c <_dtoa_r+0x948>
10003b6c:	980d883a 	mov	r6,r19
10003b70:	900f883a 	mov	r7,r18
10003b74:	8009883a 	mov	r4,r16
10003b78:	880b883a 	mov	r5,r17
10003b7c:	000a7ec0 	call	1000a7ec <__eqdf2>
10003b80:	103f5a1e 	bne	r2,zero,100038ec <__alt_data_end+0xf80038ec>
10003b84:	ad40004c 	andi	r21,r21,1
10003b88:	a83f5826 	beq	r21,zero,100038ec <__alt_data_end+0xf80038ec>
10003b8c:	bd3fffc3 	ldbu	r20,-1(r23)
10003b90:	b8bfffc4 	addi	r2,r23,-1
10003b94:	1007883a 	mov	r3,r2
10003b98:	01400e44 	movi	r5,57
10003b9c:	d9800717 	ldw	r6,28(sp)
10003ba0:	00000506 	br	10003bb8 <_dtoa_r+0x974>
10003ba4:	18ffffc4 	addi	r3,r3,-1
10003ba8:	11824726 	beq	r2,r6,100044c8 <_dtoa_r+0x1284>
10003bac:	1d000003 	ldbu	r20,0(r3)
10003bb0:	102f883a 	mov	r23,r2
10003bb4:	10bfffc4 	addi	r2,r2,-1
10003bb8:	a1003fcc 	andi	r4,r20,255
10003bbc:	2100201c 	xori	r4,r4,128
10003bc0:	213fe004 	addi	r4,r4,-128
10003bc4:	217ff726 	beq	r4,r5,10003ba4 <__alt_data_end+0xf8003ba4>
10003bc8:	a2000044 	addi	r8,r20,1
10003bcc:	12000005 	stb	r8,0(r2)
10003bd0:	003f4606 	br	100038ec <__alt_data_end+0xf80038ec>
10003bd4:	d9000b17 	ldw	r4,44(sp)
10003bd8:	2000c826 	beq	r4,zero,10003efc <_dtoa_r+0xcb8>
10003bdc:	d9800317 	ldw	r6,12(sp)
10003be0:	00c00044 	movi	r3,1
10003be4:	1980f90e 	bge	r3,r6,10003fcc <_dtoa_r+0xd88>
10003be8:	d8800617 	ldw	r2,24(sp)
10003bec:	d8c00a17 	ldw	r3,40(sp)
10003bf0:	157fffc4 	addi	r21,r2,-1
10003bf4:	1d41f316 	blt	r3,r21,100043c4 <_dtoa_r+0x1180>
10003bf8:	1d6bc83a 	sub	r21,r3,r21
10003bfc:	d9c00617 	ldw	r7,24(sp)
10003c00:	3802aa16 	blt	r7,zero,100046ac <_dtoa_r+0x1468>
10003c04:	dd000817 	ldw	r20,32(sp)
10003c08:	d8800617 	ldw	r2,24(sp)
10003c0c:	d8c00817 	ldw	r3,32(sp)
10003c10:	01400044 	movi	r5,1
10003c14:	e009883a 	mov	r4,fp
10003c18:	1887883a 	add	r3,r3,r2
10003c1c:	d8c00815 	stw	r3,32(sp)
10003c20:	b0ad883a 	add	r22,r22,r2
10003c24:	00058140 	call	10005814 <__i2b>
10003c28:	1023883a 	mov	r17,r2
10003c2c:	a0000826 	beq	r20,zero,10003c50 <_dtoa_r+0xa0c>
10003c30:	0580070e 	bge	zero,r22,10003c50 <_dtoa_r+0xa0c>
10003c34:	a005883a 	mov	r2,r20
10003c38:	b500b916 	blt	r22,r20,10003f20 <_dtoa_r+0xcdc>
10003c3c:	d9000817 	ldw	r4,32(sp)
10003c40:	a0a9c83a 	sub	r20,r20,r2
10003c44:	b0adc83a 	sub	r22,r22,r2
10003c48:	2089c83a 	sub	r4,r4,r2
10003c4c:	d9000815 	stw	r4,32(sp)
10003c50:	d9800a17 	ldw	r6,40(sp)
10003c54:	0181810e 	bge	zero,r6,1000425c <_dtoa_r+0x1018>
10003c58:	d9c00b17 	ldw	r7,44(sp)
10003c5c:	3800b326 	beq	r7,zero,10003f2c <_dtoa_r+0xce8>
10003c60:	a800b226 	beq	r21,zero,10003f2c <_dtoa_r+0xce8>
10003c64:	880b883a 	mov	r5,r17
10003c68:	a80d883a 	mov	r6,r21
10003c6c:	e009883a 	mov	r4,fp
10003c70:	0005adc0 	call	10005adc <__pow5mult>
10003c74:	d9800917 	ldw	r6,36(sp)
10003c78:	100b883a 	mov	r5,r2
10003c7c:	e009883a 	mov	r4,fp
10003c80:	1023883a 	mov	r17,r2
10003c84:	00058500 	call	10005850 <__multiply>
10003c88:	1021883a 	mov	r16,r2
10003c8c:	d8800a17 	ldw	r2,40(sp)
10003c90:	d9400917 	ldw	r5,36(sp)
10003c94:	e009883a 	mov	r4,fp
10003c98:	1545c83a 	sub	r2,r2,r21
10003c9c:	d8800a15 	stw	r2,40(sp)
10003ca0:	00054880 	call	10005488 <_Bfree>
10003ca4:	d8c00a17 	ldw	r3,40(sp)
10003ca8:	18009f1e 	bne	r3,zero,10003f28 <_dtoa_r+0xce4>
10003cac:	05c00044 	movi	r23,1
10003cb0:	e009883a 	mov	r4,fp
10003cb4:	b80b883a 	mov	r5,r23
10003cb8:	00058140 	call	10005814 <__i2b>
10003cbc:	d9000d17 	ldw	r4,52(sp)
10003cc0:	102b883a 	mov	r21,r2
10003cc4:	2000ce26 	beq	r4,zero,10004000 <_dtoa_r+0xdbc>
10003cc8:	200d883a 	mov	r6,r4
10003ccc:	100b883a 	mov	r5,r2
10003cd0:	e009883a 	mov	r4,fp
10003cd4:	0005adc0 	call	10005adc <__pow5mult>
10003cd8:	d9800317 	ldw	r6,12(sp)
10003cdc:	102b883a 	mov	r21,r2
10003ce0:	b981810e 	bge	r23,r6,100042e8 <_dtoa_r+0x10a4>
10003ce4:	0027883a 	mov	r19,zero
10003ce8:	a8800417 	ldw	r2,16(r21)
10003cec:	05c00804 	movi	r23,32
10003cf0:	10800104 	addi	r2,r2,4
10003cf4:	1085883a 	add	r2,r2,r2
10003cf8:	1085883a 	add	r2,r2,r2
10003cfc:	a885883a 	add	r2,r21,r2
10003d00:	11000017 	ldw	r4,0(r2)
10003d04:	00056fc0 	call	100056fc <__hi0bits>
10003d08:	b885c83a 	sub	r2,r23,r2
10003d0c:	1585883a 	add	r2,r2,r22
10003d10:	108007cc 	andi	r2,r2,31
10003d14:	1000b326 	beq	r2,zero,10003fe4 <_dtoa_r+0xda0>
10003d18:	00c00804 	movi	r3,32
10003d1c:	1887c83a 	sub	r3,r3,r2
10003d20:	01000104 	movi	r4,4
10003d24:	20c2cd0e 	bge	r4,r3,1000485c <_dtoa_r+0x1618>
10003d28:	00c00704 	movi	r3,28
10003d2c:	1885c83a 	sub	r2,r3,r2
10003d30:	d8c00817 	ldw	r3,32(sp)
10003d34:	a0a9883a 	add	r20,r20,r2
10003d38:	b0ad883a 	add	r22,r22,r2
10003d3c:	1887883a 	add	r3,r3,r2
10003d40:	d8c00815 	stw	r3,32(sp)
10003d44:	d9800817 	ldw	r6,32(sp)
10003d48:	0180040e 	bge	zero,r6,10003d5c <_dtoa_r+0xb18>
10003d4c:	800b883a 	mov	r5,r16
10003d50:	e009883a 	mov	r4,fp
10003d54:	0005c1c0 	call	10005c1c <__lshift>
10003d58:	1021883a 	mov	r16,r2
10003d5c:	0580050e 	bge	zero,r22,10003d74 <_dtoa_r+0xb30>
10003d60:	a80b883a 	mov	r5,r21
10003d64:	b00d883a 	mov	r6,r22
10003d68:	e009883a 	mov	r4,fp
10003d6c:	0005c1c0 	call	10005c1c <__lshift>
10003d70:	102b883a 	mov	r21,r2
10003d74:	d9c00e17 	ldw	r7,56(sp)
10003d78:	3801211e 	bne	r7,zero,10004200 <_dtoa_r+0xfbc>
10003d7c:	d9800617 	ldw	r6,24(sp)
10003d80:	0181380e 	bge	zero,r6,10004264 <_dtoa_r+0x1020>
10003d84:	d8c00b17 	ldw	r3,44(sp)
10003d88:	1800ab1e 	bne	r3,zero,10004038 <_dtoa_r+0xdf4>
10003d8c:	dc800717 	ldw	r18,28(sp)
10003d90:	dcc00617 	ldw	r19,24(sp)
10003d94:	9029883a 	mov	r20,r18
10003d98:	00000206 	br	10003da4 <_dtoa_r+0xb60>
10003d9c:	00054b00 	call	100054b0 <__multadd>
10003da0:	1021883a 	mov	r16,r2
10003da4:	a80b883a 	mov	r5,r21
10003da8:	8009883a 	mov	r4,r16
10003dac:	000301c0 	call	1000301c <quorem>
10003db0:	10800c04 	addi	r2,r2,48
10003db4:	90800005 	stb	r2,0(r18)
10003db8:	94800044 	addi	r18,r18,1
10003dbc:	9507c83a 	sub	r3,r18,r20
10003dc0:	000f883a 	mov	r7,zero
10003dc4:	01800284 	movi	r6,10
10003dc8:	800b883a 	mov	r5,r16
10003dcc:	e009883a 	mov	r4,fp
10003dd0:	1cfff216 	blt	r3,r19,10003d9c <__alt_data_end+0xf8003d9c>
10003dd4:	1011883a 	mov	r8,r2
10003dd8:	d8800617 	ldw	r2,24(sp)
10003ddc:	0082370e 	bge	zero,r2,100046bc <_dtoa_r+0x1478>
10003de0:	d9000717 	ldw	r4,28(sp)
10003de4:	0025883a 	mov	r18,zero
10003de8:	20af883a 	add	r23,r4,r2
10003dec:	01800044 	movi	r6,1
10003df0:	800b883a 	mov	r5,r16
10003df4:	e009883a 	mov	r4,fp
10003df8:	da001715 	stw	r8,92(sp)
10003dfc:	0005c1c0 	call	10005c1c <__lshift>
10003e00:	a80b883a 	mov	r5,r21
10003e04:	1009883a 	mov	r4,r2
10003e08:	d8800915 	stw	r2,36(sp)
10003e0c:	0005d640 	call	10005d64 <__mcmp>
10003e10:	da001717 	ldw	r8,92(sp)
10003e14:	0081800e 	bge	zero,r2,10004418 <_dtoa_r+0x11d4>
10003e18:	b93fffc3 	ldbu	r4,-1(r23)
10003e1c:	b8bfffc4 	addi	r2,r23,-1
10003e20:	1007883a 	mov	r3,r2
10003e24:	01800e44 	movi	r6,57
10003e28:	d9c00717 	ldw	r7,28(sp)
10003e2c:	00000506 	br	10003e44 <_dtoa_r+0xc00>
10003e30:	18ffffc4 	addi	r3,r3,-1
10003e34:	11c12326 	beq	r2,r7,100042c4 <_dtoa_r+0x1080>
10003e38:	19000003 	ldbu	r4,0(r3)
10003e3c:	102f883a 	mov	r23,r2
10003e40:	10bfffc4 	addi	r2,r2,-1
10003e44:	21403fcc 	andi	r5,r4,255
10003e48:	2940201c 	xori	r5,r5,128
10003e4c:	297fe004 	addi	r5,r5,-128
10003e50:	29bff726 	beq	r5,r6,10003e30 <__alt_data_end+0xf8003e30>
10003e54:	21000044 	addi	r4,r4,1
10003e58:	11000005 	stb	r4,0(r2)
10003e5c:	a80b883a 	mov	r5,r21
10003e60:	e009883a 	mov	r4,fp
10003e64:	00054880 	call	10005488 <_Bfree>
10003e68:	883ea026 	beq	r17,zero,100038ec <__alt_data_end+0xf80038ec>
10003e6c:	90000426 	beq	r18,zero,10003e80 <_dtoa_r+0xc3c>
10003e70:	94400326 	beq	r18,r17,10003e80 <_dtoa_r+0xc3c>
10003e74:	900b883a 	mov	r5,r18
10003e78:	e009883a 	mov	r4,fp
10003e7c:	00054880 	call	10005488 <_Bfree>
10003e80:	880b883a 	mov	r5,r17
10003e84:	e009883a 	mov	r4,fp
10003e88:	00054880 	call	10005488 <_Bfree>
10003e8c:	003e9706 	br	100038ec <__alt_data_end+0xf80038ec>
10003e90:	01800044 	movi	r6,1
10003e94:	d9800e15 	stw	r6,56(sp)
10003e98:	003d9606 	br	100034f4 <__alt_data_end+0xf80034f4>
10003e9c:	d8800817 	ldw	r2,32(sp)
10003ea0:	d8c00517 	ldw	r3,20(sp)
10003ea4:	d8000d15 	stw	zero,52(sp)
10003ea8:	10c5c83a 	sub	r2,r2,r3
10003eac:	00c9c83a 	sub	r4,zero,r3
10003eb0:	d8800815 	stw	r2,32(sp)
10003eb4:	d9000a15 	stw	r4,40(sp)
10003eb8:	003d9706 	br	10003518 <__alt_data_end+0xf8003518>
10003ebc:	05adc83a 	sub	r22,zero,r22
10003ec0:	dd800815 	stw	r22,32(sp)
10003ec4:	002d883a 	mov	r22,zero
10003ec8:	003d8e06 	br	10003504 <__alt_data_end+0xf8003504>
10003ecc:	d9000517 	ldw	r4,20(sp)
10003ed0:	000bc2c0 	call	1000bc2c <__floatsidf>
10003ed4:	100d883a 	mov	r6,r2
10003ed8:	180f883a 	mov	r7,r3
10003edc:	a009883a 	mov	r4,r20
10003ee0:	880b883a 	mov	r5,r17
10003ee4:	000a7ec0 	call	1000a7ec <__eqdf2>
10003ee8:	103d7126 	beq	r2,zero,100034b0 <__alt_data_end+0xf80034b0>
10003eec:	d9c00517 	ldw	r7,20(sp)
10003ef0:	39ffffc4 	addi	r7,r7,-1
10003ef4:	d9c00515 	stw	r7,20(sp)
10003ef8:	003d6d06 	br	100034b0 <__alt_data_end+0xf80034b0>
10003efc:	dd400a17 	ldw	r21,40(sp)
10003f00:	dd000817 	ldw	r20,32(sp)
10003f04:	0023883a 	mov	r17,zero
10003f08:	003f4806 	br	10003c2c <__alt_data_end+0xf8003c2c>
10003f0c:	10e3c83a 	sub	r17,r2,r3
10003f10:	9448983a 	sll	r4,r18,r17
10003f14:	003d3206 	br	100033e0 <__alt_data_end+0xf80033e0>
10003f18:	d8000e15 	stw	zero,56(sp)
10003f1c:	003d7506 	br	100034f4 <__alt_data_end+0xf80034f4>
10003f20:	b005883a 	mov	r2,r22
10003f24:	003f4506 	br	10003c3c <__alt_data_end+0xf8003c3c>
10003f28:	dc000915 	stw	r16,36(sp)
10003f2c:	d9800a17 	ldw	r6,40(sp)
10003f30:	d9400917 	ldw	r5,36(sp)
10003f34:	e009883a 	mov	r4,fp
10003f38:	0005adc0 	call	10005adc <__pow5mult>
10003f3c:	1021883a 	mov	r16,r2
10003f40:	003f5a06 	br	10003cac <__alt_data_end+0xf8003cac>
10003f44:	01c00044 	movi	r7,1
10003f48:	d9c00b15 	stw	r7,44(sp)
10003f4c:	d8802217 	ldw	r2,136(sp)
10003f50:	0081280e 	bge	zero,r2,100043f4 <_dtoa_r+0x11b0>
10003f54:	100d883a 	mov	r6,r2
10003f58:	1021883a 	mov	r16,r2
10003f5c:	d8800c15 	stw	r2,48(sp)
10003f60:	d8800615 	stw	r2,24(sp)
10003f64:	003d8806 	br	10003588 <__alt_data_end+0xf8003588>
10003f68:	d8800617 	ldw	r2,24(sp)
10003f6c:	00be9b16 	blt	zero,r2,100039dc <__alt_data_end+0xf80039dc>
10003f70:	10010f1e 	bne	r2,zero,100043b0 <_dtoa_r+0x116c>
10003f74:	880b883a 	mov	r5,r17
10003f78:	000d883a 	mov	r6,zero
10003f7c:	01d00534 	movhi	r7,16404
10003f80:	8009883a 	mov	r4,r16
10003f84:	000aa440 	call	1000aa44 <__muldf3>
10003f88:	900d883a 	mov	r6,r18
10003f8c:	980f883a 	mov	r7,r19
10003f90:	1009883a 	mov	r4,r2
10003f94:	180b883a 	mov	r5,r3
10003f98:	000a8740 	call	1000a874 <__gedf2>
10003f9c:	002b883a 	mov	r21,zero
10003fa0:	0023883a 	mov	r17,zero
10003fa4:	1000bf16 	blt	r2,zero,100042a4 <_dtoa_r+0x1060>
10003fa8:	d9802217 	ldw	r6,136(sp)
10003fac:	ddc00717 	ldw	r23,28(sp)
10003fb0:	018c303a 	nor	r6,zero,r6
10003fb4:	d9800515 	stw	r6,20(sp)
10003fb8:	a80b883a 	mov	r5,r21
10003fbc:	e009883a 	mov	r4,fp
10003fc0:	00054880 	call	10005488 <_Bfree>
10003fc4:	883e4926 	beq	r17,zero,100038ec <__alt_data_end+0xf80038ec>
10003fc8:	003fad06 	br	10003e80 <__alt_data_end+0xf8003e80>
10003fcc:	d9c01117 	ldw	r7,68(sp)
10003fd0:	3801bc26 	beq	r7,zero,100046c4 <_dtoa_r+0x1480>
10003fd4:	10810cc4 	addi	r2,r2,1075
10003fd8:	dd400a17 	ldw	r21,40(sp)
10003fdc:	dd000817 	ldw	r20,32(sp)
10003fe0:	003f0a06 	br	10003c0c <__alt_data_end+0xf8003c0c>
10003fe4:	00800704 	movi	r2,28
10003fe8:	d9000817 	ldw	r4,32(sp)
10003fec:	a0a9883a 	add	r20,r20,r2
10003ff0:	b0ad883a 	add	r22,r22,r2
10003ff4:	2089883a 	add	r4,r4,r2
10003ff8:	d9000815 	stw	r4,32(sp)
10003ffc:	003f5106 	br	10003d44 <__alt_data_end+0xf8003d44>
10004000:	d8c00317 	ldw	r3,12(sp)
10004004:	b8c1fc0e 	bge	r23,r3,100047f8 <_dtoa_r+0x15b4>
10004008:	0027883a 	mov	r19,zero
1000400c:	b805883a 	mov	r2,r23
10004010:	003f3e06 	br	10003d0c <__alt_data_end+0xf8003d0c>
10004014:	880b883a 	mov	r5,r17
10004018:	e009883a 	mov	r4,fp
1000401c:	000f883a 	mov	r7,zero
10004020:	01800284 	movi	r6,10
10004024:	00054b00 	call	100054b0 <__multadd>
10004028:	d9000c17 	ldw	r4,48(sp)
1000402c:	1023883a 	mov	r17,r2
10004030:	0102040e 	bge	zero,r4,10004844 <_dtoa_r+0x1600>
10004034:	d9000615 	stw	r4,24(sp)
10004038:	0500050e 	bge	zero,r20,10004050 <_dtoa_r+0xe0c>
1000403c:	880b883a 	mov	r5,r17
10004040:	a00d883a 	mov	r6,r20
10004044:	e009883a 	mov	r4,fp
10004048:	0005c1c0 	call	10005c1c <__lshift>
1000404c:	1023883a 	mov	r17,r2
10004050:	9801241e 	bne	r19,zero,100044e4 <_dtoa_r+0x12a0>
10004054:	8829883a 	mov	r20,r17
10004058:	d9000617 	ldw	r4,24(sp)
1000405c:	dcc00717 	ldw	r19,28(sp)
10004060:	9480004c 	andi	r18,r18,1
10004064:	20bfffc4 	addi	r2,r4,-1
10004068:	9885883a 	add	r2,r19,r2
1000406c:	d8800415 	stw	r2,16(sp)
10004070:	dc800615 	stw	r18,24(sp)
10004074:	a80b883a 	mov	r5,r21
10004078:	8009883a 	mov	r4,r16
1000407c:	000301c0 	call	1000301c <quorem>
10004080:	880b883a 	mov	r5,r17
10004084:	8009883a 	mov	r4,r16
10004088:	102f883a 	mov	r23,r2
1000408c:	0005d640 	call	10005d64 <__mcmp>
10004090:	a80b883a 	mov	r5,r21
10004094:	a00d883a 	mov	r6,r20
10004098:	e009883a 	mov	r4,fp
1000409c:	102d883a 	mov	r22,r2
100040a0:	0005dc40 	call	10005dc4 <__mdiff>
100040a4:	1007883a 	mov	r3,r2
100040a8:	10800317 	ldw	r2,12(r2)
100040ac:	bc800c04 	addi	r18,r23,48
100040b0:	180b883a 	mov	r5,r3
100040b4:	10004e1e 	bne	r2,zero,100041f0 <_dtoa_r+0xfac>
100040b8:	8009883a 	mov	r4,r16
100040bc:	d8c01615 	stw	r3,88(sp)
100040c0:	0005d640 	call	10005d64 <__mcmp>
100040c4:	d8c01617 	ldw	r3,88(sp)
100040c8:	e009883a 	mov	r4,fp
100040cc:	d8801615 	stw	r2,88(sp)
100040d0:	180b883a 	mov	r5,r3
100040d4:	00054880 	call	10005488 <_Bfree>
100040d8:	d8801617 	ldw	r2,88(sp)
100040dc:	1000041e 	bne	r2,zero,100040f0 <_dtoa_r+0xeac>
100040e0:	d9800317 	ldw	r6,12(sp)
100040e4:	3000021e 	bne	r6,zero,100040f0 <_dtoa_r+0xeac>
100040e8:	d8c00617 	ldw	r3,24(sp)
100040ec:	18003726 	beq	r3,zero,100041cc <_dtoa_r+0xf88>
100040f0:	b0002016 	blt	r22,zero,10004174 <_dtoa_r+0xf30>
100040f4:	b000041e 	bne	r22,zero,10004108 <_dtoa_r+0xec4>
100040f8:	d9000317 	ldw	r4,12(sp)
100040fc:	2000021e 	bne	r4,zero,10004108 <_dtoa_r+0xec4>
10004100:	d8c00617 	ldw	r3,24(sp)
10004104:	18001b26 	beq	r3,zero,10004174 <_dtoa_r+0xf30>
10004108:	00810716 	blt	zero,r2,10004528 <_dtoa_r+0x12e4>
1000410c:	d8c00417 	ldw	r3,16(sp)
10004110:	9d800044 	addi	r22,r19,1
10004114:	9c800005 	stb	r18,0(r19)
10004118:	b02f883a 	mov	r23,r22
1000411c:	98c10626 	beq	r19,r3,10004538 <_dtoa_r+0x12f4>
10004120:	800b883a 	mov	r5,r16
10004124:	000f883a 	mov	r7,zero
10004128:	01800284 	movi	r6,10
1000412c:	e009883a 	mov	r4,fp
10004130:	00054b00 	call	100054b0 <__multadd>
10004134:	1021883a 	mov	r16,r2
10004138:	000f883a 	mov	r7,zero
1000413c:	01800284 	movi	r6,10
10004140:	880b883a 	mov	r5,r17
10004144:	e009883a 	mov	r4,fp
10004148:	8d002526 	beq	r17,r20,100041e0 <_dtoa_r+0xf9c>
1000414c:	00054b00 	call	100054b0 <__multadd>
10004150:	a00b883a 	mov	r5,r20
10004154:	000f883a 	mov	r7,zero
10004158:	01800284 	movi	r6,10
1000415c:	e009883a 	mov	r4,fp
10004160:	1023883a 	mov	r17,r2
10004164:	00054b00 	call	100054b0 <__multadd>
10004168:	1029883a 	mov	r20,r2
1000416c:	b027883a 	mov	r19,r22
10004170:	003fc006 	br	10004074 <__alt_data_end+0xf8004074>
10004174:	9011883a 	mov	r8,r18
10004178:	00800e0e 	bge	zero,r2,100041b4 <_dtoa_r+0xf70>
1000417c:	800b883a 	mov	r5,r16
10004180:	01800044 	movi	r6,1
10004184:	e009883a 	mov	r4,fp
10004188:	da001715 	stw	r8,92(sp)
1000418c:	0005c1c0 	call	10005c1c <__lshift>
10004190:	a80b883a 	mov	r5,r21
10004194:	1009883a 	mov	r4,r2
10004198:	1021883a 	mov	r16,r2
1000419c:	0005d640 	call	10005d64 <__mcmp>
100041a0:	da001717 	ldw	r8,92(sp)
100041a4:	0081960e 	bge	zero,r2,10004800 <_dtoa_r+0x15bc>
100041a8:	00800e44 	movi	r2,57
100041ac:	40817026 	beq	r8,r2,10004770 <_dtoa_r+0x152c>
100041b0:	ba000c44 	addi	r8,r23,49
100041b4:	8825883a 	mov	r18,r17
100041b8:	9dc00044 	addi	r23,r19,1
100041bc:	9a000005 	stb	r8,0(r19)
100041c0:	a023883a 	mov	r17,r20
100041c4:	dc000915 	stw	r16,36(sp)
100041c8:	003f2406 	br	10003e5c <__alt_data_end+0xf8003e5c>
100041cc:	00800e44 	movi	r2,57
100041d0:	9011883a 	mov	r8,r18
100041d4:	90816626 	beq	r18,r2,10004770 <_dtoa_r+0x152c>
100041d8:	05bff516 	blt	zero,r22,100041b0 <__alt_data_end+0xf80041b0>
100041dc:	003ff506 	br	100041b4 <__alt_data_end+0xf80041b4>
100041e0:	00054b00 	call	100054b0 <__multadd>
100041e4:	1023883a 	mov	r17,r2
100041e8:	1029883a 	mov	r20,r2
100041ec:	003fdf06 	br	1000416c <__alt_data_end+0xf800416c>
100041f0:	e009883a 	mov	r4,fp
100041f4:	00054880 	call	10005488 <_Bfree>
100041f8:	00800044 	movi	r2,1
100041fc:	003fbc06 	br	100040f0 <__alt_data_end+0xf80040f0>
10004200:	a80b883a 	mov	r5,r21
10004204:	8009883a 	mov	r4,r16
10004208:	0005d640 	call	10005d64 <__mcmp>
1000420c:	103edb0e 	bge	r2,zero,10003d7c <__alt_data_end+0xf8003d7c>
10004210:	800b883a 	mov	r5,r16
10004214:	000f883a 	mov	r7,zero
10004218:	01800284 	movi	r6,10
1000421c:	e009883a 	mov	r4,fp
10004220:	00054b00 	call	100054b0 <__multadd>
10004224:	1021883a 	mov	r16,r2
10004228:	d8800517 	ldw	r2,20(sp)
1000422c:	d8c00b17 	ldw	r3,44(sp)
10004230:	10bfffc4 	addi	r2,r2,-1
10004234:	d8800515 	stw	r2,20(sp)
10004238:	183f761e 	bne	r3,zero,10004014 <__alt_data_end+0xf8004014>
1000423c:	d9000c17 	ldw	r4,48(sp)
10004240:	0101730e 	bge	zero,r4,10004810 <_dtoa_r+0x15cc>
10004244:	d9000615 	stw	r4,24(sp)
10004248:	003ed006 	br	10003d8c <__alt_data_end+0xf8003d8c>
1000424c:	00800084 	movi	r2,2
10004250:	3081861e 	bne	r6,r2,1000486c <_dtoa_r+0x1628>
10004254:	d8000b15 	stw	zero,44(sp)
10004258:	003f3c06 	br	10003f4c <__alt_data_end+0xf8003f4c>
1000425c:	dc000917 	ldw	r16,36(sp)
10004260:	003e9206 	br	10003cac <__alt_data_end+0xf8003cac>
10004264:	d9c00317 	ldw	r7,12(sp)
10004268:	00800084 	movi	r2,2
1000426c:	11fec50e 	bge	r2,r7,10003d84 <__alt_data_end+0xf8003d84>
10004270:	d9000617 	ldw	r4,24(sp)
10004274:	20013c1e 	bne	r4,zero,10004768 <_dtoa_r+0x1524>
10004278:	a80b883a 	mov	r5,r21
1000427c:	000f883a 	mov	r7,zero
10004280:	01800144 	movi	r6,5
10004284:	e009883a 	mov	r4,fp
10004288:	00054b00 	call	100054b0 <__multadd>
1000428c:	100b883a 	mov	r5,r2
10004290:	8009883a 	mov	r4,r16
10004294:	102b883a 	mov	r21,r2
10004298:	0005d640 	call	10005d64 <__mcmp>
1000429c:	dc000915 	stw	r16,36(sp)
100042a0:	00bf410e 	bge	zero,r2,10003fa8 <__alt_data_end+0xf8003fa8>
100042a4:	d9c00717 	ldw	r7,28(sp)
100042a8:	00800c44 	movi	r2,49
100042ac:	38800005 	stb	r2,0(r7)
100042b0:	d8800517 	ldw	r2,20(sp)
100042b4:	3dc00044 	addi	r23,r7,1
100042b8:	10800044 	addi	r2,r2,1
100042bc:	d8800515 	stw	r2,20(sp)
100042c0:	003f3d06 	br	10003fb8 <__alt_data_end+0xf8003fb8>
100042c4:	d9800517 	ldw	r6,20(sp)
100042c8:	d9c00717 	ldw	r7,28(sp)
100042cc:	00800c44 	movi	r2,49
100042d0:	31800044 	addi	r6,r6,1
100042d4:	d9800515 	stw	r6,20(sp)
100042d8:	38800005 	stb	r2,0(r7)
100042dc:	003edf06 	br	10003e5c <__alt_data_end+0xf8003e5c>
100042e0:	d8000b15 	stw	zero,44(sp)
100042e4:	003c9f06 	br	10003564 <__alt_data_end+0xf8003564>
100042e8:	903e7e1e 	bne	r18,zero,10003ce4 <__alt_data_end+0xf8003ce4>
100042ec:	00800434 	movhi	r2,16
100042f0:	10bfffc4 	addi	r2,r2,-1
100042f4:	9884703a 	and	r2,r19,r2
100042f8:	1000ea1e 	bne	r2,zero,100046a4 <_dtoa_r+0x1460>
100042fc:	9cdffc2c 	andhi	r19,r19,32752
10004300:	9800e826 	beq	r19,zero,100046a4 <_dtoa_r+0x1460>
10004304:	d9c00817 	ldw	r7,32(sp)
10004308:	b5800044 	addi	r22,r22,1
1000430c:	04c00044 	movi	r19,1
10004310:	39c00044 	addi	r7,r7,1
10004314:	d9c00815 	stw	r7,32(sp)
10004318:	d8800d17 	ldw	r2,52(sp)
1000431c:	103e721e 	bne	r2,zero,10003ce8 <__alt_data_end+0xf8003ce8>
10004320:	00800044 	movi	r2,1
10004324:	003e7906 	br	10003d0c <__alt_data_end+0xf8003d0c>
10004328:	8009883a 	mov	r4,r16
1000432c:	000bc2c0 	call	1000bc2c <__floatsidf>
10004330:	d9800f17 	ldw	r6,60(sp)
10004334:	d9c01017 	ldw	r7,64(sp)
10004338:	1009883a 	mov	r4,r2
1000433c:	180b883a 	mov	r5,r3
10004340:	000aa440 	call	1000aa44 <__muldf3>
10004344:	000d883a 	mov	r6,zero
10004348:	01d00734 	movhi	r7,16412
1000434c:	1009883a 	mov	r4,r2
10004350:	180b883a 	mov	r5,r3
10004354:	00095700 	call	10009570 <__adddf3>
10004358:	047f3034 	movhi	r17,64704
1000435c:	1021883a 	mov	r16,r2
10004360:	1c63883a 	add	r17,r3,r17
10004364:	d9000f17 	ldw	r4,60(sp)
10004368:	d9401017 	ldw	r5,64(sp)
1000436c:	000d883a 	mov	r6,zero
10004370:	01d00534 	movhi	r7,16404
10004374:	000b2b00 	call	1000b2b0 <__subdf3>
10004378:	800d883a 	mov	r6,r16
1000437c:	880f883a 	mov	r7,r17
10004380:	1009883a 	mov	r4,r2
10004384:	180b883a 	mov	r5,r3
10004388:	102b883a 	mov	r21,r2
1000438c:	1829883a 	mov	r20,r3
10004390:	000a8740 	call	1000a874 <__gedf2>
10004394:	00806c16 	blt	zero,r2,10004548 <_dtoa_r+0x1304>
10004398:	89e0003c 	xorhi	r7,r17,32768
1000439c:	800d883a 	mov	r6,r16
100043a0:	a809883a 	mov	r4,r21
100043a4:	a00b883a 	mov	r5,r20
100043a8:	000a9500 	call	1000a950 <__ledf2>
100043ac:	103d7e0e 	bge	r2,zero,100039a8 <__alt_data_end+0xf80039a8>
100043b0:	002b883a 	mov	r21,zero
100043b4:	0023883a 	mov	r17,zero
100043b8:	003efb06 	br	10003fa8 <__alt_data_end+0xf8003fa8>
100043bc:	d8800717 	ldw	r2,28(sp)
100043c0:	003bd006 	br	10003304 <__alt_data_end+0xf8003304>
100043c4:	d9000a17 	ldw	r4,40(sp)
100043c8:	d9800d17 	ldw	r6,52(sp)
100043cc:	dd400a15 	stw	r21,40(sp)
100043d0:	a905c83a 	sub	r2,r21,r4
100043d4:	308d883a 	add	r6,r6,r2
100043d8:	d9800d15 	stw	r6,52(sp)
100043dc:	002b883a 	mov	r21,zero
100043e0:	003e0606 	br	10003bfc <__alt_data_end+0xf8003bfc>
100043e4:	9023883a 	mov	r17,r18
100043e8:	9829883a 	mov	r20,r19
100043ec:	04000084 	movi	r16,2
100043f0:	003c9206 	br	1000363c <__alt_data_end+0xf800363c>
100043f4:	04000044 	movi	r16,1
100043f8:	dc000c15 	stw	r16,48(sp)
100043fc:	dc000615 	stw	r16,24(sp)
10004400:	dc002215 	stw	r16,136(sp)
10004404:	e0001115 	stw	zero,68(fp)
10004408:	000b883a 	mov	r5,zero
1000440c:	003c6906 	br	100035b4 <__alt_data_end+0xf80035b4>
10004410:	3021883a 	mov	r16,r6
10004414:	003ffb06 	br	10004404 <__alt_data_end+0xf8004404>
10004418:	1000021e 	bne	r2,zero,10004424 <_dtoa_r+0x11e0>
1000441c:	4200004c 	andi	r8,r8,1
10004420:	403e7d1e 	bne	r8,zero,10003e18 <__alt_data_end+0xf8003e18>
10004424:	01000c04 	movi	r4,48
10004428:	00000106 	br	10004430 <_dtoa_r+0x11ec>
1000442c:	102f883a 	mov	r23,r2
10004430:	b8bfffc4 	addi	r2,r23,-1
10004434:	10c00007 	ldb	r3,0(r2)
10004438:	193ffc26 	beq	r3,r4,1000442c <__alt_data_end+0xf800442c>
1000443c:	003e8706 	br	10003e5c <__alt_data_end+0xf8003e5c>
10004440:	d8800517 	ldw	r2,20(sp)
10004444:	00a3c83a 	sub	r17,zero,r2
10004448:	8800a426 	beq	r17,zero,100046dc <_dtoa_r+0x1498>
1000444c:	888003cc 	andi	r2,r17,15
10004450:	100490fa 	slli	r2,r2,3
10004454:	00c40074 	movhi	r3,4097
10004458:	18f87e04 	addi	r3,r3,-7688
1000445c:	1885883a 	add	r2,r3,r2
10004460:	11800017 	ldw	r6,0(r2)
10004464:	11c00117 	ldw	r7,4(r2)
10004468:	9009883a 	mov	r4,r18
1000446c:	980b883a 	mov	r5,r19
10004470:	8823d13a 	srai	r17,r17,4
10004474:	000aa440 	call	1000aa44 <__muldf3>
10004478:	d8800f15 	stw	r2,60(sp)
1000447c:	d8c01015 	stw	r3,64(sp)
10004480:	8800e826 	beq	r17,zero,10004824 <_dtoa_r+0x15e0>
10004484:	05040074 	movhi	r20,4097
10004488:	a5387404 	addi	r20,r20,-7728
1000448c:	04000084 	movi	r16,2
10004490:	8980004c 	andi	r6,r17,1
10004494:	1009883a 	mov	r4,r2
10004498:	8823d07a 	srai	r17,r17,1
1000449c:	180b883a 	mov	r5,r3
100044a0:	30000426 	beq	r6,zero,100044b4 <_dtoa_r+0x1270>
100044a4:	a1800017 	ldw	r6,0(r20)
100044a8:	a1c00117 	ldw	r7,4(r20)
100044ac:	84000044 	addi	r16,r16,1
100044b0:	000aa440 	call	1000aa44 <__muldf3>
100044b4:	a5000204 	addi	r20,r20,8
100044b8:	883ff51e 	bne	r17,zero,10004490 <__alt_data_end+0xf8004490>
100044bc:	d8800f15 	stw	r2,60(sp)
100044c0:	d8c01015 	stw	r3,64(sp)
100044c4:	003c7606 	br	100036a0 <__alt_data_end+0xf80036a0>
100044c8:	00c00c04 	movi	r3,48
100044cc:	10c00005 	stb	r3,0(r2)
100044d0:	d8c00517 	ldw	r3,20(sp)
100044d4:	bd3fffc3 	ldbu	r20,-1(r23)
100044d8:	18c00044 	addi	r3,r3,1
100044dc:	d8c00515 	stw	r3,20(sp)
100044e0:	003db906 	br	10003bc8 <__alt_data_end+0xf8003bc8>
100044e4:	89400117 	ldw	r5,4(r17)
100044e8:	e009883a 	mov	r4,fp
100044ec:	00053e00 	call	100053e0 <_Balloc>
100044f0:	89800417 	ldw	r6,16(r17)
100044f4:	89400304 	addi	r5,r17,12
100044f8:	11000304 	addi	r4,r2,12
100044fc:	31800084 	addi	r6,r6,2
10004500:	318d883a 	add	r6,r6,r6
10004504:	318d883a 	add	r6,r6,r6
10004508:	1027883a 	mov	r19,r2
1000450c:	00052980 	call	10005298 <memcpy>
10004510:	01800044 	movi	r6,1
10004514:	980b883a 	mov	r5,r19
10004518:	e009883a 	mov	r4,fp
1000451c:	0005c1c0 	call	10005c1c <__lshift>
10004520:	1029883a 	mov	r20,r2
10004524:	003ecc06 	br	10004058 <__alt_data_end+0xf8004058>
10004528:	00800e44 	movi	r2,57
1000452c:	90809026 	beq	r18,r2,10004770 <_dtoa_r+0x152c>
10004530:	92000044 	addi	r8,r18,1
10004534:	003f1f06 	br	100041b4 <__alt_data_end+0xf80041b4>
10004538:	9011883a 	mov	r8,r18
1000453c:	8825883a 	mov	r18,r17
10004540:	a023883a 	mov	r17,r20
10004544:	003e2906 	br	10003dec <__alt_data_end+0xf8003dec>
10004548:	002b883a 	mov	r21,zero
1000454c:	0023883a 	mov	r17,zero
10004550:	003f5406 	br	100042a4 <__alt_data_end+0xf80042a4>
10004554:	61bfffc4 	addi	r6,r12,-1
10004558:	300490fa 	slli	r2,r6,3
1000455c:	00c40074 	movhi	r3,4097
10004560:	18f87e04 	addi	r3,r3,-7688
10004564:	1885883a 	add	r2,r3,r2
10004568:	11000017 	ldw	r4,0(r2)
1000456c:	11400117 	ldw	r5,4(r2)
10004570:	d8800717 	ldw	r2,28(sp)
10004574:	880f883a 	mov	r7,r17
10004578:	d9801215 	stw	r6,72(sp)
1000457c:	800d883a 	mov	r6,r16
10004580:	db001615 	stw	r12,88(sp)
10004584:	15c00044 	addi	r23,r2,1
10004588:	000aa440 	call	1000aa44 <__muldf3>
1000458c:	d9401017 	ldw	r5,64(sp)
10004590:	d9000f17 	ldw	r4,60(sp)
10004594:	d8c01515 	stw	r3,84(sp)
10004598:	d8801415 	stw	r2,80(sp)
1000459c:	000bbac0 	call	1000bbac <__fixdfsi>
100045a0:	1009883a 	mov	r4,r2
100045a4:	1021883a 	mov	r16,r2
100045a8:	000bc2c0 	call	1000bc2c <__floatsidf>
100045ac:	d9000f17 	ldw	r4,60(sp)
100045b0:	d9401017 	ldw	r5,64(sp)
100045b4:	100d883a 	mov	r6,r2
100045b8:	180f883a 	mov	r7,r3
100045bc:	000b2b00 	call	1000b2b0 <__subdf3>
100045c0:	1829883a 	mov	r20,r3
100045c4:	d8c00717 	ldw	r3,28(sp)
100045c8:	84000c04 	addi	r16,r16,48
100045cc:	1023883a 	mov	r17,r2
100045d0:	1c000005 	stb	r16,0(r3)
100045d4:	db001617 	ldw	r12,88(sp)
100045d8:	00800044 	movi	r2,1
100045dc:	60802226 	beq	r12,r2,10004668 <_dtoa_r+0x1424>
100045e0:	d9c00717 	ldw	r7,28(sp)
100045e4:	8805883a 	mov	r2,r17
100045e8:	b82b883a 	mov	r21,r23
100045ec:	3b19883a 	add	r12,r7,r12
100045f0:	6023883a 	mov	r17,r12
100045f4:	a007883a 	mov	r3,r20
100045f8:	dc800f15 	stw	r18,60(sp)
100045fc:	000d883a 	mov	r6,zero
10004600:	01d00934 	movhi	r7,16420
10004604:	1009883a 	mov	r4,r2
10004608:	180b883a 	mov	r5,r3
1000460c:	000aa440 	call	1000aa44 <__muldf3>
10004610:	180b883a 	mov	r5,r3
10004614:	1009883a 	mov	r4,r2
10004618:	1829883a 	mov	r20,r3
1000461c:	1025883a 	mov	r18,r2
10004620:	000bbac0 	call	1000bbac <__fixdfsi>
10004624:	1009883a 	mov	r4,r2
10004628:	1021883a 	mov	r16,r2
1000462c:	000bc2c0 	call	1000bc2c <__floatsidf>
10004630:	100d883a 	mov	r6,r2
10004634:	180f883a 	mov	r7,r3
10004638:	9009883a 	mov	r4,r18
1000463c:	a00b883a 	mov	r5,r20
10004640:	84000c04 	addi	r16,r16,48
10004644:	000b2b00 	call	1000b2b0 <__subdf3>
10004648:	ad400044 	addi	r21,r21,1
1000464c:	ac3fffc5 	stb	r16,-1(r21)
10004650:	ac7fea1e 	bne	r21,r17,100045fc <__alt_data_end+0xf80045fc>
10004654:	1023883a 	mov	r17,r2
10004658:	d8801217 	ldw	r2,72(sp)
1000465c:	dc800f17 	ldw	r18,60(sp)
10004660:	1829883a 	mov	r20,r3
10004664:	b8af883a 	add	r23,r23,r2
10004668:	d9001417 	ldw	r4,80(sp)
1000466c:	d9401517 	ldw	r5,84(sp)
10004670:	000d883a 	mov	r6,zero
10004674:	01cff834 	movhi	r7,16352
10004678:	00095700 	call	10009570 <__adddf3>
1000467c:	880d883a 	mov	r6,r17
10004680:	a00f883a 	mov	r7,r20
10004684:	1009883a 	mov	r4,r2
10004688:	180b883a 	mov	r5,r3
1000468c:	000a9500 	call	1000a950 <__ledf2>
10004690:	10003e0e 	bge	r2,zero,1000478c <_dtoa_r+0x1548>
10004694:	d9001317 	ldw	r4,76(sp)
10004698:	bd3fffc3 	ldbu	r20,-1(r23)
1000469c:	d9000515 	stw	r4,20(sp)
100046a0:	003d3b06 	br	10003b90 <__alt_data_end+0xf8003b90>
100046a4:	0027883a 	mov	r19,zero
100046a8:	003f1b06 	br	10004318 <__alt_data_end+0xf8004318>
100046ac:	d8800817 	ldw	r2,32(sp)
100046b0:	11e9c83a 	sub	r20,r2,r7
100046b4:	0005883a 	mov	r2,zero
100046b8:	003d5406 	br	10003c0c <__alt_data_end+0xf8003c0c>
100046bc:	00800044 	movi	r2,1
100046c0:	003dc706 	br	10003de0 <__alt_data_end+0xf8003de0>
100046c4:	d8c00217 	ldw	r3,8(sp)
100046c8:	00800d84 	movi	r2,54
100046cc:	dd400a17 	ldw	r21,40(sp)
100046d0:	10c5c83a 	sub	r2,r2,r3
100046d4:	dd000817 	ldw	r20,32(sp)
100046d8:	003d4c06 	br	10003c0c <__alt_data_end+0xf8003c0c>
100046dc:	dc800f15 	stw	r18,60(sp)
100046e0:	dcc01015 	stw	r19,64(sp)
100046e4:	04000084 	movi	r16,2
100046e8:	003bed06 	br	100036a0 <__alt_data_end+0xf80036a0>
100046ec:	d9000617 	ldw	r4,24(sp)
100046f0:	203f0d26 	beq	r4,zero,10004328 <__alt_data_end+0xf8004328>
100046f4:	d9800c17 	ldw	r6,48(sp)
100046f8:	01bcab0e 	bge	zero,r6,100039a8 <__alt_data_end+0xf80039a8>
100046fc:	d9401017 	ldw	r5,64(sp)
10004700:	d9000f17 	ldw	r4,60(sp)
10004704:	000d883a 	mov	r6,zero
10004708:	01d00934 	movhi	r7,16420
1000470c:	000aa440 	call	1000aa44 <__muldf3>
10004710:	81000044 	addi	r4,r16,1
10004714:	d8800f15 	stw	r2,60(sp)
10004718:	d8c01015 	stw	r3,64(sp)
1000471c:	000bc2c0 	call	1000bc2c <__floatsidf>
10004720:	d9800f17 	ldw	r6,60(sp)
10004724:	d9c01017 	ldw	r7,64(sp)
10004728:	1009883a 	mov	r4,r2
1000472c:	180b883a 	mov	r5,r3
10004730:	000aa440 	call	1000aa44 <__muldf3>
10004734:	01d00734 	movhi	r7,16412
10004738:	000d883a 	mov	r6,zero
1000473c:	1009883a 	mov	r4,r2
10004740:	180b883a 	mov	r5,r3
10004744:	00095700 	call	10009570 <__adddf3>
10004748:	d9c00517 	ldw	r7,20(sp)
1000474c:	047f3034 	movhi	r17,64704
10004750:	1021883a 	mov	r16,r2
10004754:	39ffffc4 	addi	r7,r7,-1
10004758:	d9c01315 	stw	r7,76(sp)
1000475c:	1c63883a 	add	r17,r3,r17
10004760:	db000c17 	ldw	r12,48(sp)
10004764:	003bea06 	br	10003710 <__alt_data_end+0xf8003710>
10004768:	dc000915 	stw	r16,36(sp)
1000476c:	003e0e06 	br	10003fa8 <__alt_data_end+0xf8003fa8>
10004770:	01000e44 	movi	r4,57
10004774:	8825883a 	mov	r18,r17
10004778:	9dc00044 	addi	r23,r19,1
1000477c:	99000005 	stb	r4,0(r19)
10004780:	a023883a 	mov	r17,r20
10004784:	dc000915 	stw	r16,36(sp)
10004788:	003da406 	br	10003e1c <__alt_data_end+0xf8003e1c>
1000478c:	d9801417 	ldw	r6,80(sp)
10004790:	d9c01517 	ldw	r7,84(sp)
10004794:	0009883a 	mov	r4,zero
10004798:	014ff834 	movhi	r5,16352
1000479c:	000b2b00 	call	1000b2b0 <__subdf3>
100047a0:	880d883a 	mov	r6,r17
100047a4:	a00f883a 	mov	r7,r20
100047a8:	1009883a 	mov	r4,r2
100047ac:	180b883a 	mov	r5,r3
100047b0:	000a8740 	call	1000a874 <__gedf2>
100047b4:	00bc7c0e 	bge	zero,r2,100039a8 <__alt_data_end+0xf80039a8>
100047b8:	01000c04 	movi	r4,48
100047bc:	00000106 	br	100047c4 <_dtoa_r+0x1580>
100047c0:	102f883a 	mov	r23,r2
100047c4:	b8bfffc4 	addi	r2,r23,-1
100047c8:	10c00007 	ldb	r3,0(r2)
100047cc:	193ffc26 	beq	r3,r4,100047c0 <__alt_data_end+0xf80047c0>
100047d0:	d9801317 	ldw	r6,76(sp)
100047d4:	d9800515 	stw	r6,20(sp)
100047d8:	003c4406 	br	100038ec <__alt_data_end+0xf80038ec>
100047dc:	d9801317 	ldw	r6,76(sp)
100047e0:	d9800515 	stw	r6,20(sp)
100047e4:	003cea06 	br	10003b90 <__alt_data_end+0xf8003b90>
100047e8:	dd800f17 	ldw	r22,60(sp)
100047ec:	dcc01017 	ldw	r19,64(sp)
100047f0:	dc801217 	ldw	r18,72(sp)
100047f4:	003c6c06 	br	100039a8 <__alt_data_end+0xf80039a8>
100047f8:	903e031e 	bne	r18,zero,10004008 <__alt_data_end+0xf8004008>
100047fc:	003ebb06 	br	100042ec <__alt_data_end+0xf80042ec>
10004800:	103e6c1e 	bne	r2,zero,100041b4 <__alt_data_end+0xf80041b4>
10004804:	4080004c 	andi	r2,r8,1
10004808:	103e6a26 	beq	r2,zero,100041b4 <__alt_data_end+0xf80041b4>
1000480c:	003e6606 	br	100041a8 <__alt_data_end+0xf80041a8>
10004810:	d8c00317 	ldw	r3,12(sp)
10004814:	00800084 	movi	r2,2
10004818:	10c02916 	blt	r2,r3,100048c0 <_dtoa_r+0x167c>
1000481c:	d9000c17 	ldw	r4,48(sp)
10004820:	003e8806 	br	10004244 <__alt_data_end+0xf8004244>
10004824:	04000084 	movi	r16,2
10004828:	003b9d06 	br	100036a0 <__alt_data_end+0xf80036a0>
1000482c:	d9001317 	ldw	r4,76(sp)
10004830:	d9000515 	stw	r4,20(sp)
10004834:	003cd606 	br	10003b90 <__alt_data_end+0xf8003b90>
10004838:	d8801317 	ldw	r2,76(sp)
1000483c:	d8800515 	stw	r2,20(sp)
10004840:	003c2a06 	br	100038ec <__alt_data_end+0xf80038ec>
10004844:	d9800317 	ldw	r6,12(sp)
10004848:	00800084 	movi	r2,2
1000484c:	11801516 	blt	r2,r6,100048a4 <_dtoa_r+0x1660>
10004850:	d9c00c17 	ldw	r7,48(sp)
10004854:	d9c00615 	stw	r7,24(sp)
10004858:	003df706 	br	10004038 <__alt_data_end+0xf8004038>
1000485c:	193d3926 	beq	r3,r4,10003d44 <__alt_data_end+0xf8003d44>
10004860:	00c00f04 	movi	r3,60
10004864:	1885c83a 	sub	r2,r3,r2
10004868:	003ddf06 	br	10003fe8 <__alt_data_end+0xf8003fe8>
1000486c:	e009883a 	mov	r4,fp
10004870:	e0001115 	stw	zero,68(fp)
10004874:	000b883a 	mov	r5,zero
10004878:	00053e00 	call	100053e0 <_Balloc>
1000487c:	d8800715 	stw	r2,28(sp)
10004880:	d8c00717 	ldw	r3,28(sp)
10004884:	00bfffc4 	movi	r2,-1
10004888:	01000044 	movi	r4,1
1000488c:	d8800c15 	stw	r2,48(sp)
10004890:	e0c01015 	stw	r3,64(fp)
10004894:	d9000b15 	stw	r4,44(sp)
10004898:	d8800615 	stw	r2,24(sp)
1000489c:	d8002215 	stw	zero,136(sp)
100048a0:	003c4106 	br	100039a8 <__alt_data_end+0xf80039a8>
100048a4:	d8c00c17 	ldw	r3,48(sp)
100048a8:	d8c00615 	stw	r3,24(sp)
100048ac:	003e7006 	br	10004270 <__alt_data_end+0xf8004270>
100048b0:	04400044 	movi	r17,1
100048b4:	003b2006 	br	10003538 <__alt_data_end+0xf8003538>
100048b8:	000b883a 	mov	r5,zero
100048bc:	003b3d06 	br	100035b4 <__alt_data_end+0xf80035b4>
100048c0:	d8800c17 	ldw	r2,48(sp)
100048c4:	d8800615 	stw	r2,24(sp)
100048c8:	003e6906 	br	10004270 <__alt_data_end+0xf8004270>

100048cc <_setlocale_r>:
100048cc:	30001b26 	beq	r6,zero,1000493c <_setlocale_r+0x70>
100048d0:	01440074 	movhi	r5,4097
100048d4:	defffe04 	addi	sp,sp,-8
100048d8:	29786404 	addi	r5,r5,-7792
100048dc:	3009883a 	mov	r4,r6
100048e0:	dc000015 	stw	r16,0(sp)
100048e4:	dfc00115 	stw	ra,4(sp)
100048e8:	3021883a 	mov	r16,r6
100048ec:	00065600 	call	10006560 <strcmp>
100048f0:	1000061e 	bne	r2,zero,1000490c <_setlocale_r+0x40>
100048f4:	00840074 	movhi	r2,4097
100048f8:	10b86304 	addi	r2,r2,-7796
100048fc:	dfc00117 	ldw	ra,4(sp)
10004900:	dc000017 	ldw	r16,0(sp)
10004904:	dec00204 	addi	sp,sp,8
10004908:	f800283a 	ret
1000490c:	01440074 	movhi	r5,4097
10004910:	29786304 	addi	r5,r5,-7796
10004914:	8009883a 	mov	r4,r16
10004918:	00065600 	call	10006560 <strcmp>
1000491c:	103ff526 	beq	r2,zero,100048f4 <__alt_data_end+0xf80048f4>
10004920:	01440074 	movhi	r5,4097
10004924:	29784e04 	addi	r5,r5,-7880
10004928:	8009883a 	mov	r4,r16
1000492c:	00065600 	call	10006560 <strcmp>
10004930:	103ff026 	beq	r2,zero,100048f4 <__alt_data_end+0xf80048f4>
10004934:	0005883a 	mov	r2,zero
10004938:	003ff006 	br	100048fc <__alt_data_end+0xf80048fc>
1000493c:	00840074 	movhi	r2,4097
10004940:	10b86304 	addi	r2,r2,-7796
10004944:	f800283a 	ret

10004948 <__locale_charset>:
10004948:	00840074 	movhi	r2,4097
1000494c:	10bb2a04 	addi	r2,r2,-4952
10004950:	f800283a 	ret

10004954 <__locale_mb_cur_max>:
10004954:	00840074 	movhi	r2,4097
10004958:	1080c904 	addi	r2,r2,804
1000495c:	10800017 	ldw	r2,0(r2)
10004960:	f800283a 	ret

10004964 <__locale_msgcharset>:
10004964:	00840074 	movhi	r2,4097
10004968:	10bb2204 	addi	r2,r2,-4984
1000496c:	f800283a 	ret

10004970 <__locale_cjk_lang>:
10004970:	0005883a 	mov	r2,zero
10004974:	f800283a 	ret

10004978 <_localeconv_r>:
10004978:	00840074 	movhi	r2,4097
1000497c:	10bb3204 	addi	r2,r2,-4920
10004980:	f800283a 	ret

10004984 <setlocale>:
10004984:	00840074 	movhi	r2,4097
10004988:	1080c804 	addi	r2,r2,800
1000498c:	280d883a 	mov	r6,r5
10004990:	200b883a 	mov	r5,r4
10004994:	11000017 	ldw	r4,0(r2)
10004998:	00048cc1 	jmpi	100048cc <_setlocale_r>

1000499c <localeconv>:
1000499c:	00840074 	movhi	r2,4097
100049a0:	10bb3204 	addi	r2,r2,-4920
100049a4:	f800283a 	ret

100049a8 <_malloc_r>:
100049a8:	defff504 	addi	sp,sp,-44
100049ac:	dc800315 	stw	r18,12(sp)
100049b0:	dfc00a15 	stw	ra,40(sp)
100049b4:	df000915 	stw	fp,36(sp)
100049b8:	ddc00815 	stw	r23,32(sp)
100049bc:	dd800715 	stw	r22,28(sp)
100049c0:	dd400615 	stw	r21,24(sp)
100049c4:	dd000515 	stw	r20,20(sp)
100049c8:	dcc00415 	stw	r19,16(sp)
100049cc:	dc400215 	stw	r17,8(sp)
100049d0:	dc000115 	stw	r16,4(sp)
100049d4:	288002c4 	addi	r2,r5,11
100049d8:	00c00584 	movi	r3,22
100049dc:	2025883a 	mov	r18,r4
100049e0:	18807f2e 	bgeu	r3,r2,10004be0 <_malloc_r+0x238>
100049e4:	047ffe04 	movi	r17,-8
100049e8:	1462703a 	and	r17,r2,r17
100049ec:	8800a316 	blt	r17,zero,10004c7c <_malloc_r+0x2d4>
100049f0:	8940a236 	bltu	r17,r5,10004c7c <_malloc_r+0x2d4>
100049f4:	000bf7c0 	call	1000bf7c <__malloc_lock>
100049f8:	00807dc4 	movi	r2,503
100049fc:	1441e92e 	bgeu	r2,r17,100051a4 <_malloc_r+0x7fc>
10004a00:	8804d27a 	srli	r2,r17,9
10004a04:	1000a126 	beq	r2,zero,10004c8c <_malloc_r+0x2e4>
10004a08:	00c00104 	movi	r3,4
10004a0c:	18811e36 	bltu	r3,r2,10004e88 <_malloc_r+0x4e0>
10004a10:	8804d1ba 	srli	r2,r17,6
10004a14:	12000e44 	addi	r8,r2,57
10004a18:	11c00e04 	addi	r7,r2,56
10004a1c:	4209883a 	add	r4,r8,r8
10004a20:	04c40074 	movhi	r19,4097
10004a24:	2109883a 	add	r4,r4,r4
10004a28:	9cfb4004 	addi	r19,r19,-4864
10004a2c:	2109883a 	add	r4,r4,r4
10004a30:	9909883a 	add	r4,r19,r4
10004a34:	24000117 	ldw	r16,4(r4)
10004a38:	213ffe04 	addi	r4,r4,-8
10004a3c:	24009726 	beq	r4,r16,10004c9c <_malloc_r+0x2f4>
10004a40:	80800117 	ldw	r2,4(r16)
10004a44:	01bfff04 	movi	r6,-4
10004a48:	014003c4 	movi	r5,15
10004a4c:	1184703a 	and	r2,r2,r6
10004a50:	1447c83a 	sub	r3,r2,r17
10004a54:	28c00716 	blt	r5,r3,10004a74 <_malloc_r+0xcc>
10004a58:	1800920e 	bge	r3,zero,10004ca4 <_malloc_r+0x2fc>
10004a5c:	84000317 	ldw	r16,12(r16)
10004a60:	24008e26 	beq	r4,r16,10004c9c <_malloc_r+0x2f4>
10004a64:	80800117 	ldw	r2,4(r16)
10004a68:	1184703a 	and	r2,r2,r6
10004a6c:	1447c83a 	sub	r3,r2,r17
10004a70:	28fff90e 	bge	r5,r3,10004a58 <__alt_data_end+0xf8004a58>
10004a74:	3809883a 	mov	r4,r7
10004a78:	01840074 	movhi	r6,4097
10004a7c:	9c000417 	ldw	r16,16(r19)
10004a80:	31bb4004 	addi	r6,r6,-4864
10004a84:	32000204 	addi	r8,r6,8
10004a88:	82013426 	beq	r16,r8,10004f5c <_malloc_r+0x5b4>
10004a8c:	80c00117 	ldw	r3,4(r16)
10004a90:	00bfff04 	movi	r2,-4
10004a94:	188e703a 	and	r7,r3,r2
10004a98:	3c45c83a 	sub	r2,r7,r17
10004a9c:	00c003c4 	movi	r3,15
10004aa0:	18811f16 	blt	r3,r2,10004f20 <_malloc_r+0x578>
10004aa4:	32000515 	stw	r8,20(r6)
10004aa8:	32000415 	stw	r8,16(r6)
10004aac:	10007f0e 	bge	r2,zero,10004cac <_malloc_r+0x304>
10004ab0:	00807fc4 	movi	r2,511
10004ab4:	11c0fd36 	bltu	r2,r7,10004eac <_malloc_r+0x504>
10004ab8:	3806d0fa 	srli	r3,r7,3
10004abc:	01c00044 	movi	r7,1
10004ac0:	30800117 	ldw	r2,4(r6)
10004ac4:	19400044 	addi	r5,r3,1
10004ac8:	294b883a 	add	r5,r5,r5
10004acc:	1807d0ba 	srai	r3,r3,2
10004ad0:	294b883a 	add	r5,r5,r5
10004ad4:	294b883a 	add	r5,r5,r5
10004ad8:	298b883a 	add	r5,r5,r6
10004adc:	38c6983a 	sll	r3,r7,r3
10004ae0:	29c00017 	ldw	r7,0(r5)
10004ae4:	2a7ffe04 	addi	r9,r5,-8
10004ae8:	1886b03a 	or	r3,r3,r2
10004aec:	82400315 	stw	r9,12(r16)
10004af0:	81c00215 	stw	r7,8(r16)
10004af4:	30c00115 	stw	r3,4(r6)
10004af8:	2c000015 	stw	r16,0(r5)
10004afc:	3c000315 	stw	r16,12(r7)
10004b00:	2005d0ba 	srai	r2,r4,2
10004b04:	01400044 	movi	r5,1
10004b08:	288a983a 	sll	r5,r5,r2
10004b0c:	19406f36 	bltu	r3,r5,10004ccc <_malloc_r+0x324>
10004b10:	28c4703a 	and	r2,r5,r3
10004b14:	10000a1e 	bne	r2,zero,10004b40 <_malloc_r+0x198>
10004b18:	00bfff04 	movi	r2,-4
10004b1c:	294b883a 	add	r5,r5,r5
10004b20:	2088703a 	and	r4,r4,r2
10004b24:	28c4703a 	and	r2,r5,r3
10004b28:	21000104 	addi	r4,r4,4
10004b2c:	1000041e 	bne	r2,zero,10004b40 <_malloc_r+0x198>
10004b30:	294b883a 	add	r5,r5,r5
10004b34:	28c4703a 	and	r2,r5,r3
10004b38:	21000104 	addi	r4,r4,4
10004b3c:	103ffc26 	beq	r2,zero,10004b30 <__alt_data_end+0xf8004b30>
10004b40:	02bfff04 	movi	r10,-4
10004b44:	024003c4 	movi	r9,15
10004b48:	21800044 	addi	r6,r4,1
10004b4c:	318d883a 	add	r6,r6,r6
10004b50:	318d883a 	add	r6,r6,r6
10004b54:	318d883a 	add	r6,r6,r6
10004b58:	998d883a 	add	r6,r19,r6
10004b5c:	333ffe04 	addi	r12,r6,-8
10004b60:	2017883a 	mov	r11,r4
10004b64:	31800104 	addi	r6,r6,4
10004b68:	34000017 	ldw	r16,0(r6)
10004b6c:	31fffd04 	addi	r7,r6,-12
10004b70:	81c0041e 	bne	r16,r7,10004b84 <_malloc_r+0x1dc>
10004b74:	0000fb06 	br	10004f64 <_malloc_r+0x5bc>
10004b78:	1801030e 	bge	r3,zero,10004f88 <_malloc_r+0x5e0>
10004b7c:	84000317 	ldw	r16,12(r16)
10004b80:	81c0f826 	beq	r16,r7,10004f64 <_malloc_r+0x5bc>
10004b84:	80800117 	ldw	r2,4(r16)
10004b88:	1284703a 	and	r2,r2,r10
10004b8c:	1447c83a 	sub	r3,r2,r17
10004b90:	48fff90e 	bge	r9,r3,10004b78 <__alt_data_end+0xf8004b78>
10004b94:	80800317 	ldw	r2,12(r16)
10004b98:	81000217 	ldw	r4,8(r16)
10004b9c:	89400054 	ori	r5,r17,1
10004ba0:	81400115 	stw	r5,4(r16)
10004ba4:	20800315 	stw	r2,12(r4)
10004ba8:	11000215 	stw	r4,8(r2)
10004bac:	8463883a 	add	r17,r16,r17
10004bb0:	9c400515 	stw	r17,20(r19)
10004bb4:	9c400415 	stw	r17,16(r19)
10004bb8:	18800054 	ori	r2,r3,1
10004bbc:	88800115 	stw	r2,4(r17)
10004bc0:	8a000315 	stw	r8,12(r17)
10004bc4:	8a000215 	stw	r8,8(r17)
10004bc8:	88e3883a 	add	r17,r17,r3
10004bcc:	88c00015 	stw	r3,0(r17)
10004bd0:	9009883a 	mov	r4,r18
10004bd4:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004bd8:	80800204 	addi	r2,r16,8
10004bdc:	00001b06 	br	10004c4c <_malloc_r+0x2a4>
10004be0:	04400404 	movi	r17,16
10004be4:	89402536 	bltu	r17,r5,10004c7c <_malloc_r+0x2d4>
10004be8:	000bf7c0 	call	1000bf7c <__malloc_lock>
10004bec:	00800184 	movi	r2,6
10004bf0:	01000084 	movi	r4,2
10004bf4:	04c40074 	movhi	r19,4097
10004bf8:	1085883a 	add	r2,r2,r2
10004bfc:	9cfb4004 	addi	r19,r19,-4864
10004c00:	1085883a 	add	r2,r2,r2
10004c04:	9885883a 	add	r2,r19,r2
10004c08:	14000117 	ldw	r16,4(r2)
10004c0c:	10fffe04 	addi	r3,r2,-8
10004c10:	80c0d926 	beq	r16,r3,10004f78 <_malloc_r+0x5d0>
10004c14:	80c00117 	ldw	r3,4(r16)
10004c18:	81000317 	ldw	r4,12(r16)
10004c1c:	00bfff04 	movi	r2,-4
10004c20:	1884703a 	and	r2,r3,r2
10004c24:	81400217 	ldw	r5,8(r16)
10004c28:	8085883a 	add	r2,r16,r2
10004c2c:	10c00117 	ldw	r3,4(r2)
10004c30:	29000315 	stw	r4,12(r5)
10004c34:	21400215 	stw	r5,8(r4)
10004c38:	18c00054 	ori	r3,r3,1
10004c3c:	10c00115 	stw	r3,4(r2)
10004c40:	9009883a 	mov	r4,r18
10004c44:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004c48:	80800204 	addi	r2,r16,8
10004c4c:	dfc00a17 	ldw	ra,40(sp)
10004c50:	df000917 	ldw	fp,36(sp)
10004c54:	ddc00817 	ldw	r23,32(sp)
10004c58:	dd800717 	ldw	r22,28(sp)
10004c5c:	dd400617 	ldw	r21,24(sp)
10004c60:	dd000517 	ldw	r20,20(sp)
10004c64:	dcc00417 	ldw	r19,16(sp)
10004c68:	dc800317 	ldw	r18,12(sp)
10004c6c:	dc400217 	ldw	r17,8(sp)
10004c70:	dc000117 	ldw	r16,4(sp)
10004c74:	dec00b04 	addi	sp,sp,44
10004c78:	f800283a 	ret
10004c7c:	00800304 	movi	r2,12
10004c80:	90800015 	stw	r2,0(r18)
10004c84:	0005883a 	mov	r2,zero
10004c88:	003ff006 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004c8c:	01002004 	movi	r4,128
10004c90:	02001004 	movi	r8,64
10004c94:	01c00fc4 	movi	r7,63
10004c98:	003f6106 	br	10004a20 <__alt_data_end+0xf8004a20>
10004c9c:	4009883a 	mov	r4,r8
10004ca0:	003f7506 	br	10004a78 <__alt_data_end+0xf8004a78>
10004ca4:	81000317 	ldw	r4,12(r16)
10004ca8:	003fde06 	br	10004c24 <__alt_data_end+0xf8004c24>
10004cac:	81c5883a 	add	r2,r16,r7
10004cb0:	11400117 	ldw	r5,4(r2)
10004cb4:	9009883a 	mov	r4,r18
10004cb8:	29400054 	ori	r5,r5,1
10004cbc:	11400115 	stw	r5,4(r2)
10004cc0:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004cc4:	80800204 	addi	r2,r16,8
10004cc8:	003fe006 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004ccc:	9c000217 	ldw	r16,8(r19)
10004cd0:	00bfff04 	movi	r2,-4
10004cd4:	85800117 	ldw	r22,4(r16)
10004cd8:	b0ac703a 	and	r22,r22,r2
10004cdc:	b4400336 	bltu	r22,r17,10004cec <_malloc_r+0x344>
10004ce0:	b445c83a 	sub	r2,r22,r17
10004ce4:	00c003c4 	movi	r3,15
10004ce8:	18805d16 	blt	r3,r2,10004e60 <_malloc_r+0x4b8>
10004cec:	05c40074 	movhi	r23,4097
10004cf0:	00840074 	movhi	r2,4097
10004cf4:	1088ac04 	addi	r2,r2,8880
10004cf8:	bdc0ca04 	addi	r23,r23,808
10004cfc:	15400017 	ldw	r21,0(r2)
10004d00:	b8c00017 	ldw	r3,0(r23)
10004d04:	00bfffc4 	movi	r2,-1
10004d08:	858d883a 	add	r6,r16,r22
10004d0c:	8d6b883a 	add	r21,r17,r21
10004d10:	1880ea26 	beq	r3,r2,100050bc <_malloc_r+0x714>
10004d14:	ad4403c4 	addi	r21,r21,4111
10004d18:	00bc0004 	movi	r2,-4096
10004d1c:	a8aa703a 	and	r21,r21,r2
10004d20:	a80b883a 	mov	r5,r21
10004d24:	9009883a 	mov	r4,r18
10004d28:	d9800015 	stw	r6,0(sp)
10004d2c:	000650c0 	call	1000650c <_sbrk_r>
10004d30:	1029883a 	mov	r20,r2
10004d34:	00bfffc4 	movi	r2,-1
10004d38:	d9800017 	ldw	r6,0(sp)
10004d3c:	a080e826 	beq	r20,r2,100050e0 <_malloc_r+0x738>
10004d40:	a180a636 	bltu	r20,r6,10004fdc <_malloc_r+0x634>
10004d44:	07040074 	movhi	fp,4097
10004d48:	e708b504 	addi	fp,fp,8916
10004d4c:	e0800017 	ldw	r2,0(fp)
10004d50:	a887883a 	add	r3,r21,r2
10004d54:	e0c00015 	stw	r3,0(fp)
10004d58:	3500e626 	beq	r6,r20,100050f4 <_malloc_r+0x74c>
10004d5c:	b9000017 	ldw	r4,0(r23)
10004d60:	00bfffc4 	movi	r2,-1
10004d64:	2080ee26 	beq	r4,r2,10005120 <_malloc_r+0x778>
10004d68:	a185c83a 	sub	r2,r20,r6
10004d6c:	10c5883a 	add	r2,r2,r3
10004d70:	e0800015 	stw	r2,0(fp)
10004d74:	a0c001cc 	andi	r3,r20,7
10004d78:	1800bc26 	beq	r3,zero,1000506c <_malloc_r+0x6c4>
10004d7c:	a0e9c83a 	sub	r20,r20,r3
10004d80:	00840204 	movi	r2,4104
10004d84:	a5000204 	addi	r20,r20,8
10004d88:	10c7c83a 	sub	r3,r2,r3
10004d8c:	a545883a 	add	r2,r20,r21
10004d90:	1083ffcc 	andi	r2,r2,4095
10004d94:	18abc83a 	sub	r21,r3,r2
10004d98:	a80b883a 	mov	r5,r21
10004d9c:	9009883a 	mov	r4,r18
10004da0:	000650c0 	call	1000650c <_sbrk_r>
10004da4:	00ffffc4 	movi	r3,-1
10004da8:	10c0e126 	beq	r2,r3,10005130 <_malloc_r+0x788>
10004dac:	1505c83a 	sub	r2,r2,r20
10004db0:	1545883a 	add	r2,r2,r21
10004db4:	10800054 	ori	r2,r2,1
10004db8:	e0c00017 	ldw	r3,0(fp)
10004dbc:	9d000215 	stw	r20,8(r19)
10004dc0:	a0800115 	stw	r2,4(r20)
10004dc4:	a8c7883a 	add	r3,r21,r3
10004dc8:	e0c00015 	stw	r3,0(fp)
10004dcc:	84c00e26 	beq	r16,r19,10004e08 <_malloc_r+0x460>
10004dd0:	018003c4 	movi	r6,15
10004dd4:	3580a72e 	bgeu	r6,r22,10005074 <_malloc_r+0x6cc>
10004dd8:	81400117 	ldw	r5,4(r16)
10004ddc:	013ffe04 	movi	r4,-8
10004de0:	b0bffd04 	addi	r2,r22,-12
10004de4:	1104703a 	and	r2,r2,r4
10004de8:	2900004c 	andi	r4,r5,1
10004dec:	2088b03a 	or	r4,r4,r2
10004df0:	81000115 	stw	r4,4(r16)
10004df4:	01400144 	movi	r5,5
10004df8:	8089883a 	add	r4,r16,r2
10004dfc:	21400115 	stw	r5,4(r4)
10004e00:	21400215 	stw	r5,8(r4)
10004e04:	3080cd36 	bltu	r6,r2,1000513c <_malloc_r+0x794>
10004e08:	00840074 	movhi	r2,4097
10004e0c:	1088ab04 	addi	r2,r2,8876
10004e10:	11000017 	ldw	r4,0(r2)
10004e14:	20c0012e 	bgeu	r4,r3,10004e1c <_malloc_r+0x474>
10004e18:	10c00015 	stw	r3,0(r2)
10004e1c:	00840074 	movhi	r2,4097
10004e20:	1088aa04 	addi	r2,r2,8872
10004e24:	11000017 	ldw	r4,0(r2)
10004e28:	9c000217 	ldw	r16,8(r19)
10004e2c:	20c0012e 	bgeu	r4,r3,10004e34 <_malloc_r+0x48c>
10004e30:	10c00015 	stw	r3,0(r2)
10004e34:	80c00117 	ldw	r3,4(r16)
10004e38:	00bfff04 	movi	r2,-4
10004e3c:	1886703a 	and	r3,r3,r2
10004e40:	1c45c83a 	sub	r2,r3,r17
10004e44:	1c400236 	bltu	r3,r17,10004e50 <_malloc_r+0x4a8>
10004e48:	00c003c4 	movi	r3,15
10004e4c:	18800416 	blt	r3,r2,10004e60 <_malloc_r+0x4b8>
10004e50:	9009883a 	mov	r4,r18
10004e54:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004e58:	0005883a 	mov	r2,zero
10004e5c:	003f7b06 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004e60:	88c00054 	ori	r3,r17,1
10004e64:	80c00115 	stw	r3,4(r16)
10004e68:	8463883a 	add	r17,r16,r17
10004e6c:	10800054 	ori	r2,r2,1
10004e70:	9c400215 	stw	r17,8(r19)
10004e74:	88800115 	stw	r2,4(r17)
10004e78:	9009883a 	mov	r4,r18
10004e7c:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004e80:	80800204 	addi	r2,r16,8
10004e84:	003f7106 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004e88:	00c00504 	movi	r3,20
10004e8c:	18804a2e 	bgeu	r3,r2,10004fb8 <_malloc_r+0x610>
10004e90:	00c01504 	movi	r3,84
10004e94:	18806e36 	bltu	r3,r2,10005050 <_malloc_r+0x6a8>
10004e98:	8804d33a 	srli	r2,r17,12
10004e9c:	12001bc4 	addi	r8,r2,111
10004ea0:	11c01b84 	addi	r7,r2,110
10004ea4:	4209883a 	add	r4,r8,r8
10004ea8:	003edd06 	br	10004a20 <__alt_data_end+0xf8004a20>
10004eac:	3804d27a 	srli	r2,r7,9
10004eb0:	00c00104 	movi	r3,4
10004eb4:	1880442e 	bgeu	r3,r2,10004fc8 <_malloc_r+0x620>
10004eb8:	00c00504 	movi	r3,20
10004ebc:	18808136 	bltu	r3,r2,100050c4 <_malloc_r+0x71c>
10004ec0:	11401704 	addi	r5,r2,92
10004ec4:	10c016c4 	addi	r3,r2,91
10004ec8:	294b883a 	add	r5,r5,r5
10004ecc:	294b883a 	add	r5,r5,r5
10004ed0:	294b883a 	add	r5,r5,r5
10004ed4:	994b883a 	add	r5,r19,r5
10004ed8:	28800017 	ldw	r2,0(r5)
10004edc:	01840074 	movhi	r6,4097
10004ee0:	297ffe04 	addi	r5,r5,-8
10004ee4:	31bb4004 	addi	r6,r6,-4864
10004ee8:	28806526 	beq	r5,r2,10005080 <_malloc_r+0x6d8>
10004eec:	01bfff04 	movi	r6,-4
10004ef0:	10c00117 	ldw	r3,4(r2)
10004ef4:	1986703a 	and	r3,r3,r6
10004ef8:	38c0022e 	bgeu	r7,r3,10004f04 <_malloc_r+0x55c>
10004efc:	10800217 	ldw	r2,8(r2)
10004f00:	28bffb1e 	bne	r5,r2,10004ef0 <__alt_data_end+0xf8004ef0>
10004f04:	11400317 	ldw	r5,12(r2)
10004f08:	98c00117 	ldw	r3,4(r19)
10004f0c:	81400315 	stw	r5,12(r16)
10004f10:	80800215 	stw	r2,8(r16)
10004f14:	2c000215 	stw	r16,8(r5)
10004f18:	14000315 	stw	r16,12(r2)
10004f1c:	003ef806 	br	10004b00 <__alt_data_end+0xf8004b00>
10004f20:	88c00054 	ori	r3,r17,1
10004f24:	80c00115 	stw	r3,4(r16)
10004f28:	8463883a 	add	r17,r16,r17
10004f2c:	34400515 	stw	r17,20(r6)
10004f30:	34400415 	stw	r17,16(r6)
10004f34:	10c00054 	ori	r3,r2,1
10004f38:	8a000315 	stw	r8,12(r17)
10004f3c:	8a000215 	stw	r8,8(r17)
10004f40:	88c00115 	stw	r3,4(r17)
10004f44:	88a3883a 	add	r17,r17,r2
10004f48:	88800015 	stw	r2,0(r17)
10004f4c:	9009883a 	mov	r4,r18
10004f50:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004f54:	80800204 	addi	r2,r16,8
10004f58:	003f3c06 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004f5c:	30c00117 	ldw	r3,4(r6)
10004f60:	003ee706 	br	10004b00 <__alt_data_end+0xf8004b00>
10004f64:	5ac00044 	addi	r11,r11,1
10004f68:	588000cc 	andi	r2,r11,3
10004f6c:	31800204 	addi	r6,r6,8
10004f70:	103efd1e 	bne	r2,zero,10004b68 <__alt_data_end+0xf8004b68>
10004f74:	00002406 	br	10005008 <_malloc_r+0x660>
10004f78:	14000317 	ldw	r16,12(r2)
10004f7c:	143f251e 	bne	r2,r16,10004c14 <__alt_data_end+0xf8004c14>
10004f80:	21000084 	addi	r4,r4,2
10004f84:	003ebc06 	br	10004a78 <__alt_data_end+0xf8004a78>
10004f88:	8085883a 	add	r2,r16,r2
10004f8c:	10c00117 	ldw	r3,4(r2)
10004f90:	81000317 	ldw	r4,12(r16)
10004f94:	81400217 	ldw	r5,8(r16)
10004f98:	18c00054 	ori	r3,r3,1
10004f9c:	10c00115 	stw	r3,4(r2)
10004fa0:	29000315 	stw	r4,12(r5)
10004fa4:	21400215 	stw	r5,8(r4)
10004fa8:	9009883a 	mov	r4,r18
10004fac:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10004fb0:	80800204 	addi	r2,r16,8
10004fb4:	003f2506 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004fb8:	12001704 	addi	r8,r2,92
10004fbc:	11c016c4 	addi	r7,r2,91
10004fc0:	4209883a 	add	r4,r8,r8
10004fc4:	003e9606 	br	10004a20 <__alt_data_end+0xf8004a20>
10004fc8:	3804d1ba 	srli	r2,r7,6
10004fcc:	11400e44 	addi	r5,r2,57
10004fd0:	10c00e04 	addi	r3,r2,56
10004fd4:	294b883a 	add	r5,r5,r5
10004fd8:	003fbc06 	br	10004ecc <__alt_data_end+0xf8004ecc>
10004fdc:	84ff5926 	beq	r16,r19,10004d44 <__alt_data_end+0xf8004d44>
10004fe0:	00840074 	movhi	r2,4097
10004fe4:	10bb4004 	addi	r2,r2,-4864
10004fe8:	14000217 	ldw	r16,8(r2)
10004fec:	00bfff04 	movi	r2,-4
10004ff0:	80c00117 	ldw	r3,4(r16)
10004ff4:	1886703a 	and	r3,r3,r2
10004ff8:	003f9106 	br	10004e40 <__alt_data_end+0xf8004e40>
10004ffc:	60800217 	ldw	r2,8(r12)
10005000:	213fffc4 	addi	r4,r4,-1
10005004:	1300651e 	bne	r2,r12,1000519c <_malloc_r+0x7f4>
10005008:	208000cc 	andi	r2,r4,3
1000500c:	633ffe04 	addi	r12,r12,-8
10005010:	103ffa1e 	bne	r2,zero,10004ffc <__alt_data_end+0xf8004ffc>
10005014:	98800117 	ldw	r2,4(r19)
10005018:	0146303a 	nor	r3,zero,r5
1000501c:	1884703a 	and	r2,r3,r2
10005020:	98800115 	stw	r2,4(r19)
10005024:	294b883a 	add	r5,r5,r5
10005028:	117f2836 	bltu	r2,r5,10004ccc <__alt_data_end+0xf8004ccc>
1000502c:	283f2726 	beq	r5,zero,10004ccc <__alt_data_end+0xf8004ccc>
10005030:	2886703a 	and	r3,r5,r2
10005034:	5809883a 	mov	r4,r11
10005038:	183ec31e 	bne	r3,zero,10004b48 <__alt_data_end+0xf8004b48>
1000503c:	294b883a 	add	r5,r5,r5
10005040:	2886703a 	and	r3,r5,r2
10005044:	21000104 	addi	r4,r4,4
10005048:	183ffc26 	beq	r3,zero,1000503c <__alt_data_end+0xf800503c>
1000504c:	003ebe06 	br	10004b48 <__alt_data_end+0xf8004b48>
10005050:	00c05504 	movi	r3,340
10005054:	18801236 	bltu	r3,r2,100050a0 <_malloc_r+0x6f8>
10005058:	8804d3fa 	srli	r2,r17,15
1000505c:	12001e04 	addi	r8,r2,120
10005060:	11c01dc4 	addi	r7,r2,119
10005064:	4209883a 	add	r4,r8,r8
10005068:	003e6d06 	br	10004a20 <__alt_data_end+0xf8004a20>
1000506c:	00c40004 	movi	r3,4096
10005070:	003f4606 	br	10004d8c <__alt_data_end+0xf8004d8c>
10005074:	00800044 	movi	r2,1
10005078:	a0800115 	stw	r2,4(r20)
1000507c:	003f7406 	br	10004e50 <__alt_data_end+0xf8004e50>
10005080:	1805d0ba 	srai	r2,r3,2
10005084:	01c00044 	movi	r7,1
10005088:	30c00117 	ldw	r3,4(r6)
1000508c:	388e983a 	sll	r7,r7,r2
10005090:	2805883a 	mov	r2,r5
10005094:	38c6b03a 	or	r3,r7,r3
10005098:	30c00115 	stw	r3,4(r6)
1000509c:	003f9b06 	br	10004f0c <__alt_data_end+0xf8004f0c>
100050a0:	00c15504 	movi	r3,1364
100050a4:	18801a36 	bltu	r3,r2,10005110 <_malloc_r+0x768>
100050a8:	8804d4ba 	srli	r2,r17,18
100050ac:	12001f44 	addi	r8,r2,125
100050b0:	11c01f04 	addi	r7,r2,124
100050b4:	4209883a 	add	r4,r8,r8
100050b8:	003e5906 	br	10004a20 <__alt_data_end+0xf8004a20>
100050bc:	ad400404 	addi	r21,r21,16
100050c0:	003f1706 	br	10004d20 <__alt_data_end+0xf8004d20>
100050c4:	00c01504 	movi	r3,84
100050c8:	18802336 	bltu	r3,r2,10005158 <_malloc_r+0x7b0>
100050cc:	3804d33a 	srli	r2,r7,12
100050d0:	11401bc4 	addi	r5,r2,111
100050d4:	10c01b84 	addi	r3,r2,110
100050d8:	294b883a 	add	r5,r5,r5
100050dc:	003f7b06 	br	10004ecc <__alt_data_end+0xf8004ecc>
100050e0:	9c000217 	ldw	r16,8(r19)
100050e4:	00bfff04 	movi	r2,-4
100050e8:	80c00117 	ldw	r3,4(r16)
100050ec:	1886703a 	and	r3,r3,r2
100050f0:	003f5306 	br	10004e40 <__alt_data_end+0xf8004e40>
100050f4:	3083ffcc 	andi	r2,r6,4095
100050f8:	103f181e 	bne	r2,zero,10004d5c <__alt_data_end+0xf8004d5c>
100050fc:	99000217 	ldw	r4,8(r19)
10005100:	b545883a 	add	r2,r22,r21
10005104:	10800054 	ori	r2,r2,1
10005108:	20800115 	stw	r2,4(r4)
1000510c:	003f3e06 	br	10004e08 <__alt_data_end+0xf8004e08>
10005110:	01003f84 	movi	r4,254
10005114:	02001fc4 	movi	r8,127
10005118:	01c01f84 	movi	r7,126
1000511c:	003e4006 	br	10004a20 <__alt_data_end+0xf8004a20>
10005120:	00840074 	movhi	r2,4097
10005124:	1080ca04 	addi	r2,r2,808
10005128:	15000015 	stw	r20,0(r2)
1000512c:	003f1106 	br	10004d74 <__alt_data_end+0xf8004d74>
10005130:	00800044 	movi	r2,1
10005134:	002b883a 	mov	r21,zero
10005138:	003f1f06 	br	10004db8 <__alt_data_end+0xf8004db8>
1000513c:	81400204 	addi	r5,r16,8
10005140:	9009883a 	mov	r4,r18
10005144:	0007dac0 	call	10007dac <_free_r>
10005148:	00840074 	movhi	r2,4097
1000514c:	1088b504 	addi	r2,r2,8916
10005150:	10c00017 	ldw	r3,0(r2)
10005154:	003f2c06 	br	10004e08 <__alt_data_end+0xf8004e08>
10005158:	00c05504 	movi	r3,340
1000515c:	18800536 	bltu	r3,r2,10005174 <_malloc_r+0x7cc>
10005160:	3804d3fa 	srli	r2,r7,15
10005164:	11401e04 	addi	r5,r2,120
10005168:	10c01dc4 	addi	r3,r2,119
1000516c:	294b883a 	add	r5,r5,r5
10005170:	003f5606 	br	10004ecc <__alt_data_end+0xf8004ecc>
10005174:	00c15504 	movi	r3,1364
10005178:	18800536 	bltu	r3,r2,10005190 <_malloc_r+0x7e8>
1000517c:	3804d4ba 	srli	r2,r7,18
10005180:	11401f44 	addi	r5,r2,125
10005184:	10c01f04 	addi	r3,r2,124
10005188:	294b883a 	add	r5,r5,r5
1000518c:	003f4f06 	br	10004ecc <__alt_data_end+0xf8004ecc>
10005190:	01403f84 	movi	r5,254
10005194:	00c01f84 	movi	r3,126
10005198:	003f4c06 	br	10004ecc <__alt_data_end+0xf8004ecc>
1000519c:	98800117 	ldw	r2,4(r19)
100051a0:	003fa006 	br	10005024 <__alt_data_end+0xf8005024>
100051a4:	8808d0fa 	srli	r4,r17,3
100051a8:	20800044 	addi	r2,r4,1
100051ac:	1085883a 	add	r2,r2,r2
100051b0:	003e9006 	br	10004bf4 <__alt_data_end+0xf8004bf4>

100051b4 <memchr>:
100051b4:	208000cc 	andi	r2,r4,3
100051b8:	280f883a 	mov	r7,r5
100051bc:	10003426 	beq	r2,zero,10005290 <memchr+0xdc>
100051c0:	30bfffc4 	addi	r2,r6,-1
100051c4:	30001a26 	beq	r6,zero,10005230 <memchr+0x7c>
100051c8:	20c00003 	ldbu	r3,0(r4)
100051cc:	29803fcc 	andi	r6,r5,255
100051d0:	30c0051e 	bne	r6,r3,100051e8 <memchr+0x34>
100051d4:	00001806 	br	10005238 <memchr+0x84>
100051d8:	10001526 	beq	r2,zero,10005230 <memchr+0x7c>
100051dc:	20c00003 	ldbu	r3,0(r4)
100051e0:	10bfffc4 	addi	r2,r2,-1
100051e4:	30c01426 	beq	r6,r3,10005238 <memchr+0x84>
100051e8:	21000044 	addi	r4,r4,1
100051ec:	20c000cc 	andi	r3,r4,3
100051f0:	183ff91e 	bne	r3,zero,100051d8 <__alt_data_end+0xf80051d8>
100051f4:	020000c4 	movi	r8,3
100051f8:	40801136 	bltu	r8,r2,10005240 <memchr+0x8c>
100051fc:	10000c26 	beq	r2,zero,10005230 <memchr+0x7c>
10005200:	20c00003 	ldbu	r3,0(r4)
10005204:	29403fcc 	andi	r5,r5,255
10005208:	28c00b26 	beq	r5,r3,10005238 <memchr+0x84>
1000520c:	20c00044 	addi	r3,r4,1
10005210:	39803fcc 	andi	r6,r7,255
10005214:	2089883a 	add	r4,r4,r2
10005218:	00000306 	br	10005228 <memchr+0x74>
1000521c:	18c00044 	addi	r3,r3,1
10005220:	197fffc3 	ldbu	r5,-1(r3)
10005224:	31400526 	beq	r6,r5,1000523c <memchr+0x88>
10005228:	1805883a 	mov	r2,r3
1000522c:	20fffb1e 	bne	r4,r3,1000521c <__alt_data_end+0xf800521c>
10005230:	0005883a 	mov	r2,zero
10005234:	f800283a 	ret
10005238:	2005883a 	mov	r2,r4
1000523c:	f800283a 	ret
10005240:	28c03fcc 	andi	r3,r5,255
10005244:	1812923a 	slli	r9,r3,8
10005248:	02ffbff4 	movhi	r11,65279
1000524c:	02a02074 	movhi	r10,32897
10005250:	48d2b03a 	or	r9,r9,r3
10005254:	4806943a 	slli	r3,r9,16
10005258:	5affbfc4 	addi	r11,r11,-257
1000525c:	52a02004 	addi	r10,r10,-32640
10005260:	48d2b03a 	or	r9,r9,r3
10005264:	20c00017 	ldw	r3,0(r4)
10005268:	48c6f03a 	xor	r3,r9,r3
1000526c:	1acd883a 	add	r6,r3,r11
10005270:	00c6303a 	nor	r3,zero,r3
10005274:	30c6703a 	and	r3,r6,r3
10005278:	1a86703a 	and	r3,r3,r10
1000527c:	183fe01e 	bne	r3,zero,10005200 <__alt_data_end+0xf8005200>
10005280:	10bfff04 	addi	r2,r2,-4
10005284:	21000104 	addi	r4,r4,4
10005288:	40bff636 	bltu	r8,r2,10005264 <__alt_data_end+0xf8005264>
1000528c:	003fdb06 	br	100051fc <__alt_data_end+0xf80051fc>
10005290:	3005883a 	mov	r2,r6
10005294:	003fd706 	br	100051f4 <__alt_data_end+0xf80051f4>

10005298 <memcpy>:
10005298:	defffd04 	addi	sp,sp,-12
1000529c:	dfc00215 	stw	ra,8(sp)
100052a0:	dc400115 	stw	r17,4(sp)
100052a4:	dc000015 	stw	r16,0(sp)
100052a8:	00c003c4 	movi	r3,15
100052ac:	2005883a 	mov	r2,r4
100052b0:	1980452e 	bgeu	r3,r6,100053c8 <memcpy+0x130>
100052b4:	2906b03a 	or	r3,r5,r4
100052b8:	18c000cc 	andi	r3,r3,3
100052bc:	1800441e 	bne	r3,zero,100053d0 <memcpy+0x138>
100052c0:	347ffc04 	addi	r17,r6,-16
100052c4:	8822d13a 	srli	r17,r17,4
100052c8:	28c00104 	addi	r3,r5,4
100052cc:	23400104 	addi	r13,r4,4
100052d0:	8820913a 	slli	r16,r17,4
100052d4:	2b000204 	addi	r12,r5,8
100052d8:	22c00204 	addi	r11,r4,8
100052dc:	84000504 	addi	r16,r16,20
100052e0:	2a800304 	addi	r10,r5,12
100052e4:	22400304 	addi	r9,r4,12
100052e8:	2c21883a 	add	r16,r5,r16
100052ec:	2811883a 	mov	r8,r5
100052f0:	200f883a 	mov	r7,r4
100052f4:	41000017 	ldw	r4,0(r8)
100052f8:	1fc00017 	ldw	ra,0(r3)
100052fc:	63c00017 	ldw	r15,0(r12)
10005300:	39000015 	stw	r4,0(r7)
10005304:	53800017 	ldw	r14,0(r10)
10005308:	6fc00015 	stw	ra,0(r13)
1000530c:	5bc00015 	stw	r15,0(r11)
10005310:	4b800015 	stw	r14,0(r9)
10005314:	18c00404 	addi	r3,r3,16
10005318:	39c00404 	addi	r7,r7,16
1000531c:	42000404 	addi	r8,r8,16
10005320:	6b400404 	addi	r13,r13,16
10005324:	63000404 	addi	r12,r12,16
10005328:	5ac00404 	addi	r11,r11,16
1000532c:	52800404 	addi	r10,r10,16
10005330:	4a400404 	addi	r9,r9,16
10005334:	1c3fef1e 	bne	r3,r16,100052f4 <__alt_data_end+0xf80052f4>
10005338:	89c00044 	addi	r7,r17,1
1000533c:	380e913a 	slli	r7,r7,4
10005340:	310003cc 	andi	r4,r6,15
10005344:	02c000c4 	movi	r11,3
10005348:	11c7883a 	add	r3,r2,r7
1000534c:	29cb883a 	add	r5,r5,r7
10005350:	5900212e 	bgeu	r11,r4,100053d8 <memcpy+0x140>
10005354:	1813883a 	mov	r9,r3
10005358:	2811883a 	mov	r8,r5
1000535c:	200f883a 	mov	r7,r4
10005360:	42800017 	ldw	r10,0(r8)
10005364:	4a400104 	addi	r9,r9,4
10005368:	39ffff04 	addi	r7,r7,-4
1000536c:	4abfff15 	stw	r10,-4(r9)
10005370:	42000104 	addi	r8,r8,4
10005374:	59fffa36 	bltu	r11,r7,10005360 <__alt_data_end+0xf8005360>
10005378:	213fff04 	addi	r4,r4,-4
1000537c:	2008d0ba 	srli	r4,r4,2
10005380:	318000cc 	andi	r6,r6,3
10005384:	21000044 	addi	r4,r4,1
10005388:	2109883a 	add	r4,r4,r4
1000538c:	2109883a 	add	r4,r4,r4
10005390:	1907883a 	add	r3,r3,r4
10005394:	290b883a 	add	r5,r5,r4
10005398:	30000626 	beq	r6,zero,100053b4 <memcpy+0x11c>
1000539c:	198d883a 	add	r6,r3,r6
100053a0:	29c00003 	ldbu	r7,0(r5)
100053a4:	18c00044 	addi	r3,r3,1
100053a8:	29400044 	addi	r5,r5,1
100053ac:	19ffffc5 	stb	r7,-1(r3)
100053b0:	19bffb1e 	bne	r3,r6,100053a0 <__alt_data_end+0xf80053a0>
100053b4:	dfc00217 	ldw	ra,8(sp)
100053b8:	dc400117 	ldw	r17,4(sp)
100053bc:	dc000017 	ldw	r16,0(sp)
100053c0:	dec00304 	addi	sp,sp,12
100053c4:	f800283a 	ret
100053c8:	2007883a 	mov	r3,r4
100053cc:	003ff206 	br	10005398 <__alt_data_end+0xf8005398>
100053d0:	2007883a 	mov	r3,r4
100053d4:	003ff106 	br	1000539c <__alt_data_end+0xf800539c>
100053d8:	200d883a 	mov	r6,r4
100053dc:	003fee06 	br	10005398 <__alt_data_end+0xf8005398>

100053e0 <_Balloc>:
100053e0:	20801317 	ldw	r2,76(r4)
100053e4:	defffc04 	addi	sp,sp,-16
100053e8:	dc400115 	stw	r17,4(sp)
100053ec:	dc000015 	stw	r16,0(sp)
100053f0:	dfc00315 	stw	ra,12(sp)
100053f4:	dc800215 	stw	r18,8(sp)
100053f8:	2023883a 	mov	r17,r4
100053fc:	2821883a 	mov	r16,r5
10005400:	10000f26 	beq	r2,zero,10005440 <_Balloc+0x60>
10005404:	8407883a 	add	r3,r16,r16
10005408:	18c7883a 	add	r3,r3,r3
1000540c:	10c7883a 	add	r3,r2,r3
10005410:	18800017 	ldw	r2,0(r3)
10005414:	10001126 	beq	r2,zero,1000545c <_Balloc+0x7c>
10005418:	11000017 	ldw	r4,0(r2)
1000541c:	19000015 	stw	r4,0(r3)
10005420:	10000415 	stw	zero,16(r2)
10005424:	10000315 	stw	zero,12(r2)
10005428:	dfc00317 	ldw	ra,12(sp)
1000542c:	dc800217 	ldw	r18,8(sp)
10005430:	dc400117 	ldw	r17,4(sp)
10005434:	dc000017 	ldw	r16,0(sp)
10005438:	dec00404 	addi	sp,sp,16
1000543c:	f800283a 	ret
10005440:	01800844 	movi	r6,33
10005444:	01400104 	movi	r5,4
10005448:	0007bac0 	call	10007bac <_calloc_r>
1000544c:	88801315 	stw	r2,76(r17)
10005450:	103fec1e 	bne	r2,zero,10005404 <__alt_data_end+0xf8005404>
10005454:	0005883a 	mov	r2,zero
10005458:	003ff306 	br	10005428 <__alt_data_end+0xf8005428>
1000545c:	01400044 	movi	r5,1
10005460:	2c24983a 	sll	r18,r5,r16
10005464:	8809883a 	mov	r4,r17
10005468:	91800144 	addi	r6,r18,5
1000546c:	318d883a 	add	r6,r6,r6
10005470:	318d883a 	add	r6,r6,r6
10005474:	0007bac0 	call	10007bac <_calloc_r>
10005478:	103ff626 	beq	r2,zero,10005454 <__alt_data_end+0xf8005454>
1000547c:	14000115 	stw	r16,4(r2)
10005480:	14800215 	stw	r18,8(r2)
10005484:	003fe606 	br	10005420 <__alt_data_end+0xf8005420>

10005488 <_Bfree>:
10005488:	28000826 	beq	r5,zero,100054ac <_Bfree+0x24>
1000548c:	28c00117 	ldw	r3,4(r5)
10005490:	20801317 	ldw	r2,76(r4)
10005494:	18c7883a 	add	r3,r3,r3
10005498:	18c7883a 	add	r3,r3,r3
1000549c:	10c5883a 	add	r2,r2,r3
100054a0:	10c00017 	ldw	r3,0(r2)
100054a4:	28c00015 	stw	r3,0(r5)
100054a8:	11400015 	stw	r5,0(r2)
100054ac:	f800283a 	ret

100054b0 <__multadd>:
100054b0:	defff704 	addi	sp,sp,-36
100054b4:	dc800215 	stw	r18,8(sp)
100054b8:	2c800417 	ldw	r18,16(r5)
100054bc:	dd800615 	stw	r22,24(sp)
100054c0:	dd400515 	stw	r21,20(sp)
100054c4:	dd000415 	stw	r20,16(sp)
100054c8:	dcc00315 	stw	r19,12(sp)
100054cc:	dc400115 	stw	r17,4(sp)
100054d0:	dc000015 	stw	r16,0(sp)
100054d4:	dfc00815 	stw	ra,32(sp)
100054d8:	ddc00715 	stw	r23,28(sp)
100054dc:	2827883a 	mov	r19,r5
100054e0:	2029883a 	mov	r20,r4
100054e4:	3023883a 	mov	r17,r6
100054e8:	3821883a 	mov	r16,r7
100054ec:	2d400504 	addi	r21,r5,20
100054f0:	002d883a 	mov	r22,zero
100054f4:	adc00017 	ldw	r23,0(r21)
100054f8:	880b883a 	mov	r5,r17
100054fc:	ad400104 	addi	r21,r21,4
10005500:	b93fffcc 	andi	r4,r23,65535
10005504:	0000b600 	call	10000b60 <__mulsi3>
10005508:	b808d43a 	srli	r4,r23,16
1000550c:	880b883a 	mov	r5,r17
10005510:	1421883a 	add	r16,r2,r16
10005514:	0000b600 	call	10000b60 <__mulsi3>
10005518:	800ed43a 	srli	r7,r16,16
1000551c:	80ffffcc 	andi	r3,r16,65535
10005520:	b5800044 	addi	r22,r22,1
10005524:	11c5883a 	add	r2,r2,r7
10005528:	100e943a 	slli	r7,r2,16
1000552c:	1020d43a 	srli	r16,r2,16
10005530:	38c7883a 	add	r3,r7,r3
10005534:	a8ffff15 	stw	r3,-4(r21)
10005538:	b4bfee16 	blt	r22,r18,100054f4 <__alt_data_end+0xf80054f4>
1000553c:	80000926 	beq	r16,zero,10005564 <__multadd+0xb4>
10005540:	98800217 	ldw	r2,8(r19)
10005544:	9080130e 	bge	r18,r2,10005594 <__multadd+0xe4>
10005548:	90800144 	addi	r2,r18,5
1000554c:	1085883a 	add	r2,r2,r2
10005550:	1085883a 	add	r2,r2,r2
10005554:	9885883a 	add	r2,r19,r2
10005558:	14000015 	stw	r16,0(r2)
1000555c:	94800044 	addi	r18,r18,1
10005560:	9c800415 	stw	r18,16(r19)
10005564:	9805883a 	mov	r2,r19
10005568:	dfc00817 	ldw	ra,32(sp)
1000556c:	ddc00717 	ldw	r23,28(sp)
10005570:	dd800617 	ldw	r22,24(sp)
10005574:	dd400517 	ldw	r21,20(sp)
10005578:	dd000417 	ldw	r20,16(sp)
1000557c:	dcc00317 	ldw	r19,12(sp)
10005580:	dc800217 	ldw	r18,8(sp)
10005584:	dc400117 	ldw	r17,4(sp)
10005588:	dc000017 	ldw	r16,0(sp)
1000558c:	dec00904 	addi	sp,sp,36
10005590:	f800283a 	ret
10005594:	99400117 	ldw	r5,4(r19)
10005598:	a009883a 	mov	r4,r20
1000559c:	29400044 	addi	r5,r5,1
100055a0:	00053e00 	call	100053e0 <_Balloc>
100055a4:	99800417 	ldw	r6,16(r19)
100055a8:	99400304 	addi	r5,r19,12
100055ac:	11000304 	addi	r4,r2,12
100055b0:	31800084 	addi	r6,r6,2
100055b4:	318d883a 	add	r6,r6,r6
100055b8:	318d883a 	add	r6,r6,r6
100055bc:	1023883a 	mov	r17,r2
100055c0:	00052980 	call	10005298 <memcpy>
100055c4:	98000a26 	beq	r19,zero,100055f0 <__multadd+0x140>
100055c8:	98c00117 	ldw	r3,4(r19)
100055cc:	a0801317 	ldw	r2,76(r20)
100055d0:	18c7883a 	add	r3,r3,r3
100055d4:	18c7883a 	add	r3,r3,r3
100055d8:	10c5883a 	add	r2,r2,r3
100055dc:	10c00017 	ldw	r3,0(r2)
100055e0:	98c00015 	stw	r3,0(r19)
100055e4:	14c00015 	stw	r19,0(r2)
100055e8:	8827883a 	mov	r19,r17
100055ec:	003fd606 	br	10005548 <__alt_data_end+0xf8005548>
100055f0:	8827883a 	mov	r19,r17
100055f4:	003fd406 	br	10005548 <__alt_data_end+0xf8005548>

100055f8 <__s2b>:
100055f8:	defff904 	addi	sp,sp,-28
100055fc:	dc400115 	stw	r17,4(sp)
10005600:	dc000015 	stw	r16,0(sp)
10005604:	2023883a 	mov	r17,r4
10005608:	2821883a 	mov	r16,r5
1000560c:	39000204 	addi	r4,r7,8
10005610:	01400244 	movi	r5,9
10005614:	dcc00315 	stw	r19,12(sp)
10005618:	dc800215 	stw	r18,8(sp)
1000561c:	dfc00615 	stw	ra,24(sp)
10005620:	dd400515 	stw	r21,20(sp)
10005624:	dd000415 	stw	r20,16(sp)
10005628:	3825883a 	mov	r18,r7
1000562c:	3027883a 	mov	r19,r6
10005630:	00009ac0 	call	100009ac <__divsi3>
10005634:	00c00044 	movi	r3,1
10005638:	000b883a 	mov	r5,zero
1000563c:	1880030e 	bge	r3,r2,1000564c <__s2b+0x54>
10005640:	18c7883a 	add	r3,r3,r3
10005644:	29400044 	addi	r5,r5,1
10005648:	18bffd16 	blt	r3,r2,10005640 <__alt_data_end+0xf8005640>
1000564c:	8809883a 	mov	r4,r17
10005650:	00053e00 	call	100053e0 <_Balloc>
10005654:	d8c00717 	ldw	r3,28(sp)
10005658:	10c00515 	stw	r3,20(r2)
1000565c:	00c00044 	movi	r3,1
10005660:	10c00415 	stw	r3,16(r2)
10005664:	00c00244 	movi	r3,9
10005668:	1cc0210e 	bge	r3,r19,100056f0 <__s2b+0xf8>
1000566c:	80eb883a 	add	r21,r16,r3
10005670:	a829883a 	mov	r20,r21
10005674:	84e1883a 	add	r16,r16,r19
10005678:	a1c00007 	ldb	r7,0(r20)
1000567c:	01800284 	movi	r6,10
10005680:	a5000044 	addi	r20,r20,1
10005684:	100b883a 	mov	r5,r2
10005688:	39fff404 	addi	r7,r7,-48
1000568c:	8809883a 	mov	r4,r17
10005690:	00054b00 	call	100054b0 <__multadd>
10005694:	a43ff81e 	bne	r20,r16,10005678 <__alt_data_end+0xf8005678>
10005698:	ace1883a 	add	r16,r21,r19
1000569c:	843ffe04 	addi	r16,r16,-8
100056a0:	9c800a0e 	bge	r19,r18,100056cc <__s2b+0xd4>
100056a4:	94e5c83a 	sub	r18,r18,r19
100056a8:	84a5883a 	add	r18,r16,r18
100056ac:	81c00007 	ldb	r7,0(r16)
100056b0:	01800284 	movi	r6,10
100056b4:	84000044 	addi	r16,r16,1
100056b8:	100b883a 	mov	r5,r2
100056bc:	39fff404 	addi	r7,r7,-48
100056c0:	8809883a 	mov	r4,r17
100056c4:	00054b00 	call	100054b0 <__multadd>
100056c8:	84bff81e 	bne	r16,r18,100056ac <__alt_data_end+0xf80056ac>
100056cc:	dfc00617 	ldw	ra,24(sp)
100056d0:	dd400517 	ldw	r21,20(sp)
100056d4:	dd000417 	ldw	r20,16(sp)
100056d8:	dcc00317 	ldw	r19,12(sp)
100056dc:	dc800217 	ldw	r18,8(sp)
100056e0:	dc400117 	ldw	r17,4(sp)
100056e4:	dc000017 	ldw	r16,0(sp)
100056e8:	dec00704 	addi	sp,sp,28
100056ec:	f800283a 	ret
100056f0:	84000284 	addi	r16,r16,10
100056f4:	1827883a 	mov	r19,r3
100056f8:	003fe906 	br	100056a0 <__alt_data_end+0xf80056a0>

100056fc <__hi0bits>:
100056fc:	20bfffec 	andhi	r2,r4,65535
10005700:	1000141e 	bne	r2,zero,10005754 <__hi0bits+0x58>
10005704:	2008943a 	slli	r4,r4,16
10005708:	00800404 	movi	r2,16
1000570c:	20ffc02c 	andhi	r3,r4,65280
10005710:	1800021e 	bne	r3,zero,1000571c <__hi0bits+0x20>
10005714:	2008923a 	slli	r4,r4,8
10005718:	10800204 	addi	r2,r2,8
1000571c:	20fc002c 	andhi	r3,r4,61440
10005720:	1800021e 	bne	r3,zero,1000572c <__hi0bits+0x30>
10005724:	2008913a 	slli	r4,r4,4
10005728:	10800104 	addi	r2,r2,4
1000572c:	20f0002c 	andhi	r3,r4,49152
10005730:	1800031e 	bne	r3,zero,10005740 <__hi0bits+0x44>
10005734:	2109883a 	add	r4,r4,r4
10005738:	10800084 	addi	r2,r2,2
1000573c:	2109883a 	add	r4,r4,r4
10005740:	20000316 	blt	r4,zero,10005750 <__hi0bits+0x54>
10005744:	2110002c 	andhi	r4,r4,16384
10005748:	2000041e 	bne	r4,zero,1000575c <__hi0bits+0x60>
1000574c:	00800804 	movi	r2,32
10005750:	f800283a 	ret
10005754:	0005883a 	mov	r2,zero
10005758:	003fec06 	br	1000570c <__alt_data_end+0xf800570c>
1000575c:	10800044 	addi	r2,r2,1
10005760:	f800283a 	ret

10005764 <__lo0bits>:
10005764:	20c00017 	ldw	r3,0(r4)
10005768:	188001cc 	andi	r2,r3,7
1000576c:	10000826 	beq	r2,zero,10005790 <__lo0bits+0x2c>
10005770:	1880004c 	andi	r2,r3,1
10005774:	1000211e 	bne	r2,zero,100057fc <__lo0bits+0x98>
10005778:	1880008c 	andi	r2,r3,2
1000577c:	1000211e 	bne	r2,zero,10005804 <__lo0bits+0xa0>
10005780:	1806d0ba 	srli	r3,r3,2
10005784:	00800084 	movi	r2,2
10005788:	20c00015 	stw	r3,0(r4)
1000578c:	f800283a 	ret
10005790:	18bfffcc 	andi	r2,r3,65535
10005794:	10001326 	beq	r2,zero,100057e4 <__lo0bits+0x80>
10005798:	0005883a 	mov	r2,zero
1000579c:	19403fcc 	andi	r5,r3,255
100057a0:	2800021e 	bne	r5,zero,100057ac <__lo0bits+0x48>
100057a4:	1806d23a 	srli	r3,r3,8
100057a8:	10800204 	addi	r2,r2,8
100057ac:	194003cc 	andi	r5,r3,15
100057b0:	2800021e 	bne	r5,zero,100057bc <__lo0bits+0x58>
100057b4:	1806d13a 	srli	r3,r3,4
100057b8:	10800104 	addi	r2,r2,4
100057bc:	194000cc 	andi	r5,r3,3
100057c0:	2800021e 	bne	r5,zero,100057cc <__lo0bits+0x68>
100057c4:	1806d0ba 	srli	r3,r3,2
100057c8:	10800084 	addi	r2,r2,2
100057cc:	1940004c 	andi	r5,r3,1
100057d0:	2800081e 	bne	r5,zero,100057f4 <__lo0bits+0x90>
100057d4:	1806d07a 	srli	r3,r3,1
100057d8:	1800051e 	bne	r3,zero,100057f0 <__lo0bits+0x8c>
100057dc:	00800804 	movi	r2,32
100057e0:	f800283a 	ret
100057e4:	1806d43a 	srli	r3,r3,16
100057e8:	00800404 	movi	r2,16
100057ec:	003feb06 	br	1000579c <__alt_data_end+0xf800579c>
100057f0:	10800044 	addi	r2,r2,1
100057f4:	20c00015 	stw	r3,0(r4)
100057f8:	f800283a 	ret
100057fc:	0005883a 	mov	r2,zero
10005800:	f800283a 	ret
10005804:	1806d07a 	srli	r3,r3,1
10005808:	00800044 	movi	r2,1
1000580c:	20c00015 	stw	r3,0(r4)
10005810:	f800283a 	ret

10005814 <__i2b>:
10005814:	defffd04 	addi	sp,sp,-12
10005818:	dc000015 	stw	r16,0(sp)
1000581c:	04000044 	movi	r16,1
10005820:	dc400115 	stw	r17,4(sp)
10005824:	2823883a 	mov	r17,r5
10005828:	800b883a 	mov	r5,r16
1000582c:	dfc00215 	stw	ra,8(sp)
10005830:	00053e00 	call	100053e0 <_Balloc>
10005834:	14400515 	stw	r17,20(r2)
10005838:	14000415 	stw	r16,16(r2)
1000583c:	dfc00217 	ldw	ra,8(sp)
10005840:	dc400117 	ldw	r17,4(sp)
10005844:	dc000017 	ldw	r16,0(sp)
10005848:	dec00304 	addi	sp,sp,12
1000584c:	f800283a 	ret

10005850 <__multiply>:
10005850:	deffef04 	addi	sp,sp,-68
10005854:	dc400815 	stw	r17,32(sp)
10005858:	dc000715 	stw	r16,28(sp)
1000585c:	34400417 	ldw	r17,16(r6)
10005860:	2c000417 	ldw	r16,16(r5)
10005864:	dd800d15 	stw	r22,52(sp)
10005868:	dc800915 	stw	r18,36(sp)
1000586c:	dfc01015 	stw	ra,64(sp)
10005870:	df000f15 	stw	fp,60(sp)
10005874:	ddc00e15 	stw	r23,56(sp)
10005878:	dd400c15 	stw	r21,48(sp)
1000587c:	dd000b15 	stw	r20,44(sp)
10005880:	dcc00a15 	stw	r19,40(sp)
10005884:	2825883a 	mov	r18,r5
10005888:	302d883a 	mov	r22,r6
1000588c:	8440050e 	bge	r16,r17,100058a4 <__multiply+0x54>
10005890:	8007883a 	mov	r3,r16
10005894:	3025883a 	mov	r18,r6
10005898:	8821883a 	mov	r16,r17
1000589c:	282d883a 	mov	r22,r5
100058a0:	1823883a 	mov	r17,r3
100058a4:	90800217 	ldw	r2,8(r18)
100058a8:	8447883a 	add	r3,r16,r17
100058ac:	d8c00215 	stw	r3,8(sp)
100058b0:	91400117 	ldw	r5,4(r18)
100058b4:	10c0010e 	bge	r2,r3,100058bc <__multiply+0x6c>
100058b8:	29400044 	addi	r5,r5,1
100058bc:	00053e00 	call	100053e0 <_Balloc>
100058c0:	d8c00217 	ldw	r3,8(sp)
100058c4:	d8800615 	stw	r2,24(sp)
100058c8:	18eb883a 	add	r21,r3,r3
100058cc:	ad6b883a 	add	r21,r21,r21
100058d0:	10c00504 	addi	r3,r2,20
100058d4:	1d6b883a 	add	r21,r3,r21
100058d8:	d8c00115 	stw	r3,4(sp)
100058dc:	dd400315 	stw	r21,12(sp)
100058e0:	1805883a 	mov	r2,r3
100058e4:	1d40042e 	bgeu	r3,r21,100058f8 <__multiply+0xa8>
100058e8:	d8c00317 	ldw	r3,12(sp)
100058ec:	10000015 	stw	zero,0(r2)
100058f0:	10800104 	addi	r2,r2,4
100058f4:	10fffc36 	bltu	r2,r3,100058e8 <__alt_data_end+0xf80058e8>
100058f8:	8c63883a 	add	r17,r17,r17
100058fc:	b5800504 	addi	r22,r22,20
10005900:	8c63883a 	add	r17,r17,r17
10005904:	94800504 	addi	r18,r18,20
10005908:	8421883a 	add	r16,r16,r16
1000590c:	b463883a 	add	r17,r22,r17
10005910:	8421883a 	add	r16,r16,r16
10005914:	dd800015 	stw	r22,0(sp)
10005918:	dc800415 	stw	r18,16(sp)
1000591c:	dc400515 	stw	r17,20(sp)
10005920:	9429883a 	add	r20,r18,r16
10005924:	b4404f2e 	bgeu	r22,r17,10005a64 <__multiply+0x214>
10005928:	d8c00017 	ldw	r3,0(sp)
1000592c:	1c800017 	ldw	r18,0(r3)
10005930:	947fffcc 	andi	r17,r18,65535
10005934:	88001e26 	beq	r17,zero,100059b0 <__multiply+0x160>
10005938:	dd800117 	ldw	r22,4(sp)
1000593c:	dd400417 	ldw	r21,16(sp)
10005940:	0027883a 	mov	r19,zero
10005944:	ac800017 	ldw	r18,0(r21)
10005948:	b4000017 	ldw	r16,0(r22)
1000594c:	880b883a 	mov	r5,r17
10005950:	913fffcc 	andi	r4,r18,65535
10005954:	0000b600 	call	10000b60 <__mulsi3>
10005958:	9008d43a 	srli	r4,r18,16
1000595c:	84bfffcc 	andi	r18,r16,65535
10005960:	1485883a 	add	r2,r2,r18
10005964:	14e5883a 	add	r18,r2,r19
10005968:	8020d43a 	srli	r16,r16,16
1000596c:	9026d43a 	srli	r19,r18,16
10005970:	880b883a 	mov	r5,r17
10005974:	0000b600 	call	10000b60 <__mulsi3>
10005978:	1405883a 	add	r2,r2,r16
1000597c:	14e1883a 	add	r16,r2,r19
10005980:	90ffffcc 	andi	r3,r18,65535
10005984:	8024943a 	slli	r18,r16,16
10005988:	ad400104 	addi	r21,r21,4
1000598c:	b005883a 	mov	r2,r22
10005990:	90c6b03a 	or	r3,r18,r3
10005994:	b0c00015 	stw	r3,0(r22)
10005998:	8026d43a 	srli	r19,r16,16
1000599c:	b5800104 	addi	r22,r22,4
100059a0:	ad3fe836 	bltu	r21,r20,10005944 <__alt_data_end+0xf8005944>
100059a4:	d8c00017 	ldw	r3,0(sp)
100059a8:	14c00115 	stw	r19,4(r2)
100059ac:	1c800017 	ldw	r18,0(r3)
100059b0:	9024d43a 	srli	r18,r18,16
100059b4:	90002226 	beq	r18,zero,10005a40 <__multiply+0x1f0>
100059b8:	d8c00117 	ldw	r3,4(sp)
100059bc:	dd800417 	ldw	r22,16(sp)
100059c0:	002f883a 	mov	r23,zero
100059c4:	1f000017 	ldw	fp,0(r3)
100059c8:	1823883a 	mov	r17,r3
100059cc:	182b883a 	mov	r21,r3
100059d0:	e021883a 	mov	r16,fp
100059d4:	00000106 	br	100059dc <__multiply+0x18c>
100059d8:	982b883a 	mov	r21,r19
100059dc:	b100000b 	ldhu	r4,0(r22)
100059e0:	8020d43a 	srli	r16,r16,16
100059e4:	900b883a 	mov	r5,r18
100059e8:	0000b600 	call	10000b60 <__mulsi3>
100059ec:	1405883a 	add	r2,r2,r16
100059f0:	15ef883a 	add	r23,r2,r23
100059f4:	b804943a 	slli	r2,r23,16
100059f8:	e0ffffcc 	andi	r3,fp,65535
100059fc:	8c400104 	addi	r17,r17,4
10005a00:	10c6b03a 	or	r3,r2,r3
10005a04:	88ffff15 	stw	r3,-4(r17)
10005a08:	b5800104 	addi	r22,r22,4
10005a0c:	b13fff17 	ldw	r4,-4(r22)
10005a10:	acc00104 	addi	r19,r21,4
10005a14:	900b883a 	mov	r5,r18
10005a18:	2008d43a 	srli	r4,r4,16
10005a1c:	9c000017 	ldw	r16,0(r19)
10005a20:	0000b600 	call	10000b60 <__mulsi3>
10005a24:	b806d43a 	srli	r3,r23,16
10005a28:	813fffcc 	andi	r4,r16,65535
10005a2c:	1105883a 	add	r2,r2,r4
10005a30:	10f9883a 	add	fp,r2,r3
10005a34:	e02ed43a 	srli	r23,fp,16
10005a38:	b53fe736 	bltu	r22,r20,100059d8 <__alt_data_end+0xf80059d8>
10005a3c:	af000115 	stw	fp,4(r21)
10005a40:	d8c00017 	ldw	r3,0(sp)
10005a44:	d9000517 	ldw	r4,20(sp)
10005a48:	18c00104 	addi	r3,r3,4
10005a4c:	d8c00015 	stw	r3,0(sp)
10005a50:	d8c00117 	ldw	r3,4(sp)
10005a54:	18c00104 	addi	r3,r3,4
10005a58:	d8c00115 	stw	r3,4(sp)
10005a5c:	d8c00017 	ldw	r3,0(sp)
10005a60:	193fb136 	bltu	r3,r4,10005928 <__alt_data_end+0xf8005928>
10005a64:	d8c00217 	ldw	r3,8(sp)
10005a68:	00c00c0e 	bge	zero,r3,10005a9c <__multiply+0x24c>
10005a6c:	d8c00317 	ldw	r3,12(sp)
10005a70:	18bfff17 	ldw	r2,-4(r3)
10005a74:	1d7fff04 	addi	r21,r3,-4
10005a78:	10000326 	beq	r2,zero,10005a88 <__multiply+0x238>
10005a7c:	00000706 	br	10005a9c <__multiply+0x24c>
10005a80:	a8800017 	ldw	r2,0(r21)
10005a84:	1000051e 	bne	r2,zero,10005a9c <__multiply+0x24c>
10005a88:	d8c00217 	ldw	r3,8(sp)
10005a8c:	ad7fff04 	addi	r21,r21,-4
10005a90:	18ffffc4 	addi	r3,r3,-1
10005a94:	d8c00215 	stw	r3,8(sp)
10005a98:	183ff91e 	bne	r3,zero,10005a80 <__alt_data_end+0xf8005a80>
10005a9c:	d8c00617 	ldw	r3,24(sp)
10005aa0:	d9000217 	ldw	r4,8(sp)
10005aa4:	1805883a 	mov	r2,r3
10005aa8:	19000415 	stw	r4,16(r3)
10005aac:	dfc01017 	ldw	ra,64(sp)
10005ab0:	df000f17 	ldw	fp,60(sp)
10005ab4:	ddc00e17 	ldw	r23,56(sp)
10005ab8:	dd800d17 	ldw	r22,52(sp)
10005abc:	dd400c17 	ldw	r21,48(sp)
10005ac0:	dd000b17 	ldw	r20,44(sp)
10005ac4:	dcc00a17 	ldw	r19,40(sp)
10005ac8:	dc800917 	ldw	r18,36(sp)
10005acc:	dc400817 	ldw	r17,32(sp)
10005ad0:	dc000717 	ldw	r16,28(sp)
10005ad4:	dec01104 	addi	sp,sp,68
10005ad8:	f800283a 	ret

10005adc <__pow5mult>:
10005adc:	defffa04 	addi	sp,sp,-24
10005ae0:	dcc00315 	stw	r19,12(sp)
10005ae4:	dc000015 	stw	r16,0(sp)
10005ae8:	dfc00515 	stw	ra,20(sp)
10005aec:	dd000415 	stw	r20,16(sp)
10005af0:	dc800215 	stw	r18,8(sp)
10005af4:	dc400115 	stw	r17,4(sp)
10005af8:	308000cc 	andi	r2,r6,3
10005afc:	3021883a 	mov	r16,r6
10005b00:	2027883a 	mov	r19,r4
10005b04:	10002f1e 	bne	r2,zero,10005bc4 <__pow5mult+0xe8>
10005b08:	2825883a 	mov	r18,r5
10005b0c:	8021d0ba 	srai	r16,r16,2
10005b10:	80001a26 	beq	r16,zero,10005b7c <__pow5mult+0xa0>
10005b14:	9c401217 	ldw	r17,72(r19)
10005b18:	8800061e 	bne	r17,zero,10005b34 <__pow5mult+0x58>
10005b1c:	00003406 	br	10005bf0 <__pow5mult+0x114>
10005b20:	8021d07a 	srai	r16,r16,1
10005b24:	80001526 	beq	r16,zero,10005b7c <__pow5mult+0xa0>
10005b28:	88800017 	ldw	r2,0(r17)
10005b2c:	10001c26 	beq	r2,zero,10005ba0 <__pow5mult+0xc4>
10005b30:	1023883a 	mov	r17,r2
10005b34:	8080004c 	andi	r2,r16,1
10005b38:	103ff926 	beq	r2,zero,10005b20 <__alt_data_end+0xf8005b20>
10005b3c:	880d883a 	mov	r6,r17
10005b40:	900b883a 	mov	r5,r18
10005b44:	9809883a 	mov	r4,r19
10005b48:	00058500 	call	10005850 <__multiply>
10005b4c:	90001b26 	beq	r18,zero,10005bbc <__pow5mult+0xe0>
10005b50:	91000117 	ldw	r4,4(r18)
10005b54:	98c01317 	ldw	r3,76(r19)
10005b58:	8021d07a 	srai	r16,r16,1
10005b5c:	2109883a 	add	r4,r4,r4
10005b60:	2109883a 	add	r4,r4,r4
10005b64:	1907883a 	add	r3,r3,r4
10005b68:	19000017 	ldw	r4,0(r3)
10005b6c:	91000015 	stw	r4,0(r18)
10005b70:	1c800015 	stw	r18,0(r3)
10005b74:	1025883a 	mov	r18,r2
10005b78:	803feb1e 	bne	r16,zero,10005b28 <__alt_data_end+0xf8005b28>
10005b7c:	9005883a 	mov	r2,r18
10005b80:	dfc00517 	ldw	ra,20(sp)
10005b84:	dd000417 	ldw	r20,16(sp)
10005b88:	dcc00317 	ldw	r19,12(sp)
10005b8c:	dc800217 	ldw	r18,8(sp)
10005b90:	dc400117 	ldw	r17,4(sp)
10005b94:	dc000017 	ldw	r16,0(sp)
10005b98:	dec00604 	addi	sp,sp,24
10005b9c:	f800283a 	ret
10005ba0:	880d883a 	mov	r6,r17
10005ba4:	880b883a 	mov	r5,r17
10005ba8:	9809883a 	mov	r4,r19
10005bac:	00058500 	call	10005850 <__multiply>
10005bb0:	88800015 	stw	r2,0(r17)
10005bb4:	10000015 	stw	zero,0(r2)
10005bb8:	003fdd06 	br	10005b30 <__alt_data_end+0xf8005b30>
10005bbc:	1025883a 	mov	r18,r2
10005bc0:	003fd706 	br	10005b20 <__alt_data_end+0xf8005b20>
10005bc4:	10bfffc4 	addi	r2,r2,-1
10005bc8:	1085883a 	add	r2,r2,r2
10005bcc:	00c40074 	movhi	r3,4097
10005bd0:	18f86704 	addi	r3,r3,-7780
10005bd4:	1085883a 	add	r2,r2,r2
10005bd8:	1885883a 	add	r2,r3,r2
10005bdc:	11800017 	ldw	r6,0(r2)
10005be0:	000f883a 	mov	r7,zero
10005be4:	00054b00 	call	100054b0 <__multadd>
10005be8:	1025883a 	mov	r18,r2
10005bec:	003fc706 	br	10005b0c <__alt_data_end+0xf8005b0c>
10005bf0:	05000044 	movi	r20,1
10005bf4:	a00b883a 	mov	r5,r20
10005bf8:	9809883a 	mov	r4,r19
10005bfc:	00053e00 	call	100053e0 <_Balloc>
10005c00:	1023883a 	mov	r17,r2
10005c04:	00809c44 	movi	r2,625
10005c08:	88800515 	stw	r2,20(r17)
10005c0c:	8d000415 	stw	r20,16(r17)
10005c10:	9c401215 	stw	r17,72(r19)
10005c14:	88000015 	stw	zero,0(r17)
10005c18:	003fc606 	br	10005b34 <__alt_data_end+0xf8005b34>

10005c1c <__lshift>:
10005c1c:	defff904 	addi	sp,sp,-28
10005c20:	dd400515 	stw	r21,20(sp)
10005c24:	dcc00315 	stw	r19,12(sp)
10005c28:	302bd17a 	srai	r21,r6,5
10005c2c:	2cc00417 	ldw	r19,16(r5)
10005c30:	28800217 	ldw	r2,8(r5)
10005c34:	dd000415 	stw	r20,16(sp)
10005c38:	ace7883a 	add	r19,r21,r19
10005c3c:	dc800215 	stw	r18,8(sp)
10005c40:	dc400115 	stw	r17,4(sp)
10005c44:	dc000015 	stw	r16,0(sp)
10005c48:	dfc00615 	stw	ra,24(sp)
10005c4c:	9c000044 	addi	r16,r19,1
10005c50:	2823883a 	mov	r17,r5
10005c54:	3029883a 	mov	r20,r6
10005c58:	2025883a 	mov	r18,r4
10005c5c:	29400117 	ldw	r5,4(r5)
10005c60:	1400030e 	bge	r2,r16,10005c70 <__lshift+0x54>
10005c64:	1085883a 	add	r2,r2,r2
10005c68:	29400044 	addi	r5,r5,1
10005c6c:	143ffd16 	blt	r2,r16,10005c64 <__alt_data_end+0xf8005c64>
10005c70:	9009883a 	mov	r4,r18
10005c74:	00053e00 	call	100053e0 <_Balloc>
10005c78:	10c00504 	addi	r3,r2,20
10005c7c:	0540070e 	bge	zero,r21,10005c9c <__lshift+0x80>
10005c80:	ad6b883a 	add	r21,r21,r21
10005c84:	ad6b883a 	add	r21,r21,r21
10005c88:	1809883a 	mov	r4,r3
10005c8c:	1d47883a 	add	r3,r3,r21
10005c90:	20000015 	stw	zero,0(r4)
10005c94:	21000104 	addi	r4,r4,4
10005c98:	193ffd1e 	bne	r3,r4,10005c90 <__alt_data_end+0xf8005c90>
10005c9c:	8a000417 	ldw	r8,16(r17)
10005ca0:	89000504 	addi	r4,r17,20
10005ca4:	a18007cc 	andi	r6,r20,31
10005ca8:	4211883a 	add	r8,r8,r8
10005cac:	4211883a 	add	r8,r8,r8
10005cb0:	2211883a 	add	r8,r4,r8
10005cb4:	30002326 	beq	r6,zero,10005d44 <__lshift+0x128>
10005cb8:	02400804 	movi	r9,32
10005cbc:	4993c83a 	sub	r9,r9,r6
10005cc0:	000b883a 	mov	r5,zero
10005cc4:	21c00017 	ldw	r7,0(r4)
10005cc8:	1815883a 	mov	r10,r3
10005ccc:	18c00104 	addi	r3,r3,4
10005cd0:	398e983a 	sll	r7,r7,r6
10005cd4:	21000104 	addi	r4,r4,4
10005cd8:	394ab03a 	or	r5,r7,r5
10005cdc:	197fff15 	stw	r5,-4(r3)
10005ce0:	217fff17 	ldw	r5,-4(r4)
10005ce4:	2a4ad83a 	srl	r5,r5,r9
10005ce8:	223ff636 	bltu	r4,r8,10005cc4 <__alt_data_end+0xf8005cc4>
10005cec:	51400115 	stw	r5,4(r10)
10005cf0:	28001a1e 	bne	r5,zero,10005d5c <__lshift+0x140>
10005cf4:	843fffc4 	addi	r16,r16,-1
10005cf8:	14000415 	stw	r16,16(r2)
10005cfc:	88000826 	beq	r17,zero,10005d20 <__lshift+0x104>
10005d00:	89000117 	ldw	r4,4(r17)
10005d04:	90c01317 	ldw	r3,76(r18)
10005d08:	2109883a 	add	r4,r4,r4
10005d0c:	2109883a 	add	r4,r4,r4
10005d10:	1907883a 	add	r3,r3,r4
10005d14:	19000017 	ldw	r4,0(r3)
10005d18:	89000015 	stw	r4,0(r17)
10005d1c:	1c400015 	stw	r17,0(r3)
10005d20:	dfc00617 	ldw	ra,24(sp)
10005d24:	dd400517 	ldw	r21,20(sp)
10005d28:	dd000417 	ldw	r20,16(sp)
10005d2c:	dcc00317 	ldw	r19,12(sp)
10005d30:	dc800217 	ldw	r18,8(sp)
10005d34:	dc400117 	ldw	r17,4(sp)
10005d38:	dc000017 	ldw	r16,0(sp)
10005d3c:	dec00704 	addi	sp,sp,28
10005d40:	f800283a 	ret
10005d44:	21400017 	ldw	r5,0(r4)
10005d48:	18c00104 	addi	r3,r3,4
10005d4c:	21000104 	addi	r4,r4,4
10005d50:	197fff15 	stw	r5,-4(r3)
10005d54:	223ffb36 	bltu	r4,r8,10005d44 <__alt_data_end+0xf8005d44>
10005d58:	003fe606 	br	10005cf4 <__alt_data_end+0xf8005cf4>
10005d5c:	9c000084 	addi	r16,r19,2
10005d60:	003fe406 	br	10005cf4 <__alt_data_end+0xf8005cf4>

10005d64 <__mcmp>:
10005d64:	20800417 	ldw	r2,16(r4)
10005d68:	28c00417 	ldw	r3,16(r5)
10005d6c:	10c5c83a 	sub	r2,r2,r3
10005d70:	1000111e 	bne	r2,zero,10005db8 <__mcmp+0x54>
10005d74:	18c7883a 	add	r3,r3,r3
10005d78:	18c7883a 	add	r3,r3,r3
10005d7c:	21000504 	addi	r4,r4,20
10005d80:	29400504 	addi	r5,r5,20
10005d84:	20c5883a 	add	r2,r4,r3
10005d88:	28cb883a 	add	r5,r5,r3
10005d8c:	00000106 	br	10005d94 <__mcmp+0x30>
10005d90:	20800a2e 	bgeu	r4,r2,10005dbc <__mcmp+0x58>
10005d94:	10bfff04 	addi	r2,r2,-4
10005d98:	297fff04 	addi	r5,r5,-4
10005d9c:	11800017 	ldw	r6,0(r2)
10005da0:	28c00017 	ldw	r3,0(r5)
10005da4:	30fffa26 	beq	r6,r3,10005d90 <__alt_data_end+0xf8005d90>
10005da8:	30c00236 	bltu	r6,r3,10005db4 <__mcmp+0x50>
10005dac:	00800044 	movi	r2,1
10005db0:	f800283a 	ret
10005db4:	00bfffc4 	movi	r2,-1
10005db8:	f800283a 	ret
10005dbc:	0005883a 	mov	r2,zero
10005dc0:	f800283a 	ret

10005dc4 <__mdiff>:
10005dc4:	28c00417 	ldw	r3,16(r5)
10005dc8:	30800417 	ldw	r2,16(r6)
10005dcc:	defffa04 	addi	sp,sp,-24
10005dd0:	dcc00315 	stw	r19,12(sp)
10005dd4:	dc800215 	stw	r18,8(sp)
10005dd8:	dfc00515 	stw	ra,20(sp)
10005ddc:	dd000415 	stw	r20,16(sp)
10005de0:	dc400115 	stw	r17,4(sp)
10005de4:	dc000015 	stw	r16,0(sp)
10005de8:	1887c83a 	sub	r3,r3,r2
10005dec:	2825883a 	mov	r18,r5
10005df0:	3027883a 	mov	r19,r6
10005df4:	1800141e 	bne	r3,zero,10005e48 <__mdiff+0x84>
10005df8:	1085883a 	add	r2,r2,r2
10005dfc:	1085883a 	add	r2,r2,r2
10005e00:	2a000504 	addi	r8,r5,20
10005e04:	34000504 	addi	r16,r6,20
10005e08:	4087883a 	add	r3,r8,r2
10005e0c:	8085883a 	add	r2,r16,r2
10005e10:	00000106 	br	10005e18 <__mdiff+0x54>
10005e14:	40c0592e 	bgeu	r8,r3,10005f7c <__mdiff+0x1b8>
10005e18:	18ffff04 	addi	r3,r3,-4
10005e1c:	10bfff04 	addi	r2,r2,-4
10005e20:	19c00017 	ldw	r7,0(r3)
10005e24:	11400017 	ldw	r5,0(r2)
10005e28:	397ffa26 	beq	r7,r5,10005e14 <__alt_data_end+0xf8005e14>
10005e2c:	3940592e 	bgeu	r7,r5,10005f94 <__mdiff+0x1d0>
10005e30:	9005883a 	mov	r2,r18
10005e34:	4023883a 	mov	r17,r8
10005e38:	9825883a 	mov	r18,r19
10005e3c:	05000044 	movi	r20,1
10005e40:	1027883a 	mov	r19,r2
10005e44:	00000406 	br	10005e58 <__mdiff+0x94>
10005e48:	18005616 	blt	r3,zero,10005fa4 <__mdiff+0x1e0>
10005e4c:	34400504 	addi	r17,r6,20
10005e50:	2c000504 	addi	r16,r5,20
10005e54:	0029883a 	mov	r20,zero
10005e58:	91400117 	ldw	r5,4(r18)
10005e5c:	00053e00 	call	100053e0 <_Balloc>
10005e60:	92400417 	ldw	r9,16(r18)
10005e64:	9b000417 	ldw	r12,16(r19)
10005e68:	12c00504 	addi	r11,r2,20
10005e6c:	4a51883a 	add	r8,r9,r9
10005e70:	6319883a 	add	r12,r12,r12
10005e74:	4211883a 	add	r8,r8,r8
10005e78:	6319883a 	add	r12,r12,r12
10005e7c:	15000315 	stw	r20,12(r2)
10005e80:	8211883a 	add	r8,r16,r8
10005e84:	8b19883a 	add	r12,r17,r12
10005e88:	0007883a 	mov	r3,zero
10005e8c:	81400017 	ldw	r5,0(r16)
10005e90:	89c00017 	ldw	r7,0(r17)
10005e94:	59800104 	addi	r6,r11,4
10005e98:	293fffcc 	andi	r4,r5,65535
10005e9c:	20c7883a 	add	r3,r4,r3
10005ea0:	393fffcc 	andi	r4,r7,65535
10005ea4:	1909c83a 	sub	r4,r3,r4
10005ea8:	280ad43a 	srli	r5,r5,16
10005eac:	380ed43a 	srli	r7,r7,16
10005eb0:	2007d43a 	srai	r3,r4,16
10005eb4:	213fffcc 	andi	r4,r4,65535
10005eb8:	29cbc83a 	sub	r5,r5,r7
10005ebc:	28c7883a 	add	r3,r5,r3
10005ec0:	180a943a 	slli	r5,r3,16
10005ec4:	8c400104 	addi	r17,r17,4
10005ec8:	84000104 	addi	r16,r16,4
10005ecc:	2908b03a 	or	r4,r5,r4
10005ed0:	59000015 	stw	r4,0(r11)
10005ed4:	1807d43a 	srai	r3,r3,16
10005ed8:	3015883a 	mov	r10,r6
10005edc:	3017883a 	mov	r11,r6
10005ee0:	8b3fea36 	bltu	r17,r12,10005e8c <__alt_data_end+0xf8005e8c>
10005ee4:	8200162e 	bgeu	r16,r8,10005f40 <__mdiff+0x17c>
10005ee8:	8017883a 	mov	r11,r16
10005eec:	59400017 	ldw	r5,0(r11)
10005ef0:	31800104 	addi	r6,r6,4
10005ef4:	5ac00104 	addi	r11,r11,4
10005ef8:	293fffcc 	andi	r4,r5,65535
10005efc:	20c7883a 	add	r3,r4,r3
10005f00:	280ed43a 	srli	r7,r5,16
10005f04:	180bd43a 	srai	r5,r3,16
10005f08:	193fffcc 	andi	r4,r3,65535
10005f0c:	3947883a 	add	r3,r7,r5
10005f10:	180a943a 	slli	r5,r3,16
10005f14:	1807d43a 	srai	r3,r3,16
10005f18:	2908b03a 	or	r4,r5,r4
10005f1c:	313fff15 	stw	r4,-4(r6)
10005f20:	5a3ff236 	bltu	r11,r8,10005eec <__alt_data_end+0xf8005eec>
10005f24:	0406303a 	nor	r3,zero,r16
10005f28:	1a07883a 	add	r3,r3,r8
10005f2c:	1806d0ba 	srli	r3,r3,2
10005f30:	18c00044 	addi	r3,r3,1
10005f34:	18c7883a 	add	r3,r3,r3
10005f38:	18c7883a 	add	r3,r3,r3
10005f3c:	50d5883a 	add	r10,r10,r3
10005f40:	50ffff04 	addi	r3,r10,-4
10005f44:	2000041e 	bne	r4,zero,10005f58 <__mdiff+0x194>
10005f48:	18ffff04 	addi	r3,r3,-4
10005f4c:	19000017 	ldw	r4,0(r3)
10005f50:	4a7fffc4 	addi	r9,r9,-1
10005f54:	203ffc26 	beq	r4,zero,10005f48 <__alt_data_end+0xf8005f48>
10005f58:	12400415 	stw	r9,16(r2)
10005f5c:	dfc00517 	ldw	ra,20(sp)
10005f60:	dd000417 	ldw	r20,16(sp)
10005f64:	dcc00317 	ldw	r19,12(sp)
10005f68:	dc800217 	ldw	r18,8(sp)
10005f6c:	dc400117 	ldw	r17,4(sp)
10005f70:	dc000017 	ldw	r16,0(sp)
10005f74:	dec00604 	addi	sp,sp,24
10005f78:	f800283a 	ret
10005f7c:	000b883a 	mov	r5,zero
10005f80:	00053e00 	call	100053e0 <_Balloc>
10005f84:	00c00044 	movi	r3,1
10005f88:	10c00415 	stw	r3,16(r2)
10005f8c:	10000515 	stw	zero,20(r2)
10005f90:	003ff206 	br	10005f5c <__alt_data_end+0xf8005f5c>
10005f94:	8023883a 	mov	r17,r16
10005f98:	0029883a 	mov	r20,zero
10005f9c:	4021883a 	mov	r16,r8
10005fa0:	003fad06 	br	10005e58 <__alt_data_end+0xf8005e58>
10005fa4:	9005883a 	mov	r2,r18
10005fa8:	94400504 	addi	r17,r18,20
10005fac:	9c000504 	addi	r16,r19,20
10005fb0:	9825883a 	mov	r18,r19
10005fb4:	05000044 	movi	r20,1
10005fb8:	1027883a 	mov	r19,r2
10005fbc:	003fa606 	br	10005e58 <__alt_data_end+0xf8005e58>

10005fc0 <__ulp>:
10005fc0:	295ffc2c 	andhi	r5,r5,32752
10005fc4:	00bf3034 	movhi	r2,64704
10005fc8:	2887883a 	add	r3,r5,r2
10005fcc:	00c0020e 	bge	zero,r3,10005fd8 <__ulp+0x18>
10005fd0:	0005883a 	mov	r2,zero
10005fd4:	f800283a 	ret
10005fd8:	00c7c83a 	sub	r3,zero,r3
10005fdc:	1807d53a 	srai	r3,r3,20
10005fe0:	008004c4 	movi	r2,19
10005fe4:	10c00b0e 	bge	r2,r3,10006014 <__ulp+0x54>
10005fe8:	18bffb04 	addi	r2,r3,-20
10005fec:	01000784 	movi	r4,30
10005ff0:	0007883a 	mov	r3,zero
10005ff4:	20800516 	blt	r4,r2,1000600c <__ulp+0x4c>
10005ff8:	010007c4 	movi	r4,31
10005ffc:	2089c83a 	sub	r4,r4,r2
10006000:	00800044 	movi	r2,1
10006004:	1104983a 	sll	r2,r2,r4
10006008:	f800283a 	ret
1000600c:	00800044 	movi	r2,1
10006010:	f800283a 	ret
10006014:	01400234 	movhi	r5,8
10006018:	28c7d83a 	sra	r3,r5,r3
1000601c:	0005883a 	mov	r2,zero
10006020:	f800283a 	ret

10006024 <__b2d>:
10006024:	defffa04 	addi	sp,sp,-24
10006028:	dc000015 	stw	r16,0(sp)
1000602c:	24000417 	ldw	r16,16(r4)
10006030:	dc400115 	stw	r17,4(sp)
10006034:	24400504 	addi	r17,r4,20
10006038:	8421883a 	add	r16,r16,r16
1000603c:	8421883a 	add	r16,r16,r16
10006040:	8c21883a 	add	r16,r17,r16
10006044:	dc800215 	stw	r18,8(sp)
10006048:	84bfff17 	ldw	r18,-4(r16)
1000604c:	dd000415 	stw	r20,16(sp)
10006050:	dcc00315 	stw	r19,12(sp)
10006054:	9009883a 	mov	r4,r18
10006058:	2829883a 	mov	r20,r5
1000605c:	dfc00515 	stw	ra,20(sp)
10006060:	00056fc0 	call	100056fc <__hi0bits>
10006064:	00c00804 	movi	r3,32
10006068:	1889c83a 	sub	r4,r3,r2
1000606c:	a1000015 	stw	r4,0(r20)
10006070:	01000284 	movi	r4,10
10006074:	84ffff04 	addi	r19,r16,-4
10006078:	20801216 	blt	r4,r2,100060c4 <__b2d+0xa0>
1000607c:	018002c4 	movi	r6,11
10006080:	308dc83a 	sub	r6,r6,r2
10006084:	9186d83a 	srl	r3,r18,r6
10006088:	18cffc34 	orhi	r3,r3,16368
1000608c:	8cc0212e 	bgeu	r17,r19,10006114 <__b2d+0xf0>
10006090:	813ffe17 	ldw	r4,-8(r16)
10006094:	218cd83a 	srl	r6,r4,r6
10006098:	10800544 	addi	r2,r2,21
1000609c:	9084983a 	sll	r2,r18,r2
100060a0:	1184b03a 	or	r2,r2,r6
100060a4:	dfc00517 	ldw	ra,20(sp)
100060a8:	dd000417 	ldw	r20,16(sp)
100060ac:	dcc00317 	ldw	r19,12(sp)
100060b0:	dc800217 	ldw	r18,8(sp)
100060b4:	dc400117 	ldw	r17,4(sp)
100060b8:	dc000017 	ldw	r16,0(sp)
100060bc:	dec00604 	addi	sp,sp,24
100060c0:	f800283a 	ret
100060c4:	8cc00f2e 	bgeu	r17,r19,10006104 <__b2d+0xe0>
100060c8:	117ffd44 	addi	r5,r2,-11
100060cc:	80bffe17 	ldw	r2,-8(r16)
100060d0:	28000e26 	beq	r5,zero,1000610c <__b2d+0xe8>
100060d4:	1949c83a 	sub	r4,r3,r5
100060d8:	9164983a 	sll	r18,r18,r5
100060dc:	1106d83a 	srl	r3,r2,r4
100060e0:	81bffe04 	addi	r6,r16,-8
100060e4:	948ffc34 	orhi	r18,r18,16368
100060e8:	90c6b03a 	or	r3,r18,r3
100060ec:	89800e2e 	bgeu	r17,r6,10006128 <__b2d+0x104>
100060f0:	81bffd17 	ldw	r6,-12(r16)
100060f4:	1144983a 	sll	r2,r2,r5
100060f8:	310ad83a 	srl	r5,r6,r4
100060fc:	2884b03a 	or	r2,r5,r2
10006100:	003fe806 	br	100060a4 <__alt_data_end+0xf80060a4>
10006104:	10bffd44 	addi	r2,r2,-11
10006108:	1000041e 	bne	r2,zero,1000611c <__b2d+0xf8>
1000610c:	90cffc34 	orhi	r3,r18,16368
10006110:	003fe406 	br	100060a4 <__alt_data_end+0xf80060a4>
10006114:	000d883a 	mov	r6,zero
10006118:	003fdf06 	br	10006098 <__alt_data_end+0xf8006098>
1000611c:	90a4983a 	sll	r18,r18,r2
10006120:	0005883a 	mov	r2,zero
10006124:	003ff906 	br	1000610c <__alt_data_end+0xf800610c>
10006128:	1144983a 	sll	r2,r2,r5
1000612c:	003fdd06 	br	100060a4 <__alt_data_end+0xf80060a4>

10006130 <__d2b>:
10006130:	defff804 	addi	sp,sp,-32
10006134:	dc000215 	stw	r16,8(sp)
10006138:	3021883a 	mov	r16,r6
1000613c:	dc400315 	stw	r17,12(sp)
10006140:	8022907a 	slli	r17,r16,1
10006144:	dd000615 	stw	r20,24(sp)
10006148:	2829883a 	mov	r20,r5
1000614c:	01400044 	movi	r5,1
10006150:	dcc00515 	stw	r19,20(sp)
10006154:	dc800415 	stw	r18,16(sp)
10006158:	dfc00715 	stw	ra,28(sp)
1000615c:	3825883a 	mov	r18,r7
10006160:	8822d57a 	srli	r17,r17,21
10006164:	00053e00 	call	100053e0 <_Balloc>
10006168:	1027883a 	mov	r19,r2
1000616c:	00800434 	movhi	r2,16
10006170:	10bfffc4 	addi	r2,r2,-1
10006174:	808c703a 	and	r6,r16,r2
10006178:	88000126 	beq	r17,zero,10006180 <__d2b+0x50>
1000617c:	31800434 	orhi	r6,r6,16
10006180:	d9800015 	stw	r6,0(sp)
10006184:	a0002426 	beq	r20,zero,10006218 <__d2b+0xe8>
10006188:	d9000104 	addi	r4,sp,4
1000618c:	dd000115 	stw	r20,4(sp)
10006190:	00057640 	call	10005764 <__lo0bits>
10006194:	d8c00017 	ldw	r3,0(sp)
10006198:	10002f1e 	bne	r2,zero,10006258 <__d2b+0x128>
1000619c:	d9000117 	ldw	r4,4(sp)
100061a0:	99000515 	stw	r4,20(r19)
100061a4:	1821003a 	cmpeq	r16,r3,zero
100061a8:	01000084 	movi	r4,2
100061ac:	2421c83a 	sub	r16,r4,r16
100061b0:	98c00615 	stw	r3,24(r19)
100061b4:	9c000415 	stw	r16,16(r19)
100061b8:	88001f1e 	bne	r17,zero,10006238 <__d2b+0x108>
100061bc:	10bef384 	addi	r2,r2,-1074
100061c0:	90800015 	stw	r2,0(r18)
100061c4:	00900034 	movhi	r2,16384
100061c8:	10bfffc4 	addi	r2,r2,-1
100061cc:	8085883a 	add	r2,r16,r2
100061d0:	1085883a 	add	r2,r2,r2
100061d4:	1085883a 	add	r2,r2,r2
100061d8:	9885883a 	add	r2,r19,r2
100061dc:	11000517 	ldw	r4,20(r2)
100061e0:	8020917a 	slli	r16,r16,5
100061e4:	00056fc0 	call	100056fc <__hi0bits>
100061e8:	d8c00817 	ldw	r3,32(sp)
100061ec:	8085c83a 	sub	r2,r16,r2
100061f0:	18800015 	stw	r2,0(r3)
100061f4:	9805883a 	mov	r2,r19
100061f8:	dfc00717 	ldw	ra,28(sp)
100061fc:	dd000617 	ldw	r20,24(sp)
10006200:	dcc00517 	ldw	r19,20(sp)
10006204:	dc800417 	ldw	r18,16(sp)
10006208:	dc400317 	ldw	r17,12(sp)
1000620c:	dc000217 	ldw	r16,8(sp)
10006210:	dec00804 	addi	sp,sp,32
10006214:	f800283a 	ret
10006218:	d809883a 	mov	r4,sp
1000621c:	00057640 	call	10005764 <__lo0bits>
10006220:	d8c00017 	ldw	r3,0(sp)
10006224:	04000044 	movi	r16,1
10006228:	9c000415 	stw	r16,16(r19)
1000622c:	98c00515 	stw	r3,20(r19)
10006230:	10800804 	addi	r2,r2,32
10006234:	883fe126 	beq	r17,zero,100061bc <__alt_data_end+0xf80061bc>
10006238:	00c00d44 	movi	r3,53
1000623c:	8c7ef344 	addi	r17,r17,-1075
10006240:	88a3883a 	add	r17,r17,r2
10006244:	1885c83a 	sub	r2,r3,r2
10006248:	d8c00817 	ldw	r3,32(sp)
1000624c:	94400015 	stw	r17,0(r18)
10006250:	18800015 	stw	r2,0(r3)
10006254:	003fe706 	br	100061f4 <__alt_data_end+0xf80061f4>
10006258:	01000804 	movi	r4,32
1000625c:	2089c83a 	sub	r4,r4,r2
10006260:	1908983a 	sll	r4,r3,r4
10006264:	d9400117 	ldw	r5,4(sp)
10006268:	1886d83a 	srl	r3,r3,r2
1000626c:	2148b03a 	or	r4,r4,r5
10006270:	99000515 	stw	r4,20(r19)
10006274:	d8c00015 	stw	r3,0(sp)
10006278:	003fca06 	br	100061a4 <__alt_data_end+0xf80061a4>

1000627c <__ratio>:
1000627c:	defff904 	addi	sp,sp,-28
10006280:	dc400315 	stw	r17,12(sp)
10006284:	2823883a 	mov	r17,r5
10006288:	d9400104 	addi	r5,sp,4
1000628c:	dfc00615 	stw	ra,24(sp)
10006290:	dcc00515 	stw	r19,20(sp)
10006294:	dc800415 	stw	r18,16(sp)
10006298:	2027883a 	mov	r19,r4
1000629c:	dc000215 	stw	r16,8(sp)
100062a0:	00060240 	call	10006024 <__b2d>
100062a4:	d80b883a 	mov	r5,sp
100062a8:	8809883a 	mov	r4,r17
100062ac:	1025883a 	mov	r18,r2
100062b0:	1821883a 	mov	r16,r3
100062b4:	00060240 	call	10006024 <__b2d>
100062b8:	8a000417 	ldw	r8,16(r17)
100062bc:	99000417 	ldw	r4,16(r19)
100062c0:	d9400117 	ldw	r5,4(sp)
100062c4:	2209c83a 	sub	r4,r4,r8
100062c8:	2010917a 	slli	r8,r4,5
100062cc:	d9000017 	ldw	r4,0(sp)
100062d0:	2909c83a 	sub	r4,r5,r4
100062d4:	4109883a 	add	r4,r8,r4
100062d8:	01000e0e 	bge	zero,r4,10006314 <__ratio+0x98>
100062dc:	2008953a 	slli	r4,r4,20
100062e0:	2421883a 	add	r16,r4,r16
100062e4:	100d883a 	mov	r6,r2
100062e8:	180f883a 	mov	r7,r3
100062ec:	9009883a 	mov	r4,r18
100062f0:	800b883a 	mov	r5,r16
100062f4:	0009e1c0 	call	10009e1c <__divdf3>
100062f8:	dfc00617 	ldw	ra,24(sp)
100062fc:	dcc00517 	ldw	r19,20(sp)
10006300:	dc800417 	ldw	r18,16(sp)
10006304:	dc400317 	ldw	r17,12(sp)
10006308:	dc000217 	ldw	r16,8(sp)
1000630c:	dec00704 	addi	sp,sp,28
10006310:	f800283a 	ret
10006314:	2008953a 	slli	r4,r4,20
10006318:	1907c83a 	sub	r3,r3,r4
1000631c:	003ff106 	br	100062e4 <__alt_data_end+0xf80062e4>

10006320 <_mprec_log10>:
10006320:	defffe04 	addi	sp,sp,-8
10006324:	dc000015 	stw	r16,0(sp)
10006328:	dfc00115 	stw	ra,4(sp)
1000632c:	008005c4 	movi	r2,23
10006330:	2021883a 	mov	r16,r4
10006334:	11000d0e 	bge	r2,r4,1000636c <_mprec_log10+0x4c>
10006338:	0005883a 	mov	r2,zero
1000633c:	00cffc34 	movhi	r3,16368
10006340:	843fffc4 	addi	r16,r16,-1
10006344:	000d883a 	mov	r6,zero
10006348:	01d00934 	movhi	r7,16420
1000634c:	1009883a 	mov	r4,r2
10006350:	180b883a 	mov	r5,r3
10006354:	000aa440 	call	1000aa44 <__muldf3>
10006358:	803ff91e 	bne	r16,zero,10006340 <__alt_data_end+0xf8006340>
1000635c:	dfc00117 	ldw	ra,4(sp)
10006360:	dc000017 	ldw	r16,0(sp)
10006364:	dec00204 	addi	sp,sp,8
10006368:	f800283a 	ret
1000636c:	202090fa 	slli	r16,r4,3
10006370:	00840074 	movhi	r2,4097
10006374:	10b87e04 	addi	r2,r2,-7688
10006378:	1421883a 	add	r16,r2,r16
1000637c:	80800017 	ldw	r2,0(r16)
10006380:	80c00117 	ldw	r3,4(r16)
10006384:	dfc00117 	ldw	ra,4(sp)
10006388:	dc000017 	ldw	r16,0(sp)
1000638c:	dec00204 	addi	sp,sp,8
10006390:	f800283a 	ret

10006394 <__copybits>:
10006394:	297fffc4 	addi	r5,r5,-1
10006398:	280fd17a 	srai	r7,r5,5
1000639c:	30c00417 	ldw	r3,16(r6)
100063a0:	30800504 	addi	r2,r6,20
100063a4:	39c00044 	addi	r7,r7,1
100063a8:	18c7883a 	add	r3,r3,r3
100063ac:	39cf883a 	add	r7,r7,r7
100063b0:	18c7883a 	add	r3,r3,r3
100063b4:	39cf883a 	add	r7,r7,r7
100063b8:	10c7883a 	add	r3,r2,r3
100063bc:	21cf883a 	add	r7,r4,r7
100063c0:	10c00d2e 	bgeu	r2,r3,100063f8 <__copybits+0x64>
100063c4:	200b883a 	mov	r5,r4
100063c8:	12000017 	ldw	r8,0(r2)
100063cc:	29400104 	addi	r5,r5,4
100063d0:	10800104 	addi	r2,r2,4
100063d4:	2a3fff15 	stw	r8,-4(r5)
100063d8:	10fffb36 	bltu	r2,r3,100063c8 <__alt_data_end+0xf80063c8>
100063dc:	1985c83a 	sub	r2,r3,r6
100063e0:	10bffac4 	addi	r2,r2,-21
100063e4:	1004d0ba 	srli	r2,r2,2
100063e8:	10800044 	addi	r2,r2,1
100063ec:	1085883a 	add	r2,r2,r2
100063f0:	1085883a 	add	r2,r2,r2
100063f4:	2089883a 	add	r4,r4,r2
100063f8:	21c0032e 	bgeu	r4,r7,10006408 <__copybits+0x74>
100063fc:	20000015 	stw	zero,0(r4)
10006400:	21000104 	addi	r4,r4,4
10006404:	21fffd36 	bltu	r4,r7,100063fc <__alt_data_end+0xf80063fc>
10006408:	f800283a 	ret

1000640c <__any_on>:
1000640c:	20c00417 	ldw	r3,16(r4)
10006410:	2805d17a 	srai	r2,r5,5
10006414:	21000504 	addi	r4,r4,20
10006418:	18800d0e 	bge	r3,r2,10006450 <__any_on+0x44>
1000641c:	18c7883a 	add	r3,r3,r3
10006420:	18c7883a 	add	r3,r3,r3
10006424:	20c7883a 	add	r3,r4,r3
10006428:	20c0192e 	bgeu	r4,r3,10006490 <__any_on+0x84>
1000642c:	18bfff17 	ldw	r2,-4(r3)
10006430:	18ffff04 	addi	r3,r3,-4
10006434:	1000041e 	bne	r2,zero,10006448 <__any_on+0x3c>
10006438:	20c0142e 	bgeu	r4,r3,1000648c <__any_on+0x80>
1000643c:	18ffff04 	addi	r3,r3,-4
10006440:	19400017 	ldw	r5,0(r3)
10006444:	283ffc26 	beq	r5,zero,10006438 <__alt_data_end+0xf8006438>
10006448:	00800044 	movi	r2,1
1000644c:	f800283a 	ret
10006450:	10c00a0e 	bge	r2,r3,1000647c <__any_on+0x70>
10006454:	1085883a 	add	r2,r2,r2
10006458:	1085883a 	add	r2,r2,r2
1000645c:	294007cc 	andi	r5,r5,31
10006460:	2087883a 	add	r3,r4,r2
10006464:	283ff026 	beq	r5,zero,10006428 <__alt_data_end+0xf8006428>
10006468:	19800017 	ldw	r6,0(r3)
1000646c:	3144d83a 	srl	r2,r6,r5
10006470:	114a983a 	sll	r5,r2,r5
10006474:	317ff41e 	bne	r6,r5,10006448 <__alt_data_end+0xf8006448>
10006478:	003feb06 	br	10006428 <__alt_data_end+0xf8006428>
1000647c:	1085883a 	add	r2,r2,r2
10006480:	1085883a 	add	r2,r2,r2
10006484:	2087883a 	add	r3,r4,r2
10006488:	003fe706 	br	10006428 <__alt_data_end+0xf8006428>
1000648c:	f800283a 	ret
10006490:	0005883a 	mov	r2,zero
10006494:	f800283a 	ret

10006498 <__fpclassifyd>:
10006498:	00a00034 	movhi	r2,32768
1000649c:	10bfffc4 	addi	r2,r2,-1
100064a0:	2884703a 	and	r2,r5,r2
100064a4:	10000726 	beq	r2,zero,100064c4 <__fpclassifyd+0x2c>
100064a8:	00fffc34 	movhi	r3,65520
100064ac:	019ff834 	movhi	r6,32736
100064b0:	28c7883a 	add	r3,r5,r3
100064b4:	31bfffc4 	addi	r6,r6,-1
100064b8:	30c00536 	bltu	r6,r3,100064d0 <__fpclassifyd+0x38>
100064bc:	00800104 	movi	r2,4
100064c0:	f800283a 	ret
100064c4:	2000021e 	bne	r4,zero,100064d0 <__fpclassifyd+0x38>
100064c8:	00800084 	movi	r2,2
100064cc:	f800283a 	ret
100064d0:	00dffc34 	movhi	r3,32752
100064d4:	019ff834 	movhi	r6,32736
100064d8:	28cb883a 	add	r5,r5,r3
100064dc:	31bfffc4 	addi	r6,r6,-1
100064e0:	317ff62e 	bgeu	r6,r5,100064bc <__alt_data_end+0xf80064bc>
100064e4:	01400434 	movhi	r5,16
100064e8:	297fffc4 	addi	r5,r5,-1
100064ec:	28800236 	bltu	r5,r2,100064f8 <__fpclassifyd+0x60>
100064f0:	008000c4 	movi	r2,3
100064f4:	f800283a 	ret
100064f8:	10c00226 	beq	r2,r3,10006504 <__fpclassifyd+0x6c>
100064fc:	0005883a 	mov	r2,zero
10006500:	f800283a 	ret
10006504:	2005003a 	cmpeq	r2,r4,zero
10006508:	f800283a 	ret

1000650c <_sbrk_r>:
1000650c:	defffd04 	addi	sp,sp,-12
10006510:	dc000015 	stw	r16,0(sp)
10006514:	04040074 	movhi	r16,4097
10006518:	dc400115 	stw	r17,4(sp)
1000651c:	8408ad04 	addi	r16,r16,8884
10006520:	2023883a 	mov	r17,r4
10006524:	2809883a 	mov	r4,r5
10006528:	dfc00215 	stw	ra,8(sp)
1000652c:	80000015 	stw	zero,0(r16)
10006530:	000bfc40 	call	1000bfc4 <sbrk>
10006534:	00ffffc4 	movi	r3,-1
10006538:	10c00526 	beq	r2,r3,10006550 <_sbrk_r+0x44>
1000653c:	dfc00217 	ldw	ra,8(sp)
10006540:	dc400117 	ldw	r17,4(sp)
10006544:	dc000017 	ldw	r16,0(sp)
10006548:	dec00304 	addi	sp,sp,12
1000654c:	f800283a 	ret
10006550:	80c00017 	ldw	r3,0(r16)
10006554:	183ff926 	beq	r3,zero,1000653c <__alt_data_end+0xf800653c>
10006558:	88c00015 	stw	r3,0(r17)
1000655c:	003ff706 	br	1000653c <__alt_data_end+0xf800653c>

10006560 <strcmp>:
10006560:	2144b03a 	or	r2,r4,r5
10006564:	108000cc 	andi	r2,r2,3
10006568:	1000171e 	bne	r2,zero,100065c8 <strcmp+0x68>
1000656c:	20800017 	ldw	r2,0(r4)
10006570:	28c00017 	ldw	r3,0(r5)
10006574:	10c0141e 	bne	r2,r3,100065c8 <strcmp+0x68>
10006578:	027fbff4 	movhi	r9,65279
1000657c:	4a7fbfc4 	addi	r9,r9,-257
10006580:	0086303a 	nor	r3,zero,r2
10006584:	02202074 	movhi	r8,32897
10006588:	1245883a 	add	r2,r2,r9
1000658c:	42202004 	addi	r8,r8,-32640
10006590:	10c4703a 	and	r2,r2,r3
10006594:	1204703a 	and	r2,r2,r8
10006598:	10000226 	beq	r2,zero,100065a4 <strcmp+0x44>
1000659c:	00002306 	br	1000662c <strcmp+0xcc>
100065a0:	1000221e 	bne	r2,zero,1000662c <strcmp+0xcc>
100065a4:	21000104 	addi	r4,r4,4
100065a8:	20c00017 	ldw	r3,0(r4)
100065ac:	29400104 	addi	r5,r5,4
100065b0:	29800017 	ldw	r6,0(r5)
100065b4:	1a4f883a 	add	r7,r3,r9
100065b8:	00c4303a 	nor	r2,zero,r3
100065bc:	3884703a 	and	r2,r7,r2
100065c0:	1204703a 	and	r2,r2,r8
100065c4:	19bff626 	beq	r3,r6,100065a0 <__alt_data_end+0xf80065a0>
100065c8:	20800003 	ldbu	r2,0(r4)
100065cc:	10c03fcc 	andi	r3,r2,255
100065d0:	18c0201c 	xori	r3,r3,128
100065d4:	18ffe004 	addi	r3,r3,-128
100065d8:	18000c26 	beq	r3,zero,1000660c <strcmp+0xac>
100065dc:	29800007 	ldb	r6,0(r5)
100065e0:	19800326 	beq	r3,r6,100065f0 <strcmp+0x90>
100065e4:	00001306 	br	10006634 <strcmp+0xd4>
100065e8:	29800007 	ldb	r6,0(r5)
100065ec:	11800b1e 	bne	r2,r6,1000661c <strcmp+0xbc>
100065f0:	21000044 	addi	r4,r4,1
100065f4:	20c00003 	ldbu	r3,0(r4)
100065f8:	29400044 	addi	r5,r5,1
100065fc:	18803fcc 	andi	r2,r3,255
10006600:	1080201c 	xori	r2,r2,128
10006604:	10bfe004 	addi	r2,r2,-128
10006608:	103ff71e 	bne	r2,zero,100065e8 <__alt_data_end+0xf80065e8>
1000660c:	0007883a 	mov	r3,zero
10006610:	28800003 	ldbu	r2,0(r5)
10006614:	1885c83a 	sub	r2,r3,r2
10006618:	f800283a 	ret
1000661c:	28800003 	ldbu	r2,0(r5)
10006620:	18c03fcc 	andi	r3,r3,255
10006624:	1885c83a 	sub	r2,r3,r2
10006628:	f800283a 	ret
1000662c:	0005883a 	mov	r2,zero
10006630:	f800283a 	ret
10006634:	10c03fcc 	andi	r3,r2,255
10006638:	003ff506 	br	10006610 <__alt_data_end+0xf8006610>

1000663c <__ssprint_r>:
1000663c:	30800217 	ldw	r2,8(r6)
10006640:	defff604 	addi	sp,sp,-40
10006644:	dc800215 	stw	r18,8(sp)
10006648:	dfc00915 	stw	ra,36(sp)
1000664c:	df000815 	stw	fp,32(sp)
10006650:	ddc00715 	stw	r23,28(sp)
10006654:	dd800615 	stw	r22,24(sp)
10006658:	dd400515 	stw	r21,20(sp)
1000665c:	dd000415 	stw	r20,16(sp)
10006660:	dcc00315 	stw	r19,12(sp)
10006664:	dc400115 	stw	r17,4(sp)
10006668:	dc000015 	stw	r16,0(sp)
1000666c:	3025883a 	mov	r18,r6
10006670:	10005826 	beq	r2,zero,100067d4 <__ssprint_r+0x198>
10006674:	2027883a 	mov	r19,r4
10006678:	35c00017 	ldw	r23,0(r6)
1000667c:	29000017 	ldw	r4,0(r5)
10006680:	28800217 	ldw	r2,8(r5)
10006684:	2823883a 	mov	r17,r5
10006688:	0039883a 	mov	fp,zero
1000668c:	0021883a 	mov	r16,zero
10006690:	80003926 	beq	r16,zero,10006778 <__ssprint_r+0x13c>
10006694:	102b883a 	mov	r21,r2
10006698:	102d883a 	mov	r22,r2
1000669c:	80803a36 	bltu	r16,r2,10006788 <__ssprint_r+0x14c>
100066a0:	88c0030b 	ldhu	r3,12(r17)
100066a4:	1881200c 	andi	r2,r3,1152
100066a8:	10002626 	beq	r2,zero,10006744 <__ssprint_r+0x108>
100066ac:	88800517 	ldw	r2,20(r17)
100066b0:	89400417 	ldw	r5,16(r17)
100066b4:	81800044 	addi	r6,r16,1
100066b8:	108f883a 	add	r7,r2,r2
100066bc:	3885883a 	add	r2,r7,r2
100066c0:	100ed7fa 	srli	r7,r2,31
100066c4:	216dc83a 	sub	r22,r4,r5
100066c8:	3589883a 	add	r4,r6,r22
100066cc:	3885883a 	add	r2,r7,r2
100066d0:	102bd07a 	srai	r21,r2,1
100066d4:	a80d883a 	mov	r6,r21
100066d8:	a900022e 	bgeu	r21,r4,100066e4 <__ssprint_r+0xa8>
100066dc:	202b883a 	mov	r21,r4
100066e0:	200d883a 	mov	r6,r4
100066e4:	18c1000c 	andi	r3,r3,1024
100066e8:	18002a26 	beq	r3,zero,10006794 <__ssprint_r+0x158>
100066ec:	300b883a 	mov	r5,r6
100066f0:	9809883a 	mov	r4,r19
100066f4:	00049a80 	call	100049a8 <_malloc_r>
100066f8:	1029883a 	mov	r20,r2
100066fc:	10002c26 	beq	r2,zero,100067b0 <__ssprint_r+0x174>
10006700:	89400417 	ldw	r5,16(r17)
10006704:	b00d883a 	mov	r6,r22
10006708:	1009883a 	mov	r4,r2
1000670c:	00052980 	call	10005298 <memcpy>
10006710:	8880030b 	ldhu	r2,12(r17)
10006714:	00fedfc4 	movi	r3,-1153
10006718:	10c4703a 	and	r2,r2,r3
1000671c:	10802014 	ori	r2,r2,128
10006720:	8880030d 	sth	r2,12(r17)
10006724:	a589883a 	add	r4,r20,r22
10006728:	adadc83a 	sub	r22,r21,r22
1000672c:	8d400515 	stw	r21,20(r17)
10006730:	8d800215 	stw	r22,8(r17)
10006734:	8d000415 	stw	r20,16(r17)
10006738:	89000015 	stw	r4,0(r17)
1000673c:	802b883a 	mov	r21,r16
10006740:	802d883a 	mov	r22,r16
10006744:	b00d883a 	mov	r6,r22
10006748:	e00b883a 	mov	r5,fp
1000674c:	00080bc0 	call	100080bc <memmove>
10006750:	88800217 	ldw	r2,8(r17)
10006754:	89000017 	ldw	r4,0(r17)
10006758:	90c00217 	ldw	r3,8(r18)
1000675c:	1545c83a 	sub	r2,r2,r21
10006760:	2589883a 	add	r4,r4,r22
10006764:	88800215 	stw	r2,8(r17)
10006768:	89000015 	stw	r4,0(r17)
1000676c:	1c21c83a 	sub	r16,r3,r16
10006770:	94000215 	stw	r16,8(r18)
10006774:	80001726 	beq	r16,zero,100067d4 <__ssprint_r+0x198>
10006778:	bf000017 	ldw	fp,0(r23)
1000677c:	bc000117 	ldw	r16,4(r23)
10006780:	bdc00204 	addi	r23,r23,8
10006784:	003fc206 	br	10006690 <__alt_data_end+0xf8006690>
10006788:	802b883a 	mov	r21,r16
1000678c:	802d883a 	mov	r22,r16
10006790:	003fec06 	br	10006744 <__alt_data_end+0xf8006744>
10006794:	9809883a 	mov	r4,r19
10006798:	00083400 	call	10008340 <_realloc_r>
1000679c:	1029883a 	mov	r20,r2
100067a0:	103fe01e 	bne	r2,zero,10006724 <__alt_data_end+0xf8006724>
100067a4:	89400417 	ldw	r5,16(r17)
100067a8:	9809883a 	mov	r4,r19
100067ac:	0007dac0 	call	10007dac <_free_r>
100067b0:	88c0030b 	ldhu	r3,12(r17)
100067b4:	00800304 	movi	r2,12
100067b8:	98800015 	stw	r2,0(r19)
100067bc:	18c01014 	ori	r3,r3,64
100067c0:	88c0030d 	sth	r3,12(r17)
100067c4:	00bfffc4 	movi	r2,-1
100067c8:	90000215 	stw	zero,8(r18)
100067cc:	90000115 	stw	zero,4(r18)
100067d0:	00000206 	br	100067dc <__ssprint_r+0x1a0>
100067d4:	90000115 	stw	zero,4(r18)
100067d8:	0005883a 	mov	r2,zero
100067dc:	dfc00917 	ldw	ra,36(sp)
100067e0:	df000817 	ldw	fp,32(sp)
100067e4:	ddc00717 	ldw	r23,28(sp)
100067e8:	dd800617 	ldw	r22,24(sp)
100067ec:	dd400517 	ldw	r21,20(sp)
100067f0:	dd000417 	ldw	r20,16(sp)
100067f4:	dcc00317 	ldw	r19,12(sp)
100067f8:	dc800217 	ldw	r18,8(sp)
100067fc:	dc400117 	ldw	r17,4(sp)
10006800:	dc000017 	ldw	r16,0(sp)
10006804:	dec00a04 	addi	sp,sp,40
10006808:	f800283a 	ret

1000680c <___svfiprintf_internal_r>:
1000680c:	2880030b 	ldhu	r2,12(r5)
10006810:	deffc804 	addi	sp,sp,-224
10006814:	dcc03115 	stw	r19,196(sp)
10006818:	dfc03715 	stw	ra,220(sp)
1000681c:	df003615 	stw	fp,216(sp)
10006820:	ddc03515 	stw	r23,212(sp)
10006824:	dd803415 	stw	r22,208(sp)
10006828:	dd403315 	stw	r21,204(sp)
1000682c:	dd003215 	stw	r20,200(sp)
10006830:	dc803015 	stw	r18,192(sp)
10006834:	dc402f15 	stw	r17,188(sp)
10006838:	dc002e15 	stw	r16,184(sp)
1000683c:	d9402315 	stw	r5,140(sp)
10006840:	d9002715 	stw	r4,156(sp)
10006844:	1080200c 	andi	r2,r2,128
10006848:	d9c02415 	stw	r7,144(sp)
1000684c:	3027883a 	mov	r19,r6
10006850:	10000226 	beq	r2,zero,1000685c <___svfiprintf_internal_r+0x50>
10006854:	28800417 	ldw	r2,16(r5)
10006858:	10046d26 	beq	r2,zero,10007a10 <___svfiprintf_internal_r+0x1204>
1000685c:	d8801a04 	addi	r2,sp,104
10006860:	d8c019c4 	addi	r3,sp,103
10006864:	05840074 	movhi	r22,4097
10006868:	10c9c83a 	sub	r4,r2,r3
1000686c:	b5b8b004 	addi	r22,r22,-7488
10006870:	d8801e15 	stw	r2,120(sp)
10006874:	d8c01f15 	stw	r3,124(sp)
10006878:	dec01a15 	stw	sp,104(sp)
1000687c:	d8001c15 	stw	zero,112(sp)
10006880:	d8001b15 	stw	zero,108(sp)
10006884:	d811883a 	mov	r8,sp
10006888:	d8002915 	stw	zero,164(sp)
1000688c:	d8002615 	stw	zero,152(sp)
10006890:	d9002c15 	stw	r4,176(sp)
10006894:	98800007 	ldb	r2,0(r19)
10006898:	10031426 	beq	r2,zero,100074ec <___svfiprintf_internal_r+0xce0>
1000689c:	00c00944 	movi	r3,37
100068a0:	9825883a 	mov	r18,r19
100068a4:	10c0021e 	bne	r2,r3,100068b0 <___svfiprintf_internal_r+0xa4>
100068a8:	00001406 	br	100068fc <___svfiprintf_internal_r+0xf0>
100068ac:	10c00326 	beq	r2,r3,100068bc <___svfiprintf_internal_r+0xb0>
100068b0:	94800044 	addi	r18,r18,1
100068b4:	90800007 	ldb	r2,0(r18)
100068b8:	103ffc1e 	bne	r2,zero,100068ac <__alt_data_end+0xf80068ac>
100068bc:	94e1c83a 	sub	r16,r18,r19
100068c0:	80000e26 	beq	r16,zero,100068fc <___svfiprintf_internal_r+0xf0>
100068c4:	d8c01c17 	ldw	r3,112(sp)
100068c8:	d8801b17 	ldw	r2,108(sp)
100068cc:	44c00015 	stw	r19,0(r8)
100068d0:	1c07883a 	add	r3,r3,r16
100068d4:	10800044 	addi	r2,r2,1
100068d8:	d8c01c15 	stw	r3,112(sp)
100068dc:	44000115 	stw	r16,4(r8)
100068e0:	d8801b15 	stw	r2,108(sp)
100068e4:	00c001c4 	movi	r3,7
100068e8:	18835c16 	blt	r3,r2,1000765c <___svfiprintf_internal_r+0xe50>
100068ec:	42000204 	addi	r8,r8,8
100068f0:	d9402617 	ldw	r5,152(sp)
100068f4:	2c0b883a 	add	r5,r5,r16
100068f8:	d9402615 	stw	r5,152(sp)
100068fc:	90800007 	ldb	r2,0(r18)
10006900:	1002fc26 	beq	r2,zero,100074f4 <___svfiprintf_internal_r+0xce8>
10006904:	0023883a 	mov	r17,zero
10006908:	00bfffc4 	movi	r2,-1
1000690c:	0021883a 	mov	r16,zero
10006910:	94c00044 	addi	r19,r18,1
10006914:	90c00047 	ldb	r3,1(r18)
10006918:	dc402105 	stb	r17,132(sp)
1000691c:	d8001d85 	stb	zero,118(sp)
10006920:	002b883a 	mov	r21,zero
10006924:	d8802015 	stw	r2,128(sp)
10006928:	d8002515 	stw	zero,148(sp)
1000692c:	04801604 	movi	r18,88
10006930:	05000244 	movi	r20,9
10006934:	402f883a 	mov	r23,r8
10006938:	8023883a 	mov	r17,r16
1000693c:	9cc00044 	addi	r19,r19,1
10006940:	18bff804 	addi	r2,r3,-32
10006944:	9081fb36 	bltu	r18,r2,10007134 <___svfiprintf_internal_r+0x928>
10006948:	100490ba 	slli	r2,r2,2
1000694c:	01040034 	movhi	r4,4096
10006950:	211a5804 	addi	r4,r4,26976
10006954:	1105883a 	add	r2,r2,r4
10006958:	10800017 	ldw	r2,0(r2)
1000695c:	1000683a 	jmp	r2
10006960:	10006b60 	cmpeqi	zero,r2,429
10006964:	10007134 	orhi	zero,r2,452
10006968:	10007134 	orhi	zero,r2,452
1000696c:	10006b54 	ori	zero,r2,429
10006970:	10007134 	orhi	zero,r2,452
10006974:	10007134 	orhi	zero,r2,452
10006978:	10007134 	orhi	zero,r2,452
1000697c:	10007134 	orhi	zero,r2,452
10006980:	10007134 	orhi	zero,r2,452
10006984:	10007134 	orhi	zero,r2,452
10006988:	10006ac4 	addi	zero,r2,427
1000698c:	10006cc0 	call	110006cc <_gp+0xfe83bc>
10006990:	10007134 	orhi	zero,r2,452
10006994:	10006aec 	andhi	zero,r2,427
10006998:	10007170 	cmpltui	zero,r2,453
1000699c:	10007134 	orhi	zero,r2,452
100069a0:	10007164 	muli	zero,r2,453
100069a4:	100070f8 	rdprs	zero,r2,451
100069a8:	100070f8 	rdprs	zero,r2,451
100069ac:	100070f8 	rdprs	zero,r2,451
100069b0:	100070f8 	rdprs	zero,r2,451
100069b4:	100070f8 	rdprs	zero,r2,451
100069b8:	100070f8 	rdprs	zero,r2,451
100069bc:	100070f8 	rdprs	zero,r2,451
100069c0:	100070f8 	rdprs	zero,r2,451
100069c4:	100070f8 	rdprs	zero,r2,451
100069c8:	10007134 	orhi	zero,r2,452
100069cc:	10007134 	orhi	zero,r2,452
100069d0:	10007134 	orhi	zero,r2,452
100069d4:	10007134 	orhi	zero,r2,452
100069d8:	10007134 	orhi	zero,r2,452
100069dc:	10007134 	orhi	zero,r2,452
100069e0:	10007134 	orhi	zero,r2,452
100069e4:	10007134 	orhi	zero,r2,452
100069e8:	10007134 	orhi	zero,r2,452
100069ec:	10007134 	orhi	zero,r2,452
100069f0:	1000707c 	xorhi	zero,r2,449
100069f4:	10007134 	orhi	zero,r2,452
100069f8:	10007134 	orhi	zero,r2,452
100069fc:	10007134 	orhi	zero,r2,452
10006a00:	10007134 	orhi	zero,r2,452
10006a04:	10007134 	orhi	zero,r2,452
10006a08:	10007134 	orhi	zero,r2,452
10006a0c:	10007134 	orhi	zero,r2,452
10006a10:	10007134 	orhi	zero,r2,452
10006a14:	10007134 	orhi	zero,r2,452
10006a18:	10007134 	orhi	zero,r2,452
10006a1c:	1000722c 	andhi	zero,r2,456
10006a20:	10007134 	orhi	zero,r2,452
10006a24:	10007134 	orhi	zero,r2,452
10006a28:	10007134 	orhi	zero,r2,452
10006a2c:	10007134 	orhi	zero,r2,452
10006a30:	10007134 	orhi	zero,r2,452
10006a34:	100071b8 	rdprs	zero,r2,454
10006a38:	10007134 	orhi	zero,r2,452
10006a3c:	10007134 	orhi	zero,r2,452
10006a40:	10006eb8 	rdprs	zero,r2,442
10006a44:	10007134 	orhi	zero,r2,452
10006a48:	10007134 	orhi	zero,r2,452
10006a4c:	10007134 	orhi	zero,r2,452
10006a50:	10007134 	orhi	zero,r2,452
10006a54:	10007134 	orhi	zero,r2,452
10006a58:	10007134 	orhi	zero,r2,452
10006a5c:	10007134 	orhi	zero,r2,452
10006a60:	10007134 	orhi	zero,r2,452
10006a64:	10007134 	orhi	zero,r2,452
10006a68:	10007134 	orhi	zero,r2,452
10006a6c:	10006d84 	addi	zero,r2,438
10006a70:	10006f68 	cmpgeui	zero,r2,445
10006a74:	10007134 	orhi	zero,r2,452
10006a78:	10007134 	orhi	zero,r2,452
10006a7c:	10007134 	orhi	zero,r2,452
10006a80:	10006f5c 	xori	zero,r2,445
10006a84:	10006f68 	cmpgeui	zero,r2,445
10006a88:	10007134 	orhi	zero,r2,452
10006a8c:	10007134 	orhi	zero,r2,452
10006a90:	10006f48 	cmpgei	zero,r2,445
10006a94:	10007134 	orhi	zero,r2,452
10006a98:	10006f08 	cmpgei	zero,r2,444
10006a9c:	10006cd4 	ori	zero,r2,435
10006aa0:	10006af8 	rdprs	zero,r2,427
10006aa4:	10007070 	cmpltui	zero,r2,449
10006aa8:	10007134 	orhi	zero,r2,452
10006aac:	1000701c 	xori	zero,r2,448
10006ab0:	10007134 	orhi	zero,r2,452
10006ab4:	10006c38 	rdprs	zero,r2,432
10006ab8:	10007134 	orhi	zero,r2,452
10006abc:	10007134 	orhi	zero,r2,452
10006ac0:	10006b84 	addi	zero,r2,430
10006ac4:	d9002417 	ldw	r4,144(sp)
10006ac8:	d9402417 	ldw	r5,144(sp)
10006acc:	21000017 	ldw	r4,0(r4)
10006ad0:	28800104 	addi	r2,r5,4
10006ad4:	d9002515 	stw	r4,148(sp)
10006ad8:	20032b0e 	bge	r4,zero,10007788 <___svfiprintf_internal_r+0xf7c>
10006adc:	d8c02517 	ldw	r3,148(sp)
10006ae0:	d8802415 	stw	r2,144(sp)
10006ae4:	00c7c83a 	sub	r3,zero,r3
10006ae8:	d8c02515 	stw	r3,148(sp)
10006aec:	8c400114 	ori	r17,r17,4
10006af0:	98c00007 	ldb	r3,0(r19)
10006af4:	003f9106 	br	1000693c <__alt_data_end+0xf800693c>
10006af8:	00800c04 	movi	r2,48
10006afc:	d9402417 	ldw	r5,144(sp)
10006b00:	d9002017 	ldw	r4,128(sp)
10006b04:	d8801d05 	stb	r2,116(sp)
10006b08:	00801e04 	movi	r2,120
10006b0c:	d8801d45 	stb	r2,117(sp)
10006b10:	d8001d85 	stb	zero,118(sp)
10006b14:	b811883a 	mov	r8,r23
10006b18:	28c00104 	addi	r3,r5,4
10006b1c:	2c800017 	ldw	r18,0(r5)
10006b20:	0029883a 	mov	r20,zero
10006b24:	88800094 	ori	r2,r17,2
10006b28:	20036316 	blt	r4,zero,100078b8 <___svfiprintf_internal_r+0x10ac>
10006b2c:	00bfdfc4 	movi	r2,-129
10006b30:	88a0703a 	and	r16,r17,r2
10006b34:	d8c02415 	stw	r3,144(sp)
10006b38:	84000094 	ori	r16,r16,2
10006b3c:	90031c26 	beq	r18,zero,100077b0 <___svfiprintf_internal_r+0xfa4>
10006b40:	01440074 	movhi	r5,4097
10006b44:	29784f04 	addi	r5,r5,-7876
10006b48:	002b883a 	mov	r21,zero
10006b4c:	d9402915 	stw	r5,164(sp)
10006b50:	00002906 	br	10006bf8 <___svfiprintf_internal_r+0x3ec>
10006b54:	8c400054 	ori	r17,r17,1
10006b58:	98c00007 	ldb	r3,0(r19)
10006b5c:	003f7706 	br	1000693c <__alt_data_end+0xf800693c>
10006b60:	a8803fcc 	andi	r2,r21,255
10006b64:	1080201c 	xori	r2,r2,128
10006b68:	10bfe004 	addi	r2,r2,-128
10006b6c:	10032a1e 	bne	r2,zero,10007818 <___svfiprintf_internal_r+0x100c>
10006b70:	00c00044 	movi	r3,1
10006b74:	d8c02105 	stb	r3,132(sp)
10006b78:	05400804 	movi	r21,32
10006b7c:	98c00007 	ldb	r3,0(r19)
10006b80:	003f6e06 	br	1000693c <__alt_data_end+0xf800693c>
10006b84:	8821883a 	mov	r16,r17
10006b88:	dc402103 	ldbu	r17,132(sp)
10006b8c:	b811883a 	mov	r8,r23
10006b90:	8c403fcc 	andi	r17,r17,255
10006b94:	8803f01e 	bne	r17,zero,10007b58 <___svfiprintf_internal_r+0x134c>
10006b98:	00840074 	movhi	r2,4097
10006b9c:	10b84f04 	addi	r2,r2,-7876
10006ba0:	d8802915 	stw	r2,164(sp)
10006ba4:	8080080c 	andi	r2,r16,32
10006ba8:	1000cd26 	beq	r2,zero,10006ee0 <___svfiprintf_internal_r+0x6d4>
10006bac:	d9002417 	ldw	r4,144(sp)
10006bb0:	24800017 	ldw	r18,0(r4)
10006bb4:	25000117 	ldw	r20,4(r4)
10006bb8:	21000204 	addi	r4,r4,8
10006bbc:	d9002415 	stw	r4,144(sp)
10006bc0:	8080004c 	andi	r2,r16,1
10006bc4:	1002c726 	beq	r2,zero,100076e4 <___svfiprintf_internal_r+0xed8>
10006bc8:	9504b03a 	or	r2,r18,r20
10006bcc:	1003061e 	bne	r2,zero,100077e8 <___svfiprintf_internal_r+0xfdc>
10006bd0:	d9002017 	ldw	r4,128(sp)
10006bd4:	d8001d85 	stb	zero,118(sp)
10006bd8:	20033e16 	blt	r4,zero,100078d4 <___svfiprintf_internal_r+0x10c8>
10006bdc:	00bfdfc4 	movi	r2,-129
10006be0:	80a0703a 	and	r16,r16,r2
10006be4:	d9402017 	ldw	r5,128(sp)
10006be8:	002b883a 	mov	r21,zero
10006bec:	28002826 	beq	r5,zero,10006c90 <___svfiprintf_internal_r+0x484>
10006bf0:	0025883a 	mov	r18,zero
10006bf4:	0029883a 	mov	r20,zero
10006bf8:	d9002917 	ldw	r4,164(sp)
10006bfc:	dc401a04 	addi	r17,sp,104
10006c00:	908003cc 	andi	r2,r18,15
10006c04:	a006973a 	slli	r3,r20,28
10006c08:	2085883a 	add	r2,r4,r2
10006c0c:	9024d13a 	srli	r18,r18,4
10006c10:	10800003 	ldbu	r2,0(r2)
10006c14:	a028d13a 	srli	r20,r20,4
10006c18:	8c7fffc4 	addi	r17,r17,-1
10006c1c:	1ca4b03a 	or	r18,r3,r18
10006c20:	88800005 	stb	r2,0(r17)
10006c24:	9504b03a 	or	r2,r18,r20
10006c28:	103ff51e 	bne	r2,zero,10006c00 <__alt_data_end+0xf8006c00>
10006c2c:	d8801e17 	ldw	r2,120(sp)
10006c30:	1469c83a 	sub	r20,r2,r17
10006c34:	00001906 	br	10006c9c <___svfiprintf_internal_r+0x490>
10006c38:	8821883a 	mov	r16,r17
10006c3c:	dc402103 	ldbu	r17,132(sp)
10006c40:	b811883a 	mov	r8,r23
10006c44:	8c403fcc 	andi	r17,r17,255
10006c48:	8803d01e 	bne	r17,zero,10007b8c <___svfiprintf_internal_r+0x1380>
10006c4c:	8080080c 	andi	r2,r16,32
10006c50:	10016126 	beq	r2,zero,100071d8 <___svfiprintf_internal_r+0x9cc>
10006c54:	d9002417 	ldw	r4,144(sp)
10006c58:	d9402017 	ldw	r5,128(sp)
10006c5c:	d8001d85 	stb	zero,118(sp)
10006c60:	20c00204 	addi	r3,r4,8
10006c64:	24800017 	ldw	r18,0(r4)
10006c68:	25000117 	ldw	r20,4(r4)
10006c6c:	28030f16 	blt	r5,zero,100078ac <___svfiprintf_internal_r+0x10a0>
10006c70:	013fdfc4 	movi	r4,-129
10006c74:	9504b03a 	or	r2,r18,r20
10006c78:	d8c02415 	stw	r3,144(sp)
10006c7c:	8120703a 	and	r16,r16,r4
10006c80:	002b883a 	mov	r21,zero
10006c84:	1000cd1e 	bne	r2,zero,10006fbc <___svfiprintf_internal_r+0x7b0>
10006c88:	d8c02017 	ldw	r3,128(sp)
10006c8c:	1803141e 	bne	r3,zero,100078e0 <___svfiprintf_internal_r+0x10d4>
10006c90:	d8002015 	stw	zero,128(sp)
10006c94:	0029883a 	mov	r20,zero
10006c98:	dc401a04 	addi	r17,sp,104
10006c9c:	dc802017 	ldw	r18,128(sp)
10006ca0:	9500010e 	bge	r18,r20,10006ca8 <___svfiprintf_internal_r+0x49c>
10006ca4:	a025883a 	mov	r18,r20
10006ca8:	ad403fcc 	andi	r21,r21,255
10006cac:	ad40201c 	xori	r21,r21,128
10006cb0:	ad7fe004 	addi	r21,r21,-128
10006cb4:	a8003f26 	beq	r21,zero,10006db4 <___svfiprintf_internal_r+0x5a8>
10006cb8:	94800044 	addi	r18,r18,1
10006cbc:	00003d06 	br	10006db4 <___svfiprintf_internal_r+0x5a8>
10006cc0:	00c00044 	movi	r3,1
10006cc4:	d8c02105 	stb	r3,132(sp)
10006cc8:	05400ac4 	movi	r21,43
10006ccc:	98c00007 	ldb	r3,0(r19)
10006cd0:	003f1a06 	br	1000693c <__alt_data_end+0xf800693c>
10006cd4:	8821883a 	mov	r16,r17
10006cd8:	dc402103 	ldbu	r17,132(sp)
10006cdc:	b811883a 	mov	r8,r23
10006ce0:	8c403fcc 	andi	r17,r17,255
10006ce4:	8803a71e 	bne	r17,zero,10007b84 <___svfiprintf_internal_r+0x1378>
10006ce8:	8080080c 	andi	r2,r16,32
10006cec:	10015726 	beq	r2,zero,1000724c <___svfiprintf_internal_r+0xa40>
10006cf0:	d8c02417 	ldw	r3,144(sp)
10006cf4:	d9002017 	ldw	r4,128(sp)
10006cf8:	d8001d85 	stb	zero,118(sp)
10006cfc:	18800204 	addi	r2,r3,8
10006d00:	1c800017 	ldw	r18,0(r3)
10006d04:	1d000117 	ldw	r20,4(r3)
10006d08:	2002db16 	blt	r4,zero,10007878 <___svfiprintf_internal_r+0x106c>
10006d0c:	013fdfc4 	movi	r4,-129
10006d10:	9506b03a 	or	r3,r18,r20
10006d14:	d8802415 	stw	r2,144(sp)
10006d18:	8120703a 	and	r16,r16,r4
10006d1c:	18015826 	beq	r3,zero,10007280 <___svfiprintf_internal_r+0xa74>
10006d20:	002b883a 	mov	r21,zero
10006d24:	dc401a04 	addi	r17,sp,104
10006d28:	9006d0fa 	srli	r3,r18,3
10006d2c:	a008977a 	slli	r4,r20,29
10006d30:	a028d0fa 	srli	r20,r20,3
10006d34:	948001cc 	andi	r18,r18,7
10006d38:	90800c04 	addi	r2,r18,48
10006d3c:	8c7fffc4 	addi	r17,r17,-1
10006d40:	20e4b03a 	or	r18,r4,r3
10006d44:	88800005 	stb	r2,0(r17)
10006d48:	9506b03a 	or	r3,r18,r20
10006d4c:	183ff61e 	bne	r3,zero,10006d28 <__alt_data_end+0xf8006d28>
10006d50:	80c0004c 	andi	r3,r16,1
10006d54:	18028926 	beq	r3,zero,1000777c <___svfiprintf_internal_r+0xf70>
10006d58:	10803fcc 	andi	r2,r2,255
10006d5c:	1080201c 	xori	r2,r2,128
10006d60:	10bfe004 	addi	r2,r2,-128
10006d64:	00c00c04 	movi	r3,48
10006d68:	10ffb026 	beq	r2,r3,10006c2c <__alt_data_end+0xf8006c2c>
10006d6c:	88ffffc5 	stb	r3,-1(r17)
10006d70:	d8c01e17 	ldw	r3,120(sp)
10006d74:	88bfffc4 	addi	r2,r17,-1
10006d78:	1023883a 	mov	r17,r2
10006d7c:	18a9c83a 	sub	r20,r3,r2
10006d80:	003fc606 	br	10006c9c <__alt_data_end+0xf8006c9c>
10006d84:	d8c02417 	ldw	r3,144(sp)
10006d88:	04800044 	movi	r18,1
10006d8c:	8821883a 	mov	r16,r17
10006d90:	18800017 	ldw	r2,0(r3)
10006d94:	18c00104 	addi	r3,r3,4
10006d98:	b811883a 	mov	r8,r23
10006d9c:	d8001d85 	stb	zero,118(sp)
10006da0:	d8801005 	stb	r2,64(sp)
10006da4:	d8c02415 	stw	r3,144(sp)
10006da8:	9029883a 	mov	r20,r18
10006dac:	dc401004 	addi	r17,sp,64
10006db0:	d8002015 	stw	zero,128(sp)
10006db4:	80c0008c 	andi	r3,r16,2
10006db8:	d8c02115 	stw	r3,132(sp)
10006dbc:	18000126 	beq	r3,zero,10006dc4 <___svfiprintf_internal_r+0x5b8>
10006dc0:	94800084 	addi	r18,r18,2
10006dc4:	80c0210c 	andi	r3,r16,132
10006dc8:	d8c02215 	stw	r3,136(sp)
10006dcc:	1801321e 	bne	r3,zero,10007298 <___svfiprintf_internal_r+0xa8c>
10006dd0:	d9002517 	ldw	r4,148(sp)
10006dd4:	24b9c83a 	sub	fp,r4,r18
10006dd8:	07012f0e 	bge	zero,fp,10007298 <___svfiprintf_internal_r+0xa8c>
10006ddc:	02400404 	movi	r9,16
10006de0:	d8c01c17 	ldw	r3,112(sp)
10006de4:	d8801b17 	ldw	r2,108(sp)
10006de8:	4f03250e 	bge	r9,fp,10007a80 <___svfiprintf_internal_r+0x1274>
10006dec:	01040074 	movhi	r4,4097
10006df0:	2138b404 	addi	r4,r4,-7472
10006df4:	dc002a15 	stw	r16,168(sp)
10006df8:	dc402b15 	stw	r17,172(sp)
10006dfc:	d9002815 	stw	r4,160(sp)
10006e00:	e023883a 	mov	r17,fp
10006e04:	482f883a 	mov	r23,r9
10006e08:	9839883a 	mov	fp,r19
10006e0c:	054001c4 	movi	r21,7
10006e10:	9027883a 	mov	r19,r18
10006e14:	dc002717 	ldw	r16,156(sp)
10006e18:	dc802317 	ldw	r18,140(sp)
10006e1c:	00000306 	br	10006e2c <___svfiprintf_internal_r+0x620>
10006e20:	8c7ffc04 	addi	r17,r17,-16
10006e24:	42000204 	addi	r8,r8,8
10006e28:	bc40130e 	bge	r23,r17,10006e78 <___svfiprintf_internal_r+0x66c>
10006e2c:	01440074 	movhi	r5,4097
10006e30:	18c00404 	addi	r3,r3,16
10006e34:	10800044 	addi	r2,r2,1
10006e38:	2978b404 	addi	r5,r5,-7472
10006e3c:	41400015 	stw	r5,0(r8)
10006e40:	45c00115 	stw	r23,4(r8)
10006e44:	d8c01c15 	stw	r3,112(sp)
10006e48:	d8801b15 	stw	r2,108(sp)
10006e4c:	a8bff40e 	bge	r21,r2,10006e20 <__alt_data_end+0xf8006e20>
10006e50:	d9801a04 	addi	r6,sp,104
10006e54:	900b883a 	mov	r5,r18
10006e58:	8009883a 	mov	r4,r16
10006e5c:	000663c0 	call	1000663c <__ssprint_r>
10006e60:	1001aa1e 	bne	r2,zero,1000750c <___svfiprintf_internal_r+0xd00>
10006e64:	8c7ffc04 	addi	r17,r17,-16
10006e68:	d8c01c17 	ldw	r3,112(sp)
10006e6c:	d8801b17 	ldw	r2,108(sp)
10006e70:	d811883a 	mov	r8,sp
10006e74:	bc7fed16 	blt	r23,r17,10006e2c <__alt_data_end+0xf8006e2c>
10006e78:	9825883a 	mov	r18,r19
10006e7c:	dc002a17 	ldw	r16,168(sp)
10006e80:	e027883a 	mov	r19,fp
10006e84:	8839883a 	mov	fp,r17
10006e88:	dc402b17 	ldw	r17,172(sp)
10006e8c:	d9002817 	ldw	r4,160(sp)
10006e90:	e0c7883a 	add	r3,fp,r3
10006e94:	10800044 	addi	r2,r2,1
10006e98:	41000015 	stw	r4,0(r8)
10006e9c:	47000115 	stw	fp,4(r8)
10006ea0:	d8c01c15 	stw	r3,112(sp)
10006ea4:	d8801b15 	stw	r2,108(sp)
10006ea8:	010001c4 	movi	r4,7
10006eac:	20821616 	blt	r4,r2,10007708 <___svfiprintf_internal_r+0xefc>
10006eb0:	42000204 	addi	r8,r8,8
10006eb4:	0000fa06 	br	100072a0 <___svfiprintf_internal_r+0xa94>
10006eb8:	8821883a 	mov	r16,r17
10006ebc:	dc402103 	ldbu	r17,132(sp)
10006ec0:	b811883a 	mov	r8,r23
10006ec4:	8c403fcc 	andi	r17,r17,255
10006ec8:	8803361e 	bne	r17,zero,10007ba4 <___svfiprintf_internal_r+0x1398>
10006ecc:	01440074 	movhi	r5,4097
10006ed0:	29784a04 	addi	r5,r5,-7896
10006ed4:	d9402915 	stw	r5,164(sp)
10006ed8:	8080080c 	andi	r2,r16,32
10006edc:	103f331e 	bne	r2,zero,10006bac <__alt_data_end+0xf8006bac>
10006ee0:	8080040c 	andi	r2,r16,16
10006ee4:	1002551e 	bne	r2,zero,1000783c <___svfiprintf_internal_r+0x1030>
10006ee8:	8080100c 	andi	r2,r16,64
10006eec:	1002a626 	beq	r2,zero,10007988 <___svfiprintf_internal_r+0x117c>
10006ef0:	d8802417 	ldw	r2,144(sp)
10006ef4:	0029883a 	mov	r20,zero
10006ef8:	1480000b 	ldhu	r18,0(r2)
10006efc:	10800104 	addi	r2,r2,4
10006f00:	d8802415 	stw	r2,144(sp)
10006f04:	003f2e06 	br	10006bc0 <__alt_data_end+0xf8006bc0>
10006f08:	8821883a 	mov	r16,r17
10006f0c:	dc402103 	ldbu	r17,132(sp)
10006f10:	b811883a 	mov	r8,r23
10006f14:	8c403fcc 	andi	r17,r17,255
10006f18:	88030b1e 	bne	r17,zero,10007b48 <___svfiprintf_internal_r+0x133c>
10006f1c:	8080080c 	andi	r2,r16,32
10006f20:	1002271e 	bne	r2,zero,100077c0 <___svfiprintf_internal_r+0xfb4>
10006f24:	8080040c 	andi	r2,r16,16
10006f28:	10028e26 	beq	r2,zero,10007964 <___svfiprintf_internal_r+0x1158>
10006f2c:	d8c02417 	ldw	r3,144(sp)
10006f30:	d9002617 	ldw	r4,152(sp)
10006f34:	18800017 	ldw	r2,0(r3)
10006f38:	18c00104 	addi	r3,r3,4
10006f3c:	d8c02415 	stw	r3,144(sp)
10006f40:	11000015 	stw	r4,0(r2)
10006f44:	003e5306 	br	10006894 <__alt_data_end+0xf8006894>
10006f48:	98c00007 	ldb	r3,0(r19)
10006f4c:	01401b04 	movi	r5,108
10006f50:	19424f26 	beq	r3,r5,10007890 <___svfiprintf_internal_r+0x1084>
10006f54:	8c400414 	ori	r17,r17,16
10006f58:	003e7806 	br	1000693c <__alt_data_end+0xf800693c>
10006f5c:	8c401014 	ori	r17,r17,64
10006f60:	98c00007 	ldb	r3,0(r19)
10006f64:	003e7506 	br	1000693c <__alt_data_end+0xf800693c>
10006f68:	8821883a 	mov	r16,r17
10006f6c:	dc402103 	ldbu	r17,132(sp)
10006f70:	b811883a 	mov	r8,r23
10006f74:	8c403fcc 	andi	r17,r17,255
10006f78:	8802fe1e 	bne	r17,zero,10007b74 <___svfiprintf_internal_r+0x1368>
10006f7c:	8080080c 	andi	r2,r16,32
10006f80:	10004626 	beq	r2,zero,1000709c <___svfiprintf_internal_r+0x890>
10006f84:	d9002417 	ldw	r4,144(sp)
10006f88:	20800117 	ldw	r2,4(r4)
10006f8c:	24800017 	ldw	r18,0(r4)
10006f90:	21000204 	addi	r4,r4,8
10006f94:	d9002415 	stw	r4,144(sp)
10006f98:	1029883a 	mov	r20,r2
10006f9c:	10004a16 	blt	r2,zero,100070c8 <___svfiprintf_internal_r+0x8bc>
10006fa0:	d9002017 	ldw	r4,128(sp)
10006fa4:	dd401d83 	ldbu	r21,118(sp)
10006fa8:	2001eb16 	blt	r4,zero,10007758 <___svfiprintf_internal_r+0xf4c>
10006fac:	00ffdfc4 	movi	r3,-129
10006fb0:	9504b03a 	or	r2,r18,r20
10006fb4:	80e0703a 	and	r16,r16,r3
10006fb8:	103f3326 	beq	r2,zero,10006c88 <__alt_data_end+0xf8006c88>
10006fbc:	a0009426 	beq	r20,zero,10007210 <___svfiprintf_internal_r+0xa04>
10006fc0:	dc401a04 	addi	r17,sp,104
10006fc4:	402f883a 	mov	r23,r8
10006fc8:	9009883a 	mov	r4,r18
10006fcc:	a00b883a 	mov	r5,r20
10006fd0:	01800284 	movi	r6,10
10006fd4:	000f883a 	mov	r7,zero
10006fd8:	0008fac0 	call	10008fac <__umoddi3>
10006fdc:	10800c04 	addi	r2,r2,48
10006fe0:	8c7fffc4 	addi	r17,r17,-1
10006fe4:	9009883a 	mov	r4,r18
10006fe8:	a00b883a 	mov	r5,r20
10006fec:	88800005 	stb	r2,0(r17)
10006ff0:	01800284 	movi	r6,10
10006ff4:	000f883a 	mov	r7,zero
10006ff8:	00089b00 	call	100089b0 <__udivdi3>
10006ffc:	1025883a 	mov	r18,r2
10007000:	10c4b03a 	or	r2,r2,r3
10007004:	1829883a 	mov	r20,r3
10007008:	103fef1e 	bne	r2,zero,10006fc8 <__alt_data_end+0xf8006fc8>
1000700c:	d9001e17 	ldw	r4,120(sp)
10007010:	b811883a 	mov	r8,r23
10007014:	2469c83a 	sub	r20,r4,r17
10007018:	003f2006 	br	10006c9c <__alt_data_end+0xf8006c9c>
1000701c:	d8802417 	ldw	r2,144(sp)
10007020:	8821883a 	mov	r16,r17
10007024:	d8001d85 	stb	zero,118(sp)
10007028:	14400017 	ldw	r17,0(r2)
1000702c:	b811883a 	mov	r8,r23
10007030:	15c00104 	addi	r23,r2,4
10007034:	88026c26 	beq	r17,zero,100079e8 <___svfiprintf_internal_r+0x11dc>
10007038:	d8c02017 	ldw	r3,128(sp)
1000703c:	18025f16 	blt	r3,zero,100079bc <___svfiprintf_internal_r+0x11b0>
10007040:	180d883a 	mov	r6,r3
10007044:	000b883a 	mov	r5,zero
10007048:	8809883a 	mov	r4,r17
1000704c:	da002d15 	stw	r8,180(sp)
10007050:	00051b40 	call	100051b4 <memchr>
10007054:	da002d17 	ldw	r8,180(sp)
10007058:	1002a526 	beq	r2,zero,10007af0 <___svfiprintf_internal_r+0x12e4>
1000705c:	1469c83a 	sub	r20,r2,r17
10007060:	dd401d83 	ldbu	r21,118(sp)
10007064:	ddc02415 	stw	r23,144(sp)
10007068:	d8002015 	stw	zero,128(sp)
1000706c:	003f0b06 	br	10006c9c <__alt_data_end+0xf8006c9c>
10007070:	8c400814 	ori	r17,r17,32
10007074:	98c00007 	ldb	r3,0(r19)
10007078:	003e3006 	br	1000693c <__alt_data_end+0xf800693c>
1000707c:	8821883a 	mov	r16,r17
10007080:	dc402103 	ldbu	r17,132(sp)
10007084:	b811883a 	mov	r8,r23
10007088:	8c403fcc 	andi	r17,r17,255
1000708c:	8802b01e 	bne	r17,zero,10007b50 <___svfiprintf_internal_r+0x1344>
10007090:	84000414 	ori	r16,r16,16
10007094:	8080080c 	andi	r2,r16,32
10007098:	103fba1e 	bne	r2,zero,10006f84 <__alt_data_end+0xf8006f84>
1000709c:	8080040c 	andi	r2,r16,16
100070a0:	1001df1e 	bne	r2,zero,10007820 <___svfiprintf_internal_r+0x1014>
100070a4:	8080100c 	andi	r2,r16,64
100070a8:	10023d26 	beq	r2,zero,100079a0 <___svfiprintf_internal_r+0x1194>
100070ac:	d8802417 	ldw	r2,144(sp)
100070b0:	1480000f 	ldh	r18,0(r2)
100070b4:	10800104 	addi	r2,r2,4
100070b8:	d8802415 	stw	r2,144(sp)
100070bc:	9029d7fa 	srai	r20,r18,31
100070c0:	a005883a 	mov	r2,r20
100070c4:	103fb60e 	bge	r2,zero,10006fa0 <__alt_data_end+0xf8006fa0>
100070c8:	d9402017 	ldw	r5,128(sp)
100070cc:	04a5c83a 	sub	r18,zero,r18
100070d0:	05400b44 	movi	r21,45
100070d4:	9004c03a 	cmpne	r2,r18,zero
100070d8:	0529c83a 	sub	r20,zero,r20
100070dc:	dd401d85 	stb	r21,118(sp)
100070e0:	a0a9c83a 	sub	r20,r20,r2
100070e4:	28026c16 	blt	r5,zero,10007a98 <___svfiprintf_internal_r+0x128c>
100070e8:	00bfdfc4 	movi	r2,-129
100070ec:	80a0703a 	and	r16,r16,r2
100070f0:	a03fb31e 	bne	r20,zero,10006fc0 <__alt_data_end+0xf8006fc0>
100070f4:	00004606 	br	10007210 <___svfiprintf_internal_r+0xa04>
100070f8:	9839883a 	mov	fp,r19
100070fc:	d8002515 	stw	zero,148(sp)
10007100:	1c3ff404 	addi	r16,r3,-48
10007104:	0009883a 	mov	r4,zero
10007108:	01400284 	movi	r5,10
1000710c:	0000b600 	call	10000b60 <__mulsi3>
10007110:	e0c00007 	ldb	r3,0(fp)
10007114:	8089883a 	add	r4,r16,r2
10007118:	9cc00044 	addi	r19,r19,1
1000711c:	1c3ff404 	addi	r16,r3,-48
10007120:	9839883a 	mov	fp,r19
10007124:	a43ff82e 	bgeu	r20,r16,10007108 <__alt_data_end+0xf8007108>
10007128:	d9002515 	stw	r4,148(sp)
1000712c:	18bff804 	addi	r2,r3,-32
10007130:	90be052e 	bgeu	r18,r2,10006948 <__alt_data_end+0xf8006948>
10007134:	8821883a 	mov	r16,r17
10007138:	dc402103 	ldbu	r17,132(sp)
1000713c:	b811883a 	mov	r8,r23
10007140:	8c403fcc 	andi	r17,r17,255
10007144:	88028d1e 	bne	r17,zero,10007b7c <___svfiprintf_internal_r+0x1370>
10007148:	1800ea26 	beq	r3,zero,100074f4 <___svfiprintf_internal_r+0xce8>
1000714c:	04800044 	movi	r18,1
10007150:	d8c01005 	stb	r3,64(sp)
10007154:	d8001d85 	stb	zero,118(sp)
10007158:	9029883a 	mov	r20,r18
1000715c:	dc401004 	addi	r17,sp,64
10007160:	003f1306 	br	10006db0 <__alt_data_end+0xf8006db0>
10007164:	8c402014 	ori	r17,r17,128
10007168:	98c00007 	ldb	r3,0(r19)
1000716c:	003df306 	br	1000693c <__alt_data_end+0xf800693c>
10007170:	98c00007 	ldb	r3,0(r19)
10007174:	01000a84 	movi	r4,42
10007178:	9f000044 	addi	fp,r19,1
1000717c:	19026326 	beq	r3,r4,10007b0c <___svfiprintf_internal_r+0x1300>
10007180:	1c3ff404 	addi	r16,r3,-48
10007184:	0009883a 	mov	r4,zero
10007188:	a4025636 	bltu	r20,r16,10007ae4 <___svfiprintf_internal_r+0x12d8>
1000718c:	01400284 	movi	r5,10
10007190:	0000b600 	call	10000b60 <__mulsi3>
10007194:	e0c00007 	ldb	r3,0(fp)
10007198:	1409883a 	add	r4,r2,r16
1000719c:	e4c00044 	addi	r19,fp,1
100071a0:	1c3ff404 	addi	r16,r3,-48
100071a4:	9839883a 	mov	fp,r19
100071a8:	a43ff82e 	bgeu	r20,r16,1000718c <__alt_data_end+0xf800718c>
100071ac:	20020c16 	blt	r4,zero,100079e0 <___svfiprintf_internal_r+0x11d4>
100071b0:	d9002015 	stw	r4,128(sp)
100071b4:	003de206 	br	10006940 <__alt_data_end+0xf8006940>
100071b8:	8821883a 	mov	r16,r17
100071bc:	dc402103 	ldbu	r17,132(sp)
100071c0:	b811883a 	mov	r8,r23
100071c4:	8c403fcc 	andi	r17,r17,255
100071c8:	8802721e 	bne	r17,zero,10007b94 <___svfiprintf_internal_r+0x1388>
100071cc:	84000414 	ori	r16,r16,16
100071d0:	8080080c 	andi	r2,r16,32
100071d4:	103e9f1e 	bne	r2,zero,10006c54 <__alt_data_end+0xf8006c54>
100071d8:	8080040c 	andi	r2,r16,16
100071dc:	10015326 	beq	r2,zero,1000772c <___svfiprintf_internal_r+0xf20>
100071e0:	d8c02417 	ldw	r3,144(sp)
100071e4:	d9002017 	ldw	r4,128(sp)
100071e8:	d8001d85 	stb	zero,118(sp)
100071ec:	18800104 	addi	r2,r3,4
100071f0:	1c800017 	ldw	r18,0(r3)
100071f4:	0029883a 	mov	r20,zero
100071f8:	20015516 	blt	r4,zero,10007750 <___svfiprintf_internal_r+0xf44>
100071fc:	00ffdfc4 	movi	r3,-129
10007200:	d8802415 	stw	r2,144(sp)
10007204:	80e0703a 	and	r16,r16,r3
10007208:	002b883a 	mov	r21,zero
1000720c:	903e9e26 	beq	r18,zero,10006c88 <__alt_data_end+0xf8006c88>
10007210:	00800244 	movi	r2,9
10007214:	14bf6a36 	bltu	r2,r18,10006fc0 <__alt_data_end+0xf8006fc0>
10007218:	94800c04 	addi	r18,r18,48
1000721c:	dc8019c5 	stb	r18,103(sp)
10007220:	dd002c17 	ldw	r20,176(sp)
10007224:	dc4019c4 	addi	r17,sp,103
10007228:	003e9c06 	br	10006c9c <__alt_data_end+0xf8006c9c>
1000722c:	8821883a 	mov	r16,r17
10007230:	dc402103 	ldbu	r17,132(sp)
10007234:	b811883a 	mov	r8,r23
10007238:	8c403fcc 	andi	r17,r17,255
1000723c:	8802571e 	bne	r17,zero,10007b9c <___svfiprintf_internal_r+0x1390>
10007240:	84000414 	ori	r16,r16,16
10007244:	8080080c 	andi	r2,r16,32
10007248:	103ea91e 	bne	r2,zero,10006cf0 <__alt_data_end+0xf8006cf0>
1000724c:	8080040c 	andi	r2,r16,16
10007250:	10018026 	beq	r2,zero,10007854 <___svfiprintf_internal_r+0x1048>
10007254:	d9402417 	ldw	r5,144(sp)
10007258:	d8c02017 	ldw	r3,128(sp)
1000725c:	d8001d85 	stb	zero,118(sp)
10007260:	28800104 	addi	r2,r5,4
10007264:	2c800017 	ldw	r18,0(r5)
10007268:	0029883a 	mov	r20,zero
1000726c:	18018216 	blt	r3,zero,10007878 <___svfiprintf_internal_r+0x106c>
10007270:	00ffdfc4 	movi	r3,-129
10007274:	d8802415 	stw	r2,144(sp)
10007278:	80e0703a 	and	r16,r16,r3
1000727c:	903ea81e 	bne	r18,zero,10006d20 <__alt_data_end+0xf8006d20>
10007280:	d8802017 	ldw	r2,128(sp)
10007284:	002b883a 	mov	r21,zero
10007288:	1001f226 	beq	r2,zero,10007a54 <___svfiprintf_internal_r+0x1248>
1000728c:	0025883a 	mov	r18,zero
10007290:	0029883a 	mov	r20,zero
10007294:	003ea306 	br	10006d24 <__alt_data_end+0xf8006d24>
10007298:	d8c01c17 	ldw	r3,112(sp)
1000729c:	d8801b17 	ldw	r2,108(sp)
100072a0:	d9001d87 	ldb	r4,118(sp)
100072a4:	20000b26 	beq	r4,zero,100072d4 <___svfiprintf_internal_r+0xac8>
100072a8:	d9001d84 	addi	r4,sp,118
100072ac:	18c00044 	addi	r3,r3,1
100072b0:	10800044 	addi	r2,r2,1
100072b4:	41000015 	stw	r4,0(r8)
100072b8:	01000044 	movi	r4,1
100072bc:	41000115 	stw	r4,4(r8)
100072c0:	d8c01c15 	stw	r3,112(sp)
100072c4:	d8801b15 	stw	r2,108(sp)
100072c8:	010001c4 	movi	r4,7
100072cc:	2080f316 	blt	r4,r2,1000769c <___svfiprintf_internal_r+0xe90>
100072d0:	42000204 	addi	r8,r8,8
100072d4:	d9402117 	ldw	r5,132(sp)
100072d8:	28000b26 	beq	r5,zero,10007308 <___svfiprintf_internal_r+0xafc>
100072dc:	d9001d04 	addi	r4,sp,116
100072e0:	18c00084 	addi	r3,r3,2
100072e4:	10800044 	addi	r2,r2,1
100072e8:	41000015 	stw	r4,0(r8)
100072ec:	01000084 	movi	r4,2
100072f0:	41000115 	stw	r4,4(r8)
100072f4:	d8c01c15 	stw	r3,112(sp)
100072f8:	d8801b15 	stw	r2,108(sp)
100072fc:	010001c4 	movi	r4,7
10007300:	2080ef16 	blt	r4,r2,100076c0 <___svfiprintf_internal_r+0xeb4>
10007304:	42000204 	addi	r8,r8,8
10007308:	d9402217 	ldw	r5,136(sp)
1000730c:	01002004 	movi	r4,128
10007310:	29008f26 	beq	r5,r4,10007550 <___svfiprintf_internal_r+0xd44>
10007314:	d9002017 	ldw	r4,128(sp)
10007318:	252fc83a 	sub	r23,r4,r20
1000731c:	05c0310e 	bge	zero,r23,100073e4 <___svfiprintf_internal_r+0xbd8>
10007320:	07000404 	movi	fp,16
10007324:	e5c17d0e 	bge	fp,r23,1000791c <___svfiprintf_internal_r+0x1110>
10007328:	01040074 	movhi	r4,4097
1000732c:	2138b004 	addi	r4,r4,-7488
10007330:	dc002015 	stw	r16,128(sp)
10007334:	dc402215 	stw	r17,136(sp)
10007338:	d9002115 	stw	r4,132(sp)
1000733c:	b823883a 	mov	r17,r23
10007340:	054001c4 	movi	r21,7
10007344:	982f883a 	mov	r23,r19
10007348:	dc002717 	ldw	r16,156(sp)
1000734c:	9027883a 	mov	r19,r18
10007350:	dc802317 	ldw	r18,140(sp)
10007354:	00000306 	br	10007364 <___svfiprintf_internal_r+0xb58>
10007358:	8c7ffc04 	addi	r17,r17,-16
1000735c:	42000204 	addi	r8,r8,8
10007360:	e440110e 	bge	fp,r17,100073a8 <___svfiprintf_internal_r+0xb9c>
10007364:	18c00404 	addi	r3,r3,16
10007368:	10800044 	addi	r2,r2,1
1000736c:	45800015 	stw	r22,0(r8)
10007370:	47000115 	stw	fp,4(r8)
10007374:	d8c01c15 	stw	r3,112(sp)
10007378:	d8801b15 	stw	r2,108(sp)
1000737c:	a8bff60e 	bge	r21,r2,10007358 <__alt_data_end+0xf8007358>
10007380:	d9801a04 	addi	r6,sp,104
10007384:	900b883a 	mov	r5,r18
10007388:	8009883a 	mov	r4,r16
1000738c:	000663c0 	call	1000663c <__ssprint_r>
10007390:	10005e1e 	bne	r2,zero,1000750c <___svfiprintf_internal_r+0xd00>
10007394:	8c7ffc04 	addi	r17,r17,-16
10007398:	d8c01c17 	ldw	r3,112(sp)
1000739c:	d8801b17 	ldw	r2,108(sp)
100073a0:	d811883a 	mov	r8,sp
100073a4:	e47fef16 	blt	fp,r17,10007364 <__alt_data_end+0xf8007364>
100073a8:	9825883a 	mov	r18,r19
100073ac:	dc002017 	ldw	r16,128(sp)
100073b0:	b827883a 	mov	r19,r23
100073b4:	882f883a 	mov	r23,r17
100073b8:	dc402217 	ldw	r17,136(sp)
100073bc:	d9402117 	ldw	r5,132(sp)
100073c0:	1dc7883a 	add	r3,r3,r23
100073c4:	10800044 	addi	r2,r2,1
100073c8:	41400015 	stw	r5,0(r8)
100073cc:	45c00115 	stw	r23,4(r8)
100073d0:	d8c01c15 	stw	r3,112(sp)
100073d4:	d8801b15 	stw	r2,108(sp)
100073d8:	010001c4 	movi	r4,7
100073dc:	2080a616 	blt	r4,r2,10007678 <___svfiprintf_internal_r+0xe6c>
100073e0:	42000204 	addi	r8,r8,8
100073e4:	a0c7883a 	add	r3,r20,r3
100073e8:	10800044 	addi	r2,r2,1
100073ec:	44400015 	stw	r17,0(r8)
100073f0:	45000115 	stw	r20,4(r8)
100073f4:	d8c01c15 	stw	r3,112(sp)
100073f8:	d8801b15 	stw	r2,108(sp)
100073fc:	010001c4 	movi	r4,7
10007400:	20808816 	blt	r4,r2,10007624 <___svfiprintf_internal_r+0xe18>
10007404:	42000204 	addi	r8,r8,8
10007408:	8400010c 	andi	r16,r16,4
1000740c:	80002c26 	beq	r16,zero,100074c0 <___svfiprintf_internal_r+0xcb4>
10007410:	d8802517 	ldw	r2,148(sp)
10007414:	14a1c83a 	sub	r16,r2,r18
10007418:	0400290e 	bge	zero,r16,100074c0 <___svfiprintf_internal_r+0xcb4>
1000741c:	04400404 	movi	r17,16
10007420:	d8801b17 	ldw	r2,108(sp)
10007424:	8c01a70e 	bge	r17,r16,10007ac4 <___svfiprintf_internal_r+0x12b8>
10007428:	01440074 	movhi	r5,4097
1000742c:	2978b404 	addi	r5,r5,-7472
10007430:	d9402815 	stw	r5,160(sp)
10007434:	050001c4 	movi	r20,7
10007438:	dd402717 	ldw	r21,156(sp)
1000743c:	ddc02317 	ldw	r23,140(sp)
10007440:	00000306 	br	10007450 <___svfiprintf_internal_r+0xc44>
10007444:	843ffc04 	addi	r16,r16,-16
10007448:	42000204 	addi	r8,r8,8
1000744c:	8c00130e 	bge	r17,r16,1000749c <___svfiprintf_internal_r+0xc90>
10007450:	01040074 	movhi	r4,4097
10007454:	18c00404 	addi	r3,r3,16
10007458:	10800044 	addi	r2,r2,1
1000745c:	2138b404 	addi	r4,r4,-7472
10007460:	41000015 	stw	r4,0(r8)
10007464:	44400115 	stw	r17,4(r8)
10007468:	d8c01c15 	stw	r3,112(sp)
1000746c:	d8801b15 	stw	r2,108(sp)
10007470:	a0bff40e 	bge	r20,r2,10007444 <__alt_data_end+0xf8007444>
10007474:	d9801a04 	addi	r6,sp,104
10007478:	b80b883a 	mov	r5,r23
1000747c:	a809883a 	mov	r4,r21
10007480:	000663c0 	call	1000663c <__ssprint_r>
10007484:	1000211e 	bne	r2,zero,1000750c <___svfiprintf_internal_r+0xd00>
10007488:	843ffc04 	addi	r16,r16,-16
1000748c:	d8c01c17 	ldw	r3,112(sp)
10007490:	d8801b17 	ldw	r2,108(sp)
10007494:	d811883a 	mov	r8,sp
10007498:	8c3fed16 	blt	r17,r16,10007450 <__alt_data_end+0xf8007450>
1000749c:	d9402817 	ldw	r5,160(sp)
100074a0:	1c07883a 	add	r3,r3,r16
100074a4:	10800044 	addi	r2,r2,1
100074a8:	41400015 	stw	r5,0(r8)
100074ac:	44000115 	stw	r16,4(r8)
100074b0:	d8c01c15 	stw	r3,112(sp)
100074b4:	d8801b15 	stw	r2,108(sp)
100074b8:	010001c4 	movi	r4,7
100074bc:	2080b516 	blt	r4,r2,10007794 <___svfiprintf_internal_r+0xf88>
100074c0:	d8802517 	ldw	r2,148(sp)
100074c4:	1480010e 	bge	r2,r18,100074cc <___svfiprintf_internal_r+0xcc0>
100074c8:	9005883a 	mov	r2,r18
100074cc:	d9002617 	ldw	r4,152(sp)
100074d0:	2089883a 	add	r4,r4,r2
100074d4:	d9002615 	stw	r4,152(sp)
100074d8:	18005a1e 	bne	r3,zero,10007644 <___svfiprintf_internal_r+0xe38>
100074dc:	98800007 	ldb	r2,0(r19)
100074e0:	d8001b15 	stw	zero,108(sp)
100074e4:	d811883a 	mov	r8,sp
100074e8:	103cec1e 	bne	r2,zero,1000689c <__alt_data_end+0xf800689c>
100074ec:	9825883a 	mov	r18,r19
100074f0:	003d0206 	br	100068fc <__alt_data_end+0xf80068fc>
100074f4:	d8801c17 	ldw	r2,112(sp)
100074f8:	10000426 	beq	r2,zero,1000750c <___svfiprintf_internal_r+0xd00>
100074fc:	d9402317 	ldw	r5,140(sp)
10007500:	d9002717 	ldw	r4,156(sp)
10007504:	d9801a04 	addi	r6,sp,104
10007508:	000663c0 	call	1000663c <__ssprint_r>
1000750c:	d9402317 	ldw	r5,140(sp)
10007510:	d8802617 	ldw	r2,152(sp)
10007514:	28c0030b 	ldhu	r3,12(r5)
10007518:	18c0100c 	andi	r3,r3,64
1000751c:	18015c1e 	bne	r3,zero,10007a90 <___svfiprintf_internal_r+0x1284>
10007520:	dfc03717 	ldw	ra,220(sp)
10007524:	df003617 	ldw	fp,216(sp)
10007528:	ddc03517 	ldw	r23,212(sp)
1000752c:	dd803417 	ldw	r22,208(sp)
10007530:	dd403317 	ldw	r21,204(sp)
10007534:	dd003217 	ldw	r20,200(sp)
10007538:	dcc03117 	ldw	r19,196(sp)
1000753c:	dc803017 	ldw	r18,192(sp)
10007540:	dc402f17 	ldw	r17,188(sp)
10007544:	dc002e17 	ldw	r16,184(sp)
10007548:	dec03804 	addi	sp,sp,224
1000754c:	f800283a 	ret
10007550:	d9002517 	ldw	r4,148(sp)
10007554:	24afc83a 	sub	r23,r4,r18
10007558:	05ff6e0e 	bge	zero,r23,10007314 <__alt_data_end+0xf8007314>
1000755c:	07000404 	movi	fp,16
10007560:	e5c15c0e 	bge	fp,r23,10007ad4 <___svfiprintf_internal_r+0x12c8>
10007564:	01040074 	movhi	r4,4097
10007568:	2138b004 	addi	r4,r4,-7488
1000756c:	dc002215 	stw	r16,136(sp)
10007570:	dc402815 	stw	r17,160(sp)
10007574:	d9002115 	stw	r4,132(sp)
10007578:	b823883a 	mov	r17,r23
1000757c:	054001c4 	movi	r21,7
10007580:	982f883a 	mov	r23,r19
10007584:	dc002717 	ldw	r16,156(sp)
10007588:	9027883a 	mov	r19,r18
1000758c:	dc802317 	ldw	r18,140(sp)
10007590:	00000306 	br	100075a0 <___svfiprintf_internal_r+0xd94>
10007594:	8c7ffc04 	addi	r17,r17,-16
10007598:	42000204 	addi	r8,r8,8
1000759c:	e440110e 	bge	fp,r17,100075e4 <___svfiprintf_internal_r+0xdd8>
100075a0:	18c00404 	addi	r3,r3,16
100075a4:	10800044 	addi	r2,r2,1
100075a8:	45800015 	stw	r22,0(r8)
100075ac:	47000115 	stw	fp,4(r8)
100075b0:	d8c01c15 	stw	r3,112(sp)
100075b4:	d8801b15 	stw	r2,108(sp)
100075b8:	a8bff60e 	bge	r21,r2,10007594 <__alt_data_end+0xf8007594>
100075bc:	d9801a04 	addi	r6,sp,104
100075c0:	900b883a 	mov	r5,r18
100075c4:	8009883a 	mov	r4,r16
100075c8:	000663c0 	call	1000663c <__ssprint_r>
100075cc:	103fcf1e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
100075d0:	8c7ffc04 	addi	r17,r17,-16
100075d4:	d8c01c17 	ldw	r3,112(sp)
100075d8:	d8801b17 	ldw	r2,108(sp)
100075dc:	d811883a 	mov	r8,sp
100075e0:	e47fef16 	blt	fp,r17,100075a0 <__alt_data_end+0xf80075a0>
100075e4:	9825883a 	mov	r18,r19
100075e8:	dc002217 	ldw	r16,136(sp)
100075ec:	b827883a 	mov	r19,r23
100075f0:	882f883a 	mov	r23,r17
100075f4:	dc402817 	ldw	r17,160(sp)
100075f8:	d9402117 	ldw	r5,132(sp)
100075fc:	1dc7883a 	add	r3,r3,r23
10007600:	10800044 	addi	r2,r2,1
10007604:	41400015 	stw	r5,0(r8)
10007608:	45c00115 	stw	r23,4(r8)
1000760c:	d8c01c15 	stw	r3,112(sp)
10007610:	d8801b15 	stw	r2,108(sp)
10007614:	010001c4 	movi	r4,7
10007618:	2080b716 	blt	r4,r2,100078f8 <___svfiprintf_internal_r+0x10ec>
1000761c:	42000204 	addi	r8,r8,8
10007620:	003f3c06 	br	10007314 <__alt_data_end+0xf8007314>
10007624:	d9402317 	ldw	r5,140(sp)
10007628:	d9002717 	ldw	r4,156(sp)
1000762c:	d9801a04 	addi	r6,sp,104
10007630:	000663c0 	call	1000663c <__ssprint_r>
10007634:	103fb51e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
10007638:	d8c01c17 	ldw	r3,112(sp)
1000763c:	d811883a 	mov	r8,sp
10007640:	003f7106 	br	10007408 <__alt_data_end+0xf8007408>
10007644:	d9402317 	ldw	r5,140(sp)
10007648:	d9002717 	ldw	r4,156(sp)
1000764c:	d9801a04 	addi	r6,sp,104
10007650:	000663c0 	call	1000663c <__ssprint_r>
10007654:	103fa126 	beq	r2,zero,100074dc <__alt_data_end+0xf80074dc>
10007658:	003fac06 	br	1000750c <__alt_data_end+0xf800750c>
1000765c:	d9402317 	ldw	r5,140(sp)
10007660:	d9002717 	ldw	r4,156(sp)
10007664:	d9801a04 	addi	r6,sp,104
10007668:	000663c0 	call	1000663c <__ssprint_r>
1000766c:	103fa71e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
10007670:	d811883a 	mov	r8,sp
10007674:	003c9e06 	br	100068f0 <__alt_data_end+0xf80068f0>
10007678:	d9402317 	ldw	r5,140(sp)
1000767c:	d9002717 	ldw	r4,156(sp)
10007680:	d9801a04 	addi	r6,sp,104
10007684:	000663c0 	call	1000663c <__ssprint_r>
10007688:	103fa01e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
1000768c:	d8c01c17 	ldw	r3,112(sp)
10007690:	d8801b17 	ldw	r2,108(sp)
10007694:	d811883a 	mov	r8,sp
10007698:	003f5206 	br	100073e4 <__alt_data_end+0xf80073e4>
1000769c:	d9402317 	ldw	r5,140(sp)
100076a0:	d9002717 	ldw	r4,156(sp)
100076a4:	d9801a04 	addi	r6,sp,104
100076a8:	000663c0 	call	1000663c <__ssprint_r>
100076ac:	103f971e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
100076b0:	d8c01c17 	ldw	r3,112(sp)
100076b4:	d8801b17 	ldw	r2,108(sp)
100076b8:	d811883a 	mov	r8,sp
100076bc:	003f0506 	br	100072d4 <__alt_data_end+0xf80072d4>
100076c0:	d9402317 	ldw	r5,140(sp)
100076c4:	d9002717 	ldw	r4,156(sp)
100076c8:	d9801a04 	addi	r6,sp,104
100076cc:	000663c0 	call	1000663c <__ssprint_r>
100076d0:	103f8e1e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
100076d4:	d8c01c17 	ldw	r3,112(sp)
100076d8:	d8801b17 	ldw	r2,108(sp)
100076dc:	d811883a 	mov	r8,sp
100076e0:	003f0906 	br	10007308 <__alt_data_end+0xf8007308>
100076e4:	d9402017 	ldw	r5,128(sp)
100076e8:	d8001d85 	stb	zero,118(sp)
100076ec:	28007716 	blt	r5,zero,100078cc <___svfiprintf_internal_r+0x10c0>
100076f0:	00ffdfc4 	movi	r3,-129
100076f4:	9504b03a 	or	r2,r18,r20
100076f8:	80e0703a 	and	r16,r16,r3
100076fc:	103d3926 	beq	r2,zero,10006be4 <__alt_data_end+0xf8006be4>
10007700:	002b883a 	mov	r21,zero
10007704:	003d3c06 	br	10006bf8 <__alt_data_end+0xf8006bf8>
10007708:	d9402317 	ldw	r5,140(sp)
1000770c:	d9002717 	ldw	r4,156(sp)
10007710:	d9801a04 	addi	r6,sp,104
10007714:	000663c0 	call	1000663c <__ssprint_r>
10007718:	103f7c1e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
1000771c:	d8c01c17 	ldw	r3,112(sp)
10007720:	d8801b17 	ldw	r2,108(sp)
10007724:	d811883a 	mov	r8,sp
10007728:	003edd06 	br	100072a0 <__alt_data_end+0xf80072a0>
1000772c:	8080100c 	andi	r2,r16,64
10007730:	d8001d85 	stb	zero,118(sp)
10007734:	10008426 	beq	r2,zero,10007948 <___svfiprintf_internal_r+0x113c>
10007738:	d9402417 	ldw	r5,144(sp)
1000773c:	d8c02017 	ldw	r3,128(sp)
10007740:	0029883a 	mov	r20,zero
10007744:	28800104 	addi	r2,r5,4
10007748:	2c80000b 	ldhu	r18,0(r5)
1000774c:	183eab0e 	bge	r3,zero,100071fc <__alt_data_end+0xf80071fc>
10007750:	d8802415 	stw	r2,144(sp)
10007754:	002b883a 	mov	r21,zero
10007758:	9504b03a 	or	r2,r18,r20
1000775c:	103e171e 	bne	r2,zero,10006fbc <__alt_data_end+0xf8006fbc>
10007760:	00800044 	movi	r2,1
10007764:	10803fcc 	andi	r2,r2,255
10007768:	00c00044 	movi	r3,1
1000776c:	10c05c26 	beq	r2,r3,100078e0 <___svfiprintf_internal_r+0x10d4>
10007770:	00c00084 	movi	r3,2
10007774:	10fd1e26 	beq	r2,r3,10006bf0 <__alt_data_end+0xf8006bf0>
10007778:	003ec406 	br	1000728c <__alt_data_end+0xf800728c>
1000777c:	d9401e17 	ldw	r5,120(sp)
10007780:	2c69c83a 	sub	r20,r5,r17
10007784:	003d4506 	br	10006c9c <__alt_data_end+0xf8006c9c>
10007788:	d8802415 	stw	r2,144(sp)
1000778c:	98c00007 	ldb	r3,0(r19)
10007790:	003c6a06 	br	1000693c <__alt_data_end+0xf800693c>
10007794:	d9402317 	ldw	r5,140(sp)
10007798:	d9002717 	ldw	r4,156(sp)
1000779c:	d9801a04 	addi	r6,sp,104
100077a0:	000663c0 	call	1000663c <__ssprint_r>
100077a4:	103f591e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
100077a8:	d8c01c17 	ldw	r3,112(sp)
100077ac:	003f4406 	br	100074c0 <__alt_data_end+0xf80074c0>
100077b0:	01440074 	movhi	r5,4097
100077b4:	29784f04 	addi	r5,r5,-7876
100077b8:	d9402915 	stw	r5,164(sp)
100077bc:	003d0906 	br	10006be4 <__alt_data_end+0xf8006be4>
100077c0:	d8c02417 	ldw	r3,144(sp)
100077c4:	d9002617 	ldw	r4,152(sp)
100077c8:	d9402417 	ldw	r5,144(sp)
100077cc:	18800017 	ldw	r2,0(r3)
100077d0:	2007d7fa 	srai	r3,r4,31
100077d4:	29400104 	addi	r5,r5,4
100077d8:	d9402415 	stw	r5,144(sp)
100077dc:	11000015 	stw	r4,0(r2)
100077e0:	10c00115 	stw	r3,4(r2)
100077e4:	003c2b06 	br	10006894 <__alt_data_end+0xf8006894>
100077e8:	d8c01d45 	stb	r3,117(sp)
100077ec:	d8c02017 	ldw	r3,128(sp)
100077f0:	00800c04 	movi	r2,48
100077f4:	d8801d05 	stb	r2,116(sp)
100077f8:	d8001d85 	stb	zero,118(sp)
100077fc:	80800094 	ori	r2,r16,2
10007800:	1800ac16 	blt	r3,zero,10007ab4 <___svfiprintf_internal_r+0x12a8>
10007804:	00bfdfc4 	movi	r2,-129
10007808:	80a0703a 	and	r16,r16,r2
1000780c:	84000094 	ori	r16,r16,2
10007810:	002b883a 	mov	r21,zero
10007814:	003cf806 	br	10006bf8 <__alt_data_end+0xf8006bf8>
10007818:	98c00007 	ldb	r3,0(r19)
1000781c:	003c4706 	br	1000693c <__alt_data_end+0xf800693c>
10007820:	d9402417 	ldw	r5,144(sp)
10007824:	2c800017 	ldw	r18,0(r5)
10007828:	29400104 	addi	r5,r5,4
1000782c:	d9402415 	stw	r5,144(sp)
10007830:	9029d7fa 	srai	r20,r18,31
10007834:	a005883a 	mov	r2,r20
10007838:	003dd806 	br	10006f9c <__alt_data_end+0xf8006f9c>
1000783c:	d9402417 	ldw	r5,144(sp)
10007840:	0029883a 	mov	r20,zero
10007844:	2c800017 	ldw	r18,0(r5)
10007848:	29400104 	addi	r5,r5,4
1000784c:	d9402415 	stw	r5,144(sp)
10007850:	003cdb06 	br	10006bc0 <__alt_data_end+0xf8006bc0>
10007854:	8080100c 	andi	r2,r16,64
10007858:	d8001d85 	stb	zero,118(sp)
1000785c:	10003326 	beq	r2,zero,1000792c <___svfiprintf_internal_r+0x1120>
10007860:	d9002417 	ldw	r4,144(sp)
10007864:	d9402017 	ldw	r5,128(sp)
10007868:	0029883a 	mov	r20,zero
1000786c:	20800104 	addi	r2,r4,4
10007870:	2480000b 	ldhu	r18,0(r4)
10007874:	283e7e0e 	bge	r5,zero,10007270 <__alt_data_end+0xf8007270>
10007878:	9506b03a 	or	r3,r18,r20
1000787c:	d8802415 	stw	r2,144(sp)
10007880:	183d271e 	bne	r3,zero,10006d20 <__alt_data_end+0xf8006d20>
10007884:	002b883a 	mov	r21,zero
10007888:	0005883a 	mov	r2,zero
1000788c:	003fb506 	br	10007764 <__alt_data_end+0xf8007764>
10007890:	98c00043 	ldbu	r3,1(r19)
10007894:	8c400814 	ori	r17,r17,32
10007898:	9cc00044 	addi	r19,r19,1
1000789c:	18c03fcc 	andi	r3,r3,255
100078a0:	18c0201c 	xori	r3,r3,128
100078a4:	18ffe004 	addi	r3,r3,-128
100078a8:	003c2406 	br	1000693c <__alt_data_end+0xf800693c>
100078ac:	d8c02415 	stw	r3,144(sp)
100078b0:	002b883a 	mov	r21,zero
100078b4:	003fa806 	br	10007758 <__alt_data_end+0xf8007758>
100078b8:	01040074 	movhi	r4,4097
100078bc:	21384f04 	addi	r4,r4,-7876
100078c0:	d9002915 	stw	r4,164(sp)
100078c4:	d8c02415 	stw	r3,144(sp)
100078c8:	1021883a 	mov	r16,r2
100078cc:	9504b03a 	or	r2,r18,r20
100078d0:	103f8b1e 	bne	r2,zero,10007700 <__alt_data_end+0xf8007700>
100078d4:	002b883a 	mov	r21,zero
100078d8:	00800084 	movi	r2,2
100078dc:	003fa106 	br	10007764 <__alt_data_end+0xf8007764>
100078e0:	0025883a 	mov	r18,zero
100078e4:	94800c04 	addi	r18,r18,48
100078e8:	dc8019c5 	stb	r18,103(sp)
100078ec:	dd002c17 	ldw	r20,176(sp)
100078f0:	dc4019c4 	addi	r17,sp,103
100078f4:	003ce906 	br	10006c9c <__alt_data_end+0xf8006c9c>
100078f8:	d9402317 	ldw	r5,140(sp)
100078fc:	d9002717 	ldw	r4,156(sp)
10007900:	d9801a04 	addi	r6,sp,104
10007904:	000663c0 	call	1000663c <__ssprint_r>
10007908:	103f001e 	bne	r2,zero,1000750c <__alt_data_end+0xf800750c>
1000790c:	d8c01c17 	ldw	r3,112(sp)
10007910:	d8801b17 	ldw	r2,108(sp)
10007914:	d811883a 	mov	r8,sp
10007918:	003e7e06 	br	10007314 <__alt_data_end+0xf8007314>
1000791c:	01440074 	movhi	r5,4097
10007920:	2978b004 	addi	r5,r5,-7488
10007924:	d9402115 	stw	r5,132(sp)
10007928:	003ea406 	br	100073bc <__alt_data_end+0xf80073bc>
1000792c:	d8c02417 	ldw	r3,144(sp)
10007930:	d9002017 	ldw	r4,128(sp)
10007934:	0029883a 	mov	r20,zero
10007938:	18800104 	addi	r2,r3,4
1000793c:	1c800017 	ldw	r18,0(r3)
10007940:	203e4b0e 	bge	r4,zero,10007270 <__alt_data_end+0xf8007270>
10007944:	003fcc06 	br	10007878 <__alt_data_end+0xf8007878>
10007948:	d9002417 	ldw	r4,144(sp)
1000794c:	d9402017 	ldw	r5,128(sp)
10007950:	0029883a 	mov	r20,zero
10007954:	20800104 	addi	r2,r4,4
10007958:	24800017 	ldw	r18,0(r4)
1000795c:	283e270e 	bge	r5,zero,100071fc <__alt_data_end+0xf80071fc>
10007960:	003f7b06 	br	10007750 <__alt_data_end+0xf8007750>
10007964:	8400100c 	andi	r16,r16,64
10007968:	80003326 	beq	r16,zero,10007a38 <___svfiprintf_internal_r+0x122c>
1000796c:	d9402417 	ldw	r5,144(sp)
10007970:	d8c02617 	ldw	r3,152(sp)
10007974:	28800017 	ldw	r2,0(r5)
10007978:	29400104 	addi	r5,r5,4
1000797c:	d9402415 	stw	r5,144(sp)
10007980:	10c0000d 	sth	r3,0(r2)
10007984:	003bc306 	br	10006894 <__alt_data_end+0xf8006894>
10007988:	d9002417 	ldw	r4,144(sp)
1000798c:	0029883a 	mov	r20,zero
10007990:	24800017 	ldw	r18,0(r4)
10007994:	21000104 	addi	r4,r4,4
10007998:	d9002415 	stw	r4,144(sp)
1000799c:	003c8806 	br	10006bc0 <__alt_data_end+0xf8006bc0>
100079a0:	d8c02417 	ldw	r3,144(sp)
100079a4:	1c800017 	ldw	r18,0(r3)
100079a8:	18c00104 	addi	r3,r3,4
100079ac:	d8c02415 	stw	r3,144(sp)
100079b0:	9029d7fa 	srai	r20,r18,31
100079b4:	a005883a 	mov	r2,r20
100079b8:	003d7806 	br	10006f9c <__alt_data_end+0xf8006f9c>
100079bc:	8809883a 	mov	r4,r17
100079c0:	da002d15 	stw	r8,180(sp)
100079c4:	0000cc80 	call	10000cc8 <strlen>
100079c8:	1029883a 	mov	r20,r2
100079cc:	dd401d83 	ldbu	r21,118(sp)
100079d0:	ddc02415 	stw	r23,144(sp)
100079d4:	d8002015 	stw	zero,128(sp)
100079d8:	da002d17 	ldw	r8,180(sp)
100079dc:	003caf06 	br	10006c9c <__alt_data_end+0xf8006c9c>
100079e0:	013fffc4 	movi	r4,-1
100079e4:	003df206 	br	100071b0 <__alt_data_end+0xf80071b0>
100079e8:	dd002017 	ldw	r20,128(sp)
100079ec:	00800184 	movi	r2,6
100079f0:	1500012e 	bgeu	r2,r20,100079f8 <___svfiprintf_internal_r+0x11ec>
100079f4:	1029883a 	mov	r20,r2
100079f8:	a025883a 	mov	r18,r20
100079fc:	a0004116 	blt	r20,zero,10007b04 <___svfiprintf_internal_r+0x12f8>
10007a00:	04440074 	movhi	r17,4097
10007a04:	ddc02415 	stw	r23,144(sp)
10007a08:	8c785404 	addi	r17,r17,-7856
10007a0c:	003ce806 	br	10006db0 <__alt_data_end+0xf8006db0>
10007a10:	04001004 	movi	r16,64
10007a14:	800b883a 	mov	r5,r16
10007a18:	00049a80 	call	100049a8 <_malloc_r>
10007a1c:	d8c02317 	ldw	r3,140(sp)
10007a20:	18800015 	stw	r2,0(r3)
10007a24:	18800415 	stw	r2,16(r3)
10007a28:	10004d26 	beq	r2,zero,10007b60 <___svfiprintf_internal_r+0x1354>
10007a2c:	d9402317 	ldw	r5,140(sp)
10007a30:	2c000515 	stw	r16,20(r5)
10007a34:	003b8906 	br	1000685c <__alt_data_end+0xf800685c>
10007a38:	d9002417 	ldw	r4,144(sp)
10007a3c:	d9402617 	ldw	r5,152(sp)
10007a40:	20800017 	ldw	r2,0(r4)
10007a44:	21000104 	addi	r4,r4,4
10007a48:	d9002415 	stw	r4,144(sp)
10007a4c:	11400015 	stw	r5,0(r2)
10007a50:	003b9006 	br	10006894 <__alt_data_end+0xf8006894>
10007a54:	8080004c 	andi	r2,r16,1
10007a58:	002b883a 	mov	r21,zero
10007a5c:	10000526 	beq	r2,zero,10007a74 <___svfiprintf_internal_r+0x1268>
10007a60:	00800c04 	movi	r2,48
10007a64:	d88019c5 	stb	r2,103(sp)
10007a68:	dd002c17 	ldw	r20,176(sp)
10007a6c:	dc4019c4 	addi	r17,sp,103
10007a70:	003c8a06 	br	10006c9c <__alt_data_end+0xf8006c9c>
10007a74:	0029883a 	mov	r20,zero
10007a78:	dc401a04 	addi	r17,sp,104
10007a7c:	003c8706 	br	10006c9c <__alt_data_end+0xf8006c9c>
10007a80:	01440074 	movhi	r5,4097
10007a84:	2978b404 	addi	r5,r5,-7472
10007a88:	d9402815 	stw	r5,160(sp)
10007a8c:	003cff06 	br	10006e8c <__alt_data_end+0xf8006e8c>
10007a90:	00bfffc4 	movi	r2,-1
10007a94:	003ea206 	br	10007520 <__alt_data_end+0xf8007520>
10007a98:	00800044 	movi	r2,1
10007a9c:	10803fcc 	andi	r2,r2,255
10007aa0:	00c00044 	movi	r3,1
10007aa4:	10fd4526 	beq	r2,r3,10006fbc <__alt_data_end+0xf8006fbc>
10007aa8:	00c00084 	movi	r3,2
10007aac:	10fc5226 	beq	r2,r3,10006bf8 <__alt_data_end+0xf8006bf8>
10007ab0:	003c9c06 	br	10006d24 <__alt_data_end+0xf8006d24>
10007ab4:	1021883a 	mov	r16,r2
10007ab8:	002b883a 	mov	r21,zero
10007abc:	00800084 	movi	r2,2
10007ac0:	003ff606 	br	10007a9c <__alt_data_end+0xf8007a9c>
10007ac4:	01040074 	movhi	r4,4097
10007ac8:	2138b404 	addi	r4,r4,-7472
10007acc:	d9002815 	stw	r4,160(sp)
10007ad0:	003e7206 	br	1000749c <__alt_data_end+0xf800749c>
10007ad4:	01440074 	movhi	r5,4097
10007ad8:	2978b004 	addi	r5,r5,-7488
10007adc:	d9402115 	stw	r5,132(sp)
10007ae0:	003ec506 	br	100075f8 <__alt_data_end+0xf80075f8>
10007ae4:	e027883a 	mov	r19,fp
10007ae8:	d8002015 	stw	zero,128(sp)
10007aec:	003b9406 	br	10006940 <__alt_data_end+0xf8006940>
10007af0:	dd002017 	ldw	r20,128(sp)
10007af4:	dd401d83 	ldbu	r21,118(sp)
10007af8:	ddc02415 	stw	r23,144(sp)
10007afc:	d8002015 	stw	zero,128(sp)
10007b00:	003c6606 	br	10006c9c <__alt_data_end+0xf8006c9c>
10007b04:	0025883a 	mov	r18,zero
10007b08:	003fbd06 	br	10007a00 <__alt_data_end+0xf8007a00>
10007b0c:	d9402417 	ldw	r5,144(sp)
10007b10:	d8c02417 	ldw	r3,144(sp)
10007b14:	29400017 	ldw	r5,0(r5)
10007b18:	19000104 	addi	r4,r3,4
10007b1c:	d9002415 	stw	r4,144(sp)
10007b20:	d9402015 	stw	r5,128(sp)
10007b24:	98c00043 	ldbu	r3,1(r19)
10007b28:	e027883a 	mov	r19,fp
10007b2c:	283f5b0e 	bge	r5,zero,1000789c <__alt_data_end+0xf800789c>
10007b30:	18c03fcc 	andi	r3,r3,255
10007b34:	013fffc4 	movi	r4,-1
10007b38:	18c0201c 	xori	r3,r3,128
10007b3c:	d9002015 	stw	r4,128(sp)
10007b40:	18ffe004 	addi	r3,r3,-128
10007b44:	003b7d06 	br	1000693c <__alt_data_end+0xf800693c>
10007b48:	dd401d85 	stb	r21,118(sp)
10007b4c:	003cf306 	br	10006f1c <__alt_data_end+0xf8006f1c>
10007b50:	dd401d85 	stb	r21,118(sp)
10007b54:	003d4e06 	br	10007090 <__alt_data_end+0xf8007090>
10007b58:	dd401d85 	stb	r21,118(sp)
10007b5c:	003c0e06 	br	10006b98 <__alt_data_end+0xf8006b98>
10007b60:	d9002717 	ldw	r4,156(sp)
10007b64:	00800304 	movi	r2,12
10007b68:	20800015 	stw	r2,0(r4)
10007b6c:	00bfffc4 	movi	r2,-1
10007b70:	003e6b06 	br	10007520 <__alt_data_end+0xf8007520>
10007b74:	dd401d85 	stb	r21,118(sp)
10007b78:	003d0006 	br	10006f7c <__alt_data_end+0xf8006f7c>
10007b7c:	dd401d85 	stb	r21,118(sp)
10007b80:	003d7106 	br	10007148 <__alt_data_end+0xf8007148>
10007b84:	dd401d85 	stb	r21,118(sp)
10007b88:	003c5706 	br	10006ce8 <__alt_data_end+0xf8006ce8>
10007b8c:	dd401d85 	stb	r21,118(sp)
10007b90:	003c2e06 	br	10006c4c <__alt_data_end+0xf8006c4c>
10007b94:	dd401d85 	stb	r21,118(sp)
10007b98:	003d8c06 	br	100071cc <__alt_data_end+0xf80071cc>
10007b9c:	dd401d85 	stb	r21,118(sp)
10007ba0:	003da706 	br	10007240 <__alt_data_end+0xf8007240>
10007ba4:	dd401d85 	stb	r21,118(sp)
10007ba8:	003cc806 	br	10006ecc <__alt_data_end+0xf8006ecc>

10007bac <_calloc_r>:
10007bac:	defffe04 	addi	sp,sp,-8
10007bb0:	2805883a 	mov	r2,r5
10007bb4:	dc000015 	stw	r16,0(sp)
10007bb8:	300b883a 	mov	r5,r6
10007bbc:	2021883a 	mov	r16,r4
10007bc0:	1009883a 	mov	r4,r2
10007bc4:	dfc00115 	stw	ra,4(sp)
10007bc8:	0000b600 	call	10000b60 <__mulsi3>
10007bcc:	100b883a 	mov	r5,r2
10007bd0:	8009883a 	mov	r4,r16
10007bd4:	00049a80 	call	100049a8 <_malloc_r>
10007bd8:	10002926 	beq	r2,zero,10007c80 <_calloc_r+0xd4>
10007bdc:	11bfff17 	ldw	r6,-4(r2)
10007be0:	1021883a 	mov	r16,r2
10007be4:	00bfff04 	movi	r2,-4
10007be8:	308c703a 	and	r6,r6,r2
10007bec:	00c00904 	movi	r3,36
10007bf0:	308d883a 	add	r6,r6,r2
10007bf4:	19801636 	bltu	r3,r6,10007c50 <_calloc_r+0xa4>
10007bf8:	008004c4 	movi	r2,19
10007bfc:	11800b2e 	bgeu	r2,r6,10007c2c <_calloc_r+0x80>
10007c00:	80000015 	stw	zero,0(r16)
10007c04:	80000115 	stw	zero,4(r16)
10007c08:	008006c4 	movi	r2,27
10007c0c:	11801a2e 	bgeu	r2,r6,10007c78 <_calloc_r+0xcc>
10007c10:	80000215 	stw	zero,8(r16)
10007c14:	80000315 	stw	zero,12(r16)
10007c18:	30c0151e 	bne	r6,r3,10007c70 <_calloc_r+0xc4>
10007c1c:	80000415 	stw	zero,16(r16)
10007c20:	80800604 	addi	r2,r16,24
10007c24:	80000515 	stw	zero,20(r16)
10007c28:	00000106 	br	10007c30 <_calloc_r+0x84>
10007c2c:	8005883a 	mov	r2,r16
10007c30:	10000015 	stw	zero,0(r2)
10007c34:	10000115 	stw	zero,4(r2)
10007c38:	10000215 	stw	zero,8(r2)
10007c3c:	8005883a 	mov	r2,r16
10007c40:	dfc00117 	ldw	ra,4(sp)
10007c44:	dc000017 	ldw	r16,0(sp)
10007c48:	dec00204 	addi	sp,sp,8
10007c4c:	f800283a 	ret
10007c50:	000b883a 	mov	r5,zero
10007c54:	8009883a 	mov	r4,r16
10007c58:	00082180 	call	10008218 <memset>
10007c5c:	8005883a 	mov	r2,r16
10007c60:	dfc00117 	ldw	ra,4(sp)
10007c64:	dc000017 	ldw	r16,0(sp)
10007c68:	dec00204 	addi	sp,sp,8
10007c6c:	f800283a 	ret
10007c70:	80800404 	addi	r2,r16,16
10007c74:	003fee06 	br	10007c30 <__alt_data_end+0xf8007c30>
10007c78:	80800204 	addi	r2,r16,8
10007c7c:	003fec06 	br	10007c30 <__alt_data_end+0xf8007c30>
10007c80:	0005883a 	mov	r2,zero
10007c84:	003fee06 	br	10007c40 <__alt_data_end+0xf8007c40>

10007c88 <_malloc_trim_r>:
10007c88:	defffb04 	addi	sp,sp,-20
10007c8c:	dcc00315 	stw	r19,12(sp)
10007c90:	04c40074 	movhi	r19,4097
10007c94:	dc800215 	stw	r18,8(sp)
10007c98:	dc400115 	stw	r17,4(sp)
10007c9c:	dc000015 	stw	r16,0(sp)
10007ca0:	dfc00415 	stw	ra,16(sp)
10007ca4:	2821883a 	mov	r16,r5
10007ca8:	9cfb4004 	addi	r19,r19,-4864
10007cac:	2025883a 	mov	r18,r4
10007cb0:	000bf7c0 	call	1000bf7c <__malloc_lock>
10007cb4:	98800217 	ldw	r2,8(r19)
10007cb8:	14400117 	ldw	r17,4(r2)
10007cbc:	00bfff04 	movi	r2,-4
10007cc0:	88a2703a 	and	r17,r17,r2
10007cc4:	8c21c83a 	sub	r16,r17,r16
10007cc8:	8403fbc4 	addi	r16,r16,4079
10007ccc:	8020d33a 	srli	r16,r16,12
10007cd0:	0083ffc4 	movi	r2,4095
10007cd4:	843fffc4 	addi	r16,r16,-1
10007cd8:	8020933a 	slli	r16,r16,12
10007cdc:	1400060e 	bge	r2,r16,10007cf8 <_malloc_trim_r+0x70>
10007ce0:	000b883a 	mov	r5,zero
10007ce4:	9009883a 	mov	r4,r18
10007ce8:	000650c0 	call	1000650c <_sbrk_r>
10007cec:	98c00217 	ldw	r3,8(r19)
10007cf0:	1c47883a 	add	r3,r3,r17
10007cf4:	10c00a26 	beq	r2,r3,10007d20 <_malloc_trim_r+0x98>
10007cf8:	9009883a 	mov	r4,r18
10007cfc:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10007d00:	0005883a 	mov	r2,zero
10007d04:	dfc00417 	ldw	ra,16(sp)
10007d08:	dcc00317 	ldw	r19,12(sp)
10007d0c:	dc800217 	ldw	r18,8(sp)
10007d10:	dc400117 	ldw	r17,4(sp)
10007d14:	dc000017 	ldw	r16,0(sp)
10007d18:	dec00504 	addi	sp,sp,20
10007d1c:	f800283a 	ret
10007d20:	040bc83a 	sub	r5,zero,r16
10007d24:	9009883a 	mov	r4,r18
10007d28:	000650c0 	call	1000650c <_sbrk_r>
10007d2c:	00ffffc4 	movi	r3,-1
10007d30:	10c00d26 	beq	r2,r3,10007d68 <_malloc_trim_r+0xe0>
10007d34:	00c40074 	movhi	r3,4097
10007d38:	18c8b504 	addi	r3,r3,8916
10007d3c:	18800017 	ldw	r2,0(r3)
10007d40:	99000217 	ldw	r4,8(r19)
10007d44:	8c23c83a 	sub	r17,r17,r16
10007d48:	8c400054 	ori	r17,r17,1
10007d4c:	1421c83a 	sub	r16,r2,r16
10007d50:	24400115 	stw	r17,4(r4)
10007d54:	9009883a 	mov	r4,r18
10007d58:	1c000015 	stw	r16,0(r3)
10007d5c:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10007d60:	00800044 	movi	r2,1
10007d64:	003fe706 	br	10007d04 <__alt_data_end+0xf8007d04>
10007d68:	000b883a 	mov	r5,zero
10007d6c:	9009883a 	mov	r4,r18
10007d70:	000650c0 	call	1000650c <_sbrk_r>
10007d74:	99000217 	ldw	r4,8(r19)
10007d78:	014003c4 	movi	r5,15
10007d7c:	1107c83a 	sub	r3,r2,r4
10007d80:	28ffdd0e 	bge	r5,r3,10007cf8 <__alt_data_end+0xf8007cf8>
10007d84:	01440074 	movhi	r5,4097
10007d88:	2940ca04 	addi	r5,r5,808
10007d8c:	29400017 	ldw	r5,0(r5)
10007d90:	18c00054 	ori	r3,r3,1
10007d94:	20c00115 	stw	r3,4(r4)
10007d98:	00c40074 	movhi	r3,4097
10007d9c:	1145c83a 	sub	r2,r2,r5
10007da0:	18c8b504 	addi	r3,r3,8916
10007da4:	18800015 	stw	r2,0(r3)
10007da8:	003fd306 	br	10007cf8 <__alt_data_end+0xf8007cf8>

10007dac <_free_r>:
10007dac:	28004126 	beq	r5,zero,10007eb4 <_free_r+0x108>
10007db0:	defffd04 	addi	sp,sp,-12
10007db4:	dc400115 	stw	r17,4(sp)
10007db8:	dc000015 	stw	r16,0(sp)
10007dbc:	2023883a 	mov	r17,r4
10007dc0:	2821883a 	mov	r16,r5
10007dc4:	dfc00215 	stw	ra,8(sp)
10007dc8:	000bf7c0 	call	1000bf7c <__malloc_lock>
10007dcc:	81ffff17 	ldw	r7,-4(r16)
10007dd0:	00bfff84 	movi	r2,-2
10007dd4:	01040074 	movhi	r4,4097
10007dd8:	81bffe04 	addi	r6,r16,-8
10007ddc:	3884703a 	and	r2,r7,r2
10007de0:	213b4004 	addi	r4,r4,-4864
10007de4:	308b883a 	add	r5,r6,r2
10007de8:	2a400117 	ldw	r9,4(r5)
10007dec:	22000217 	ldw	r8,8(r4)
10007df0:	00ffff04 	movi	r3,-4
10007df4:	48c6703a 	and	r3,r9,r3
10007df8:	2a005726 	beq	r5,r8,10007f58 <_free_r+0x1ac>
10007dfc:	28c00115 	stw	r3,4(r5)
10007e00:	39c0004c 	andi	r7,r7,1
10007e04:	3800091e 	bne	r7,zero,10007e2c <_free_r+0x80>
10007e08:	823ffe17 	ldw	r8,-8(r16)
10007e0c:	22400204 	addi	r9,r4,8
10007e10:	320dc83a 	sub	r6,r6,r8
10007e14:	31c00217 	ldw	r7,8(r6)
10007e18:	1205883a 	add	r2,r2,r8
10007e1c:	3a406526 	beq	r7,r9,10007fb4 <_free_r+0x208>
10007e20:	32000317 	ldw	r8,12(r6)
10007e24:	3a000315 	stw	r8,12(r7)
10007e28:	41c00215 	stw	r7,8(r8)
10007e2c:	28cf883a 	add	r7,r5,r3
10007e30:	39c00117 	ldw	r7,4(r7)
10007e34:	39c0004c 	andi	r7,r7,1
10007e38:	38003a26 	beq	r7,zero,10007f24 <_free_r+0x178>
10007e3c:	10c00054 	ori	r3,r2,1
10007e40:	30c00115 	stw	r3,4(r6)
10007e44:	3087883a 	add	r3,r6,r2
10007e48:	18800015 	stw	r2,0(r3)
10007e4c:	00c07fc4 	movi	r3,511
10007e50:	18801936 	bltu	r3,r2,10007eb8 <_free_r+0x10c>
10007e54:	1004d0fa 	srli	r2,r2,3
10007e58:	01c00044 	movi	r7,1
10007e5c:	21400117 	ldw	r5,4(r4)
10007e60:	10c00044 	addi	r3,r2,1
10007e64:	18c7883a 	add	r3,r3,r3
10007e68:	1005d0ba 	srai	r2,r2,2
10007e6c:	18c7883a 	add	r3,r3,r3
10007e70:	18c7883a 	add	r3,r3,r3
10007e74:	1907883a 	add	r3,r3,r4
10007e78:	3884983a 	sll	r2,r7,r2
10007e7c:	19c00017 	ldw	r7,0(r3)
10007e80:	1a3ffe04 	addi	r8,r3,-8
10007e84:	1144b03a 	or	r2,r2,r5
10007e88:	32000315 	stw	r8,12(r6)
10007e8c:	31c00215 	stw	r7,8(r6)
10007e90:	20800115 	stw	r2,4(r4)
10007e94:	19800015 	stw	r6,0(r3)
10007e98:	39800315 	stw	r6,12(r7)
10007e9c:	8809883a 	mov	r4,r17
10007ea0:	dfc00217 	ldw	ra,8(sp)
10007ea4:	dc400117 	ldw	r17,4(sp)
10007ea8:	dc000017 	ldw	r16,0(sp)
10007eac:	dec00304 	addi	sp,sp,12
10007eb0:	000bfa01 	jmpi	1000bfa0 <__malloc_unlock>
10007eb4:	f800283a 	ret
10007eb8:	100ad27a 	srli	r5,r2,9
10007ebc:	00c00104 	movi	r3,4
10007ec0:	19404a36 	bltu	r3,r5,10007fec <_free_r+0x240>
10007ec4:	100ad1ba 	srli	r5,r2,6
10007ec8:	28c00e44 	addi	r3,r5,57
10007ecc:	18c7883a 	add	r3,r3,r3
10007ed0:	29400e04 	addi	r5,r5,56
10007ed4:	18c7883a 	add	r3,r3,r3
10007ed8:	18c7883a 	add	r3,r3,r3
10007edc:	1909883a 	add	r4,r3,r4
10007ee0:	20c00017 	ldw	r3,0(r4)
10007ee4:	01c40074 	movhi	r7,4097
10007ee8:	213ffe04 	addi	r4,r4,-8
10007eec:	39fb4004 	addi	r7,r7,-4864
10007ef0:	20c04426 	beq	r4,r3,10008004 <_free_r+0x258>
10007ef4:	01ffff04 	movi	r7,-4
10007ef8:	19400117 	ldw	r5,4(r3)
10007efc:	29ca703a 	and	r5,r5,r7
10007f00:	1140022e 	bgeu	r2,r5,10007f0c <_free_r+0x160>
10007f04:	18c00217 	ldw	r3,8(r3)
10007f08:	20fffb1e 	bne	r4,r3,10007ef8 <__alt_data_end+0xf8007ef8>
10007f0c:	19000317 	ldw	r4,12(r3)
10007f10:	31000315 	stw	r4,12(r6)
10007f14:	30c00215 	stw	r3,8(r6)
10007f18:	21800215 	stw	r6,8(r4)
10007f1c:	19800315 	stw	r6,12(r3)
10007f20:	003fde06 	br	10007e9c <__alt_data_end+0xf8007e9c>
10007f24:	29c00217 	ldw	r7,8(r5)
10007f28:	10c5883a 	add	r2,r2,r3
10007f2c:	00c40074 	movhi	r3,4097
10007f30:	18fb4204 	addi	r3,r3,-4856
10007f34:	38c03b26 	beq	r7,r3,10008024 <_free_r+0x278>
10007f38:	2a000317 	ldw	r8,12(r5)
10007f3c:	11400054 	ori	r5,r2,1
10007f40:	3087883a 	add	r3,r6,r2
10007f44:	3a000315 	stw	r8,12(r7)
10007f48:	41c00215 	stw	r7,8(r8)
10007f4c:	31400115 	stw	r5,4(r6)
10007f50:	18800015 	stw	r2,0(r3)
10007f54:	003fbd06 	br	10007e4c <__alt_data_end+0xf8007e4c>
10007f58:	39c0004c 	andi	r7,r7,1
10007f5c:	10c5883a 	add	r2,r2,r3
10007f60:	3800071e 	bne	r7,zero,10007f80 <_free_r+0x1d4>
10007f64:	81fffe17 	ldw	r7,-8(r16)
10007f68:	31cdc83a 	sub	r6,r6,r7
10007f6c:	30c00317 	ldw	r3,12(r6)
10007f70:	31400217 	ldw	r5,8(r6)
10007f74:	11c5883a 	add	r2,r2,r7
10007f78:	28c00315 	stw	r3,12(r5)
10007f7c:	19400215 	stw	r5,8(r3)
10007f80:	10c00054 	ori	r3,r2,1
10007f84:	30c00115 	stw	r3,4(r6)
10007f88:	00c40074 	movhi	r3,4097
10007f8c:	18c0cb04 	addi	r3,r3,812
10007f90:	18c00017 	ldw	r3,0(r3)
10007f94:	21800215 	stw	r6,8(r4)
10007f98:	10ffc036 	bltu	r2,r3,10007e9c <__alt_data_end+0xf8007e9c>
10007f9c:	00840074 	movhi	r2,4097
10007fa0:	1088ac04 	addi	r2,r2,8880
10007fa4:	11400017 	ldw	r5,0(r2)
10007fa8:	8809883a 	mov	r4,r17
10007fac:	0007c880 	call	10007c88 <_malloc_trim_r>
10007fb0:	003fba06 	br	10007e9c <__alt_data_end+0xf8007e9c>
10007fb4:	28c9883a 	add	r4,r5,r3
10007fb8:	21000117 	ldw	r4,4(r4)
10007fbc:	2100004c 	andi	r4,r4,1
10007fc0:	2000391e 	bne	r4,zero,100080a8 <_free_r+0x2fc>
10007fc4:	29c00217 	ldw	r7,8(r5)
10007fc8:	29000317 	ldw	r4,12(r5)
10007fcc:	1885883a 	add	r2,r3,r2
10007fd0:	10c00054 	ori	r3,r2,1
10007fd4:	39000315 	stw	r4,12(r7)
10007fd8:	21c00215 	stw	r7,8(r4)
10007fdc:	30c00115 	stw	r3,4(r6)
10007fe0:	308d883a 	add	r6,r6,r2
10007fe4:	30800015 	stw	r2,0(r6)
10007fe8:	003fac06 	br	10007e9c <__alt_data_end+0xf8007e9c>
10007fec:	00c00504 	movi	r3,20
10007ff0:	19401536 	bltu	r3,r5,10008048 <_free_r+0x29c>
10007ff4:	28c01704 	addi	r3,r5,92
10007ff8:	18c7883a 	add	r3,r3,r3
10007ffc:	294016c4 	addi	r5,r5,91
10008000:	003fb406 	br	10007ed4 <__alt_data_end+0xf8007ed4>
10008004:	280bd0ba 	srai	r5,r5,2
10008008:	00c00044 	movi	r3,1
1000800c:	38800117 	ldw	r2,4(r7)
10008010:	194a983a 	sll	r5,r3,r5
10008014:	2007883a 	mov	r3,r4
10008018:	2884b03a 	or	r2,r5,r2
1000801c:	38800115 	stw	r2,4(r7)
10008020:	003fbb06 	br	10007f10 <__alt_data_end+0xf8007f10>
10008024:	21800515 	stw	r6,20(r4)
10008028:	21800415 	stw	r6,16(r4)
1000802c:	10c00054 	ori	r3,r2,1
10008030:	31c00315 	stw	r7,12(r6)
10008034:	31c00215 	stw	r7,8(r6)
10008038:	30c00115 	stw	r3,4(r6)
1000803c:	308d883a 	add	r6,r6,r2
10008040:	30800015 	stw	r2,0(r6)
10008044:	003f9506 	br	10007e9c <__alt_data_end+0xf8007e9c>
10008048:	00c01504 	movi	r3,84
1000804c:	19400536 	bltu	r3,r5,10008064 <_free_r+0x2b8>
10008050:	100ad33a 	srli	r5,r2,12
10008054:	28c01bc4 	addi	r3,r5,111
10008058:	18c7883a 	add	r3,r3,r3
1000805c:	29401b84 	addi	r5,r5,110
10008060:	003f9c06 	br	10007ed4 <__alt_data_end+0xf8007ed4>
10008064:	00c05504 	movi	r3,340
10008068:	19400536 	bltu	r3,r5,10008080 <_free_r+0x2d4>
1000806c:	100ad3fa 	srli	r5,r2,15
10008070:	28c01e04 	addi	r3,r5,120
10008074:	18c7883a 	add	r3,r3,r3
10008078:	29401dc4 	addi	r5,r5,119
1000807c:	003f9506 	br	10007ed4 <__alt_data_end+0xf8007ed4>
10008080:	00c15504 	movi	r3,1364
10008084:	19400536 	bltu	r3,r5,1000809c <_free_r+0x2f0>
10008088:	100ad4ba 	srli	r5,r2,18
1000808c:	28c01f44 	addi	r3,r5,125
10008090:	18c7883a 	add	r3,r3,r3
10008094:	29401f04 	addi	r5,r5,124
10008098:	003f8e06 	br	10007ed4 <__alt_data_end+0xf8007ed4>
1000809c:	00c03f84 	movi	r3,254
100080a0:	01401f84 	movi	r5,126
100080a4:	003f8b06 	br	10007ed4 <__alt_data_end+0xf8007ed4>
100080a8:	10c00054 	ori	r3,r2,1
100080ac:	30c00115 	stw	r3,4(r6)
100080b0:	308d883a 	add	r6,r6,r2
100080b4:	30800015 	stw	r2,0(r6)
100080b8:	003f7806 	br	10007e9c <__alt_data_end+0xf8007e9c>

100080bc <memmove>:
100080bc:	2005883a 	mov	r2,r4
100080c0:	29000b2e 	bgeu	r5,r4,100080f0 <memmove+0x34>
100080c4:	298f883a 	add	r7,r5,r6
100080c8:	21c0092e 	bgeu	r4,r7,100080f0 <memmove+0x34>
100080cc:	2187883a 	add	r3,r4,r6
100080d0:	198bc83a 	sub	r5,r3,r6
100080d4:	30004826 	beq	r6,zero,100081f8 <memmove+0x13c>
100080d8:	39ffffc4 	addi	r7,r7,-1
100080dc:	39000003 	ldbu	r4,0(r7)
100080e0:	18ffffc4 	addi	r3,r3,-1
100080e4:	19000005 	stb	r4,0(r3)
100080e8:	28fffb1e 	bne	r5,r3,100080d8 <__alt_data_end+0xf80080d8>
100080ec:	f800283a 	ret
100080f0:	00c003c4 	movi	r3,15
100080f4:	1980412e 	bgeu	r3,r6,100081fc <memmove+0x140>
100080f8:	2886b03a 	or	r3,r5,r2
100080fc:	18c000cc 	andi	r3,r3,3
10008100:	1800401e 	bne	r3,zero,10008204 <memmove+0x148>
10008104:	33fffc04 	addi	r15,r6,-16
10008108:	781ed13a 	srli	r15,r15,4
1000810c:	28c00104 	addi	r3,r5,4
10008110:	13400104 	addi	r13,r2,4
10008114:	781c913a 	slli	r14,r15,4
10008118:	2b000204 	addi	r12,r5,8
1000811c:	12c00204 	addi	r11,r2,8
10008120:	73800504 	addi	r14,r14,20
10008124:	2a800304 	addi	r10,r5,12
10008128:	12400304 	addi	r9,r2,12
1000812c:	2b9d883a 	add	r14,r5,r14
10008130:	2811883a 	mov	r8,r5
10008134:	100f883a 	mov	r7,r2
10008138:	41000017 	ldw	r4,0(r8)
1000813c:	39c00404 	addi	r7,r7,16
10008140:	18c00404 	addi	r3,r3,16
10008144:	393ffc15 	stw	r4,-16(r7)
10008148:	193ffc17 	ldw	r4,-16(r3)
1000814c:	6b400404 	addi	r13,r13,16
10008150:	5ac00404 	addi	r11,r11,16
10008154:	693ffc15 	stw	r4,-16(r13)
10008158:	61000017 	ldw	r4,0(r12)
1000815c:	4a400404 	addi	r9,r9,16
10008160:	42000404 	addi	r8,r8,16
10008164:	593ffc15 	stw	r4,-16(r11)
10008168:	51000017 	ldw	r4,0(r10)
1000816c:	63000404 	addi	r12,r12,16
10008170:	52800404 	addi	r10,r10,16
10008174:	493ffc15 	stw	r4,-16(r9)
10008178:	1bbfef1e 	bne	r3,r14,10008138 <__alt_data_end+0xf8008138>
1000817c:	79000044 	addi	r4,r15,1
10008180:	2008913a 	slli	r4,r4,4
10008184:	328003cc 	andi	r10,r6,15
10008188:	02c000c4 	movi	r11,3
1000818c:	1107883a 	add	r3,r2,r4
10008190:	290b883a 	add	r5,r5,r4
10008194:	5a801e2e 	bgeu	r11,r10,10008210 <memmove+0x154>
10008198:	1813883a 	mov	r9,r3
1000819c:	2811883a 	mov	r8,r5
100081a0:	500f883a 	mov	r7,r10
100081a4:	41000017 	ldw	r4,0(r8)
100081a8:	4a400104 	addi	r9,r9,4
100081ac:	39ffff04 	addi	r7,r7,-4
100081b0:	493fff15 	stw	r4,-4(r9)
100081b4:	42000104 	addi	r8,r8,4
100081b8:	59fffa36 	bltu	r11,r7,100081a4 <__alt_data_end+0xf80081a4>
100081bc:	513fff04 	addi	r4,r10,-4
100081c0:	2008d0ba 	srli	r4,r4,2
100081c4:	318000cc 	andi	r6,r6,3
100081c8:	21000044 	addi	r4,r4,1
100081cc:	2109883a 	add	r4,r4,r4
100081d0:	2109883a 	add	r4,r4,r4
100081d4:	1907883a 	add	r3,r3,r4
100081d8:	290b883a 	add	r5,r5,r4
100081dc:	30000b26 	beq	r6,zero,1000820c <memmove+0x150>
100081e0:	198d883a 	add	r6,r3,r6
100081e4:	29c00003 	ldbu	r7,0(r5)
100081e8:	18c00044 	addi	r3,r3,1
100081ec:	29400044 	addi	r5,r5,1
100081f0:	19ffffc5 	stb	r7,-1(r3)
100081f4:	19bffb1e 	bne	r3,r6,100081e4 <__alt_data_end+0xf80081e4>
100081f8:	f800283a 	ret
100081fc:	1007883a 	mov	r3,r2
10008200:	003ff606 	br	100081dc <__alt_data_end+0xf80081dc>
10008204:	1007883a 	mov	r3,r2
10008208:	003ff506 	br	100081e0 <__alt_data_end+0xf80081e0>
1000820c:	f800283a 	ret
10008210:	500d883a 	mov	r6,r10
10008214:	003ff106 	br	100081dc <__alt_data_end+0xf80081dc>

10008218 <memset>:
10008218:	20c000cc 	andi	r3,r4,3
1000821c:	2005883a 	mov	r2,r4
10008220:	18004426 	beq	r3,zero,10008334 <memset+0x11c>
10008224:	31ffffc4 	addi	r7,r6,-1
10008228:	30004026 	beq	r6,zero,1000832c <memset+0x114>
1000822c:	2813883a 	mov	r9,r5
10008230:	200d883a 	mov	r6,r4
10008234:	2007883a 	mov	r3,r4
10008238:	00000406 	br	1000824c <memset+0x34>
1000823c:	3a3fffc4 	addi	r8,r7,-1
10008240:	31800044 	addi	r6,r6,1
10008244:	38003926 	beq	r7,zero,1000832c <memset+0x114>
10008248:	400f883a 	mov	r7,r8
1000824c:	18c00044 	addi	r3,r3,1
10008250:	32400005 	stb	r9,0(r6)
10008254:	1a0000cc 	andi	r8,r3,3
10008258:	403ff81e 	bne	r8,zero,1000823c <__alt_data_end+0xf800823c>
1000825c:	010000c4 	movi	r4,3
10008260:	21c02d2e 	bgeu	r4,r7,10008318 <memset+0x100>
10008264:	29003fcc 	andi	r4,r5,255
10008268:	200c923a 	slli	r6,r4,8
1000826c:	3108b03a 	or	r4,r6,r4
10008270:	200c943a 	slli	r6,r4,16
10008274:	218cb03a 	or	r6,r4,r6
10008278:	010003c4 	movi	r4,15
1000827c:	21c0182e 	bgeu	r4,r7,100082e0 <memset+0xc8>
10008280:	3b3ffc04 	addi	r12,r7,-16
10008284:	6018d13a 	srli	r12,r12,4
10008288:	1a000104 	addi	r8,r3,4
1000828c:	1ac00204 	addi	r11,r3,8
10008290:	6008913a 	slli	r4,r12,4
10008294:	1a800304 	addi	r10,r3,12
10008298:	1813883a 	mov	r9,r3
1000829c:	21000504 	addi	r4,r4,20
100082a0:	1909883a 	add	r4,r3,r4
100082a4:	49800015 	stw	r6,0(r9)
100082a8:	41800015 	stw	r6,0(r8)
100082ac:	59800015 	stw	r6,0(r11)
100082b0:	51800015 	stw	r6,0(r10)
100082b4:	42000404 	addi	r8,r8,16
100082b8:	4a400404 	addi	r9,r9,16
100082bc:	5ac00404 	addi	r11,r11,16
100082c0:	52800404 	addi	r10,r10,16
100082c4:	413ff71e 	bne	r8,r4,100082a4 <__alt_data_end+0xf80082a4>
100082c8:	63000044 	addi	r12,r12,1
100082cc:	6018913a 	slli	r12,r12,4
100082d0:	39c003cc 	andi	r7,r7,15
100082d4:	010000c4 	movi	r4,3
100082d8:	1b07883a 	add	r3,r3,r12
100082dc:	21c00e2e 	bgeu	r4,r7,10008318 <memset+0x100>
100082e0:	1813883a 	mov	r9,r3
100082e4:	3811883a 	mov	r8,r7
100082e8:	010000c4 	movi	r4,3
100082ec:	49800015 	stw	r6,0(r9)
100082f0:	423fff04 	addi	r8,r8,-4
100082f4:	4a400104 	addi	r9,r9,4
100082f8:	223ffc36 	bltu	r4,r8,100082ec <__alt_data_end+0xf80082ec>
100082fc:	393fff04 	addi	r4,r7,-4
10008300:	2008d0ba 	srli	r4,r4,2
10008304:	39c000cc 	andi	r7,r7,3
10008308:	21000044 	addi	r4,r4,1
1000830c:	2109883a 	add	r4,r4,r4
10008310:	2109883a 	add	r4,r4,r4
10008314:	1907883a 	add	r3,r3,r4
10008318:	38000526 	beq	r7,zero,10008330 <memset+0x118>
1000831c:	19cf883a 	add	r7,r3,r7
10008320:	19400005 	stb	r5,0(r3)
10008324:	18c00044 	addi	r3,r3,1
10008328:	38fffd1e 	bne	r7,r3,10008320 <__alt_data_end+0xf8008320>
1000832c:	f800283a 	ret
10008330:	f800283a 	ret
10008334:	2007883a 	mov	r3,r4
10008338:	300f883a 	mov	r7,r6
1000833c:	003fc706 	br	1000825c <__alt_data_end+0xf800825c>

10008340 <_realloc_r>:
10008340:	defff604 	addi	sp,sp,-40
10008344:	dc800215 	stw	r18,8(sp)
10008348:	dfc00915 	stw	ra,36(sp)
1000834c:	df000815 	stw	fp,32(sp)
10008350:	ddc00715 	stw	r23,28(sp)
10008354:	dd800615 	stw	r22,24(sp)
10008358:	dd400515 	stw	r21,20(sp)
1000835c:	dd000415 	stw	r20,16(sp)
10008360:	dcc00315 	stw	r19,12(sp)
10008364:	dc400115 	stw	r17,4(sp)
10008368:	dc000015 	stw	r16,0(sp)
1000836c:	3025883a 	mov	r18,r6
10008370:	2800b726 	beq	r5,zero,10008650 <_realloc_r+0x310>
10008374:	282b883a 	mov	r21,r5
10008378:	2029883a 	mov	r20,r4
1000837c:	000bf7c0 	call	1000bf7c <__malloc_lock>
10008380:	a8bfff17 	ldw	r2,-4(r21)
10008384:	043fff04 	movi	r16,-4
10008388:	90c002c4 	addi	r3,r18,11
1000838c:	01000584 	movi	r4,22
10008390:	acfffe04 	addi	r19,r21,-8
10008394:	1420703a 	and	r16,r2,r16
10008398:	20c0332e 	bgeu	r4,r3,10008468 <_realloc_r+0x128>
1000839c:	047ffe04 	movi	r17,-8
100083a0:	1c62703a 	and	r17,r3,r17
100083a4:	8807883a 	mov	r3,r17
100083a8:	88005816 	blt	r17,zero,1000850c <_realloc_r+0x1cc>
100083ac:	8c805736 	bltu	r17,r18,1000850c <_realloc_r+0x1cc>
100083b0:	80c0300e 	bge	r16,r3,10008474 <_realloc_r+0x134>
100083b4:	07040074 	movhi	fp,4097
100083b8:	e73b4004 	addi	fp,fp,-4864
100083bc:	e1c00217 	ldw	r7,8(fp)
100083c0:	9c09883a 	add	r4,r19,r16
100083c4:	22000117 	ldw	r8,4(r4)
100083c8:	21c06326 	beq	r4,r7,10008558 <_realloc_r+0x218>
100083cc:	017fff84 	movi	r5,-2
100083d0:	414a703a 	and	r5,r8,r5
100083d4:	214b883a 	add	r5,r4,r5
100083d8:	29800117 	ldw	r6,4(r5)
100083dc:	3180004c 	andi	r6,r6,1
100083e0:	30003f26 	beq	r6,zero,100084e0 <_realloc_r+0x1a0>
100083e4:	1080004c 	andi	r2,r2,1
100083e8:	10008326 	beq	r2,zero,100085f8 <_realloc_r+0x2b8>
100083ec:	900b883a 	mov	r5,r18
100083f0:	a009883a 	mov	r4,r20
100083f4:	00049a80 	call	100049a8 <_malloc_r>
100083f8:	1025883a 	mov	r18,r2
100083fc:	10011e26 	beq	r2,zero,10008878 <_realloc_r+0x538>
10008400:	a93fff17 	ldw	r4,-4(r21)
10008404:	10fffe04 	addi	r3,r2,-8
10008408:	00bfff84 	movi	r2,-2
1000840c:	2084703a 	and	r2,r4,r2
10008410:	9885883a 	add	r2,r19,r2
10008414:	1880ee26 	beq	r3,r2,100087d0 <_realloc_r+0x490>
10008418:	81bfff04 	addi	r6,r16,-4
1000841c:	00800904 	movi	r2,36
10008420:	1180b836 	bltu	r2,r6,10008704 <_realloc_r+0x3c4>
10008424:	00c004c4 	movi	r3,19
10008428:	19809636 	bltu	r3,r6,10008684 <_realloc_r+0x344>
1000842c:	9005883a 	mov	r2,r18
10008430:	a807883a 	mov	r3,r21
10008434:	19000017 	ldw	r4,0(r3)
10008438:	11000015 	stw	r4,0(r2)
1000843c:	19000117 	ldw	r4,4(r3)
10008440:	11000115 	stw	r4,4(r2)
10008444:	18c00217 	ldw	r3,8(r3)
10008448:	10c00215 	stw	r3,8(r2)
1000844c:	a80b883a 	mov	r5,r21
10008450:	a009883a 	mov	r4,r20
10008454:	0007dac0 	call	10007dac <_free_r>
10008458:	a009883a 	mov	r4,r20
1000845c:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10008460:	9005883a 	mov	r2,r18
10008464:	00001206 	br	100084b0 <_realloc_r+0x170>
10008468:	00c00404 	movi	r3,16
1000846c:	1823883a 	mov	r17,r3
10008470:	003fce06 	br	100083ac <__alt_data_end+0xf80083ac>
10008474:	a825883a 	mov	r18,r21
10008478:	8445c83a 	sub	r2,r16,r17
1000847c:	00c003c4 	movi	r3,15
10008480:	18802636 	bltu	r3,r2,1000851c <_realloc_r+0x1dc>
10008484:	99800117 	ldw	r6,4(r19)
10008488:	9c07883a 	add	r3,r19,r16
1000848c:	3180004c 	andi	r6,r6,1
10008490:	3420b03a 	or	r16,r6,r16
10008494:	9c000115 	stw	r16,4(r19)
10008498:	18800117 	ldw	r2,4(r3)
1000849c:	10800054 	ori	r2,r2,1
100084a0:	18800115 	stw	r2,4(r3)
100084a4:	a009883a 	mov	r4,r20
100084a8:	000bfa00 	call	1000bfa0 <__malloc_unlock>
100084ac:	9005883a 	mov	r2,r18
100084b0:	dfc00917 	ldw	ra,36(sp)
100084b4:	df000817 	ldw	fp,32(sp)
100084b8:	ddc00717 	ldw	r23,28(sp)
100084bc:	dd800617 	ldw	r22,24(sp)
100084c0:	dd400517 	ldw	r21,20(sp)
100084c4:	dd000417 	ldw	r20,16(sp)
100084c8:	dcc00317 	ldw	r19,12(sp)
100084cc:	dc800217 	ldw	r18,8(sp)
100084d0:	dc400117 	ldw	r17,4(sp)
100084d4:	dc000017 	ldw	r16,0(sp)
100084d8:	dec00a04 	addi	sp,sp,40
100084dc:	f800283a 	ret
100084e0:	017fff04 	movi	r5,-4
100084e4:	414a703a 	and	r5,r8,r5
100084e8:	814d883a 	add	r6,r16,r5
100084ec:	30c01f16 	blt	r6,r3,1000856c <_realloc_r+0x22c>
100084f0:	20800317 	ldw	r2,12(r4)
100084f4:	20c00217 	ldw	r3,8(r4)
100084f8:	a825883a 	mov	r18,r21
100084fc:	3021883a 	mov	r16,r6
10008500:	18800315 	stw	r2,12(r3)
10008504:	10c00215 	stw	r3,8(r2)
10008508:	003fdb06 	br	10008478 <__alt_data_end+0xf8008478>
1000850c:	00800304 	movi	r2,12
10008510:	a0800015 	stw	r2,0(r20)
10008514:	0005883a 	mov	r2,zero
10008518:	003fe506 	br	100084b0 <__alt_data_end+0xf80084b0>
1000851c:	98c00117 	ldw	r3,4(r19)
10008520:	9c4b883a 	add	r5,r19,r17
10008524:	11000054 	ori	r4,r2,1
10008528:	18c0004c 	andi	r3,r3,1
1000852c:	1c62b03a 	or	r17,r3,r17
10008530:	9c400115 	stw	r17,4(r19)
10008534:	29000115 	stw	r4,4(r5)
10008538:	2885883a 	add	r2,r5,r2
1000853c:	10c00117 	ldw	r3,4(r2)
10008540:	29400204 	addi	r5,r5,8
10008544:	a009883a 	mov	r4,r20
10008548:	18c00054 	ori	r3,r3,1
1000854c:	10c00115 	stw	r3,4(r2)
10008550:	0007dac0 	call	10007dac <_free_r>
10008554:	003fd306 	br	100084a4 <__alt_data_end+0xf80084a4>
10008558:	017fff04 	movi	r5,-4
1000855c:	414a703a 	and	r5,r8,r5
10008560:	89800404 	addi	r6,r17,16
10008564:	8151883a 	add	r8,r16,r5
10008568:	4180590e 	bge	r8,r6,100086d0 <_realloc_r+0x390>
1000856c:	1080004c 	andi	r2,r2,1
10008570:	103f9e1e 	bne	r2,zero,100083ec <__alt_data_end+0xf80083ec>
10008574:	adbffe17 	ldw	r22,-8(r21)
10008578:	00bfff04 	movi	r2,-4
1000857c:	9dadc83a 	sub	r22,r19,r22
10008580:	b1800117 	ldw	r6,4(r22)
10008584:	3084703a 	and	r2,r6,r2
10008588:	20002026 	beq	r4,zero,1000860c <_realloc_r+0x2cc>
1000858c:	80af883a 	add	r23,r16,r2
10008590:	b96f883a 	add	r23,r23,r5
10008594:	21c05f26 	beq	r4,r7,10008714 <_realloc_r+0x3d4>
10008598:	b8c01c16 	blt	r23,r3,1000860c <_realloc_r+0x2cc>
1000859c:	20800317 	ldw	r2,12(r4)
100085a0:	20c00217 	ldw	r3,8(r4)
100085a4:	81bfff04 	addi	r6,r16,-4
100085a8:	01000904 	movi	r4,36
100085ac:	18800315 	stw	r2,12(r3)
100085b0:	10c00215 	stw	r3,8(r2)
100085b4:	b0c00217 	ldw	r3,8(r22)
100085b8:	b0800317 	ldw	r2,12(r22)
100085bc:	b4800204 	addi	r18,r22,8
100085c0:	18800315 	stw	r2,12(r3)
100085c4:	10c00215 	stw	r3,8(r2)
100085c8:	21801b36 	bltu	r4,r6,10008638 <_realloc_r+0x2f8>
100085cc:	008004c4 	movi	r2,19
100085d0:	1180352e 	bgeu	r2,r6,100086a8 <_realloc_r+0x368>
100085d4:	a8800017 	ldw	r2,0(r21)
100085d8:	b0800215 	stw	r2,8(r22)
100085dc:	a8800117 	ldw	r2,4(r21)
100085e0:	b0800315 	stw	r2,12(r22)
100085e4:	008006c4 	movi	r2,27
100085e8:	11807f36 	bltu	r2,r6,100087e8 <_realloc_r+0x4a8>
100085ec:	b0800404 	addi	r2,r22,16
100085f0:	ad400204 	addi	r21,r21,8
100085f4:	00002d06 	br	100086ac <_realloc_r+0x36c>
100085f8:	adbffe17 	ldw	r22,-8(r21)
100085fc:	00bfff04 	movi	r2,-4
10008600:	9dadc83a 	sub	r22,r19,r22
10008604:	b1000117 	ldw	r4,4(r22)
10008608:	2084703a 	and	r2,r4,r2
1000860c:	b03f7726 	beq	r22,zero,100083ec <__alt_data_end+0xf80083ec>
10008610:	80af883a 	add	r23,r16,r2
10008614:	b8ff7516 	blt	r23,r3,100083ec <__alt_data_end+0xf80083ec>
10008618:	b0800317 	ldw	r2,12(r22)
1000861c:	b0c00217 	ldw	r3,8(r22)
10008620:	81bfff04 	addi	r6,r16,-4
10008624:	01000904 	movi	r4,36
10008628:	18800315 	stw	r2,12(r3)
1000862c:	10c00215 	stw	r3,8(r2)
10008630:	b4800204 	addi	r18,r22,8
10008634:	21bfe52e 	bgeu	r4,r6,100085cc <__alt_data_end+0xf80085cc>
10008638:	a80b883a 	mov	r5,r21
1000863c:	9009883a 	mov	r4,r18
10008640:	00080bc0 	call	100080bc <memmove>
10008644:	b821883a 	mov	r16,r23
10008648:	b027883a 	mov	r19,r22
1000864c:	003f8a06 	br	10008478 <__alt_data_end+0xf8008478>
10008650:	300b883a 	mov	r5,r6
10008654:	dfc00917 	ldw	ra,36(sp)
10008658:	df000817 	ldw	fp,32(sp)
1000865c:	ddc00717 	ldw	r23,28(sp)
10008660:	dd800617 	ldw	r22,24(sp)
10008664:	dd400517 	ldw	r21,20(sp)
10008668:	dd000417 	ldw	r20,16(sp)
1000866c:	dcc00317 	ldw	r19,12(sp)
10008670:	dc800217 	ldw	r18,8(sp)
10008674:	dc400117 	ldw	r17,4(sp)
10008678:	dc000017 	ldw	r16,0(sp)
1000867c:	dec00a04 	addi	sp,sp,40
10008680:	00049a81 	jmpi	100049a8 <_malloc_r>
10008684:	a8c00017 	ldw	r3,0(r21)
10008688:	90c00015 	stw	r3,0(r18)
1000868c:	a8c00117 	ldw	r3,4(r21)
10008690:	90c00115 	stw	r3,4(r18)
10008694:	00c006c4 	movi	r3,27
10008698:	19804536 	bltu	r3,r6,100087b0 <_realloc_r+0x470>
1000869c:	90800204 	addi	r2,r18,8
100086a0:	a8c00204 	addi	r3,r21,8
100086a4:	003f6306 	br	10008434 <__alt_data_end+0xf8008434>
100086a8:	9005883a 	mov	r2,r18
100086ac:	a8c00017 	ldw	r3,0(r21)
100086b0:	b821883a 	mov	r16,r23
100086b4:	b027883a 	mov	r19,r22
100086b8:	10c00015 	stw	r3,0(r2)
100086bc:	a8c00117 	ldw	r3,4(r21)
100086c0:	10c00115 	stw	r3,4(r2)
100086c4:	a8c00217 	ldw	r3,8(r21)
100086c8:	10c00215 	stw	r3,8(r2)
100086cc:	003f6a06 	br	10008478 <__alt_data_end+0xf8008478>
100086d0:	9c67883a 	add	r19,r19,r17
100086d4:	4445c83a 	sub	r2,r8,r17
100086d8:	e4c00215 	stw	r19,8(fp)
100086dc:	10800054 	ori	r2,r2,1
100086e0:	98800115 	stw	r2,4(r19)
100086e4:	a8bfff17 	ldw	r2,-4(r21)
100086e8:	a009883a 	mov	r4,r20
100086ec:	1080004c 	andi	r2,r2,1
100086f0:	1462b03a 	or	r17,r2,r17
100086f4:	ac7fff15 	stw	r17,-4(r21)
100086f8:	000bfa00 	call	1000bfa0 <__malloc_unlock>
100086fc:	a805883a 	mov	r2,r21
10008700:	003f6b06 	br	100084b0 <__alt_data_end+0xf80084b0>
10008704:	a80b883a 	mov	r5,r21
10008708:	9009883a 	mov	r4,r18
1000870c:	00080bc0 	call	100080bc <memmove>
10008710:	003f4e06 	br	1000844c <__alt_data_end+0xf800844c>
10008714:	89000404 	addi	r4,r17,16
10008718:	b93fbc16 	blt	r23,r4,1000860c <__alt_data_end+0xf800860c>
1000871c:	b0800317 	ldw	r2,12(r22)
10008720:	b0c00217 	ldw	r3,8(r22)
10008724:	81bfff04 	addi	r6,r16,-4
10008728:	01000904 	movi	r4,36
1000872c:	18800315 	stw	r2,12(r3)
10008730:	10c00215 	stw	r3,8(r2)
10008734:	b4800204 	addi	r18,r22,8
10008738:	21804336 	bltu	r4,r6,10008848 <_realloc_r+0x508>
1000873c:	008004c4 	movi	r2,19
10008740:	11803f2e 	bgeu	r2,r6,10008840 <_realloc_r+0x500>
10008744:	a8800017 	ldw	r2,0(r21)
10008748:	b0800215 	stw	r2,8(r22)
1000874c:	a8800117 	ldw	r2,4(r21)
10008750:	b0800315 	stw	r2,12(r22)
10008754:	008006c4 	movi	r2,27
10008758:	11803f36 	bltu	r2,r6,10008858 <_realloc_r+0x518>
1000875c:	b0800404 	addi	r2,r22,16
10008760:	ad400204 	addi	r21,r21,8
10008764:	a8c00017 	ldw	r3,0(r21)
10008768:	10c00015 	stw	r3,0(r2)
1000876c:	a8c00117 	ldw	r3,4(r21)
10008770:	10c00115 	stw	r3,4(r2)
10008774:	a8c00217 	ldw	r3,8(r21)
10008778:	10c00215 	stw	r3,8(r2)
1000877c:	b447883a 	add	r3,r22,r17
10008780:	bc45c83a 	sub	r2,r23,r17
10008784:	e0c00215 	stw	r3,8(fp)
10008788:	10800054 	ori	r2,r2,1
1000878c:	18800115 	stw	r2,4(r3)
10008790:	b0800117 	ldw	r2,4(r22)
10008794:	a009883a 	mov	r4,r20
10008798:	1080004c 	andi	r2,r2,1
1000879c:	1462b03a 	or	r17,r2,r17
100087a0:	b4400115 	stw	r17,4(r22)
100087a4:	000bfa00 	call	1000bfa0 <__malloc_unlock>
100087a8:	9005883a 	mov	r2,r18
100087ac:	003f4006 	br	100084b0 <__alt_data_end+0xf80084b0>
100087b0:	a8c00217 	ldw	r3,8(r21)
100087b4:	90c00215 	stw	r3,8(r18)
100087b8:	a8c00317 	ldw	r3,12(r21)
100087bc:	90c00315 	stw	r3,12(r18)
100087c0:	30801126 	beq	r6,r2,10008808 <_realloc_r+0x4c8>
100087c4:	90800404 	addi	r2,r18,16
100087c8:	a8c00404 	addi	r3,r21,16
100087cc:	003f1906 	br	10008434 <__alt_data_end+0xf8008434>
100087d0:	90ffff17 	ldw	r3,-4(r18)
100087d4:	00bfff04 	movi	r2,-4
100087d8:	a825883a 	mov	r18,r21
100087dc:	1884703a 	and	r2,r3,r2
100087e0:	80a1883a 	add	r16,r16,r2
100087e4:	003f2406 	br	10008478 <__alt_data_end+0xf8008478>
100087e8:	a8800217 	ldw	r2,8(r21)
100087ec:	b0800415 	stw	r2,16(r22)
100087f0:	a8800317 	ldw	r2,12(r21)
100087f4:	b0800515 	stw	r2,20(r22)
100087f8:	31000a26 	beq	r6,r4,10008824 <_realloc_r+0x4e4>
100087fc:	b0800604 	addi	r2,r22,24
10008800:	ad400404 	addi	r21,r21,16
10008804:	003fa906 	br	100086ac <__alt_data_end+0xf80086ac>
10008808:	a9000417 	ldw	r4,16(r21)
1000880c:	90800604 	addi	r2,r18,24
10008810:	a8c00604 	addi	r3,r21,24
10008814:	91000415 	stw	r4,16(r18)
10008818:	a9000517 	ldw	r4,20(r21)
1000881c:	91000515 	stw	r4,20(r18)
10008820:	003f0406 	br	10008434 <__alt_data_end+0xf8008434>
10008824:	a8c00417 	ldw	r3,16(r21)
10008828:	ad400604 	addi	r21,r21,24
1000882c:	b0800804 	addi	r2,r22,32
10008830:	b0c00615 	stw	r3,24(r22)
10008834:	a8ffff17 	ldw	r3,-4(r21)
10008838:	b0c00715 	stw	r3,28(r22)
1000883c:	003f9b06 	br	100086ac <__alt_data_end+0xf80086ac>
10008840:	9005883a 	mov	r2,r18
10008844:	003fc706 	br	10008764 <__alt_data_end+0xf8008764>
10008848:	a80b883a 	mov	r5,r21
1000884c:	9009883a 	mov	r4,r18
10008850:	00080bc0 	call	100080bc <memmove>
10008854:	003fc906 	br	1000877c <__alt_data_end+0xf800877c>
10008858:	a8800217 	ldw	r2,8(r21)
1000885c:	b0800415 	stw	r2,16(r22)
10008860:	a8800317 	ldw	r2,12(r21)
10008864:	b0800515 	stw	r2,20(r22)
10008868:	31000726 	beq	r6,r4,10008888 <_realloc_r+0x548>
1000886c:	b0800604 	addi	r2,r22,24
10008870:	ad400404 	addi	r21,r21,16
10008874:	003fbb06 	br	10008764 <__alt_data_end+0xf8008764>
10008878:	a009883a 	mov	r4,r20
1000887c:	000bfa00 	call	1000bfa0 <__malloc_unlock>
10008880:	0005883a 	mov	r2,zero
10008884:	003f0a06 	br	100084b0 <__alt_data_end+0xf80084b0>
10008888:	a8c00417 	ldw	r3,16(r21)
1000888c:	ad400604 	addi	r21,r21,24
10008890:	b0800804 	addi	r2,r22,32
10008894:	b0c00615 	stw	r3,24(r22)
10008898:	a8ffff17 	ldw	r3,-4(r21)
1000889c:	b0c00715 	stw	r3,28(r22)
100088a0:	003fb006 	br	10008764 <__alt_data_end+0xf8008764>

100088a4 <__muldi3>:
100088a4:	defff604 	addi	sp,sp,-40
100088a8:	dd800615 	stw	r22,24(sp)
100088ac:	dd400515 	stw	r21,20(sp)
100088b0:	dc400115 	stw	r17,4(sp)
100088b4:	357fffcc 	andi	r21,r6,65535
100088b8:	2022d43a 	srli	r17,r4,16
100088bc:	25bfffcc 	andi	r22,r4,65535
100088c0:	dcc00315 	stw	r19,12(sp)
100088c4:	dc800215 	stw	r18,8(sp)
100088c8:	2027883a 	mov	r19,r4
100088cc:	2825883a 	mov	r18,r5
100088d0:	b009883a 	mov	r4,r22
100088d4:	a80b883a 	mov	r5,r21
100088d8:	dfc00915 	stw	ra,36(sp)
100088dc:	df000815 	stw	fp,32(sp)
100088e0:	ddc00715 	stw	r23,28(sp)
100088e4:	3839883a 	mov	fp,r7
100088e8:	302ed43a 	srli	r23,r6,16
100088ec:	dd000415 	stw	r20,16(sp)
100088f0:	dc000015 	stw	r16,0(sp)
100088f4:	3029883a 	mov	r20,r6
100088f8:	0000b600 	call	10000b60 <__mulsi3>
100088fc:	a80b883a 	mov	r5,r21
10008900:	8809883a 	mov	r4,r17
10008904:	1021883a 	mov	r16,r2
10008908:	0000b600 	call	10000b60 <__mulsi3>
1000890c:	8809883a 	mov	r4,r17
10008910:	b80b883a 	mov	r5,r23
10008914:	102b883a 	mov	r21,r2
10008918:	0000b600 	call	10000b60 <__mulsi3>
1000891c:	b80b883a 	mov	r5,r23
10008920:	b009883a 	mov	r4,r22
10008924:	1023883a 	mov	r17,r2
10008928:	0000b600 	call	10000b60 <__mulsi3>
1000892c:	8006d43a 	srli	r3,r16,16
10008930:	1545883a 	add	r2,r2,r21
10008934:	1885883a 	add	r2,r3,r2
10008938:	1540022e 	bgeu	r2,r21,10008944 <__muldi3+0xa0>
1000893c:	00c00074 	movhi	r3,1
10008940:	88e3883a 	add	r17,r17,r3
10008944:	1006d43a 	srli	r3,r2,16
10008948:	1004943a 	slli	r2,r2,16
1000894c:	e00b883a 	mov	r5,fp
10008950:	9809883a 	mov	r4,r19
10008954:	843fffcc 	andi	r16,r16,65535
10008958:	1c63883a 	add	r17,r3,r17
1000895c:	1421883a 	add	r16,r2,r16
10008960:	0000b600 	call	10000b60 <__mulsi3>
10008964:	900b883a 	mov	r5,r18
10008968:	a009883a 	mov	r4,r20
1000896c:	1027883a 	mov	r19,r2
10008970:	0000b600 	call	10000b60 <__mulsi3>
10008974:	9885883a 	add	r2,r19,r2
10008978:	1447883a 	add	r3,r2,r17
1000897c:	8005883a 	mov	r2,r16
10008980:	dfc00917 	ldw	ra,36(sp)
10008984:	df000817 	ldw	fp,32(sp)
10008988:	ddc00717 	ldw	r23,28(sp)
1000898c:	dd800617 	ldw	r22,24(sp)
10008990:	dd400517 	ldw	r21,20(sp)
10008994:	dd000417 	ldw	r20,16(sp)
10008998:	dcc00317 	ldw	r19,12(sp)
1000899c:	dc800217 	ldw	r18,8(sp)
100089a0:	dc400117 	ldw	r17,4(sp)
100089a4:	dc000017 	ldw	r16,0(sp)
100089a8:	dec00a04 	addi	sp,sp,40
100089ac:	f800283a 	ret

100089b0 <__udivdi3>:
100089b0:	defff404 	addi	sp,sp,-48
100089b4:	dcc00515 	stw	r19,20(sp)
100089b8:	dc000215 	stw	r16,8(sp)
100089bc:	dfc00b15 	stw	ra,44(sp)
100089c0:	df000a15 	stw	fp,40(sp)
100089c4:	ddc00915 	stw	r23,36(sp)
100089c8:	dd800815 	stw	r22,32(sp)
100089cc:	dd400715 	stw	r21,28(sp)
100089d0:	dd000615 	stw	r20,24(sp)
100089d4:	dc800415 	stw	r18,16(sp)
100089d8:	dc400315 	stw	r17,12(sp)
100089dc:	2027883a 	mov	r19,r4
100089e0:	2821883a 	mov	r16,r5
100089e4:	3800461e 	bne	r7,zero,10008b00 <__udivdi3+0x150>
100089e8:	3023883a 	mov	r17,r6
100089ec:	2025883a 	mov	r18,r4
100089f0:	2980572e 	bgeu	r5,r6,10008b50 <__udivdi3+0x1a0>
100089f4:	00bfffd4 	movui	r2,65535
100089f8:	282d883a 	mov	r22,r5
100089fc:	1180b236 	bltu	r2,r6,10008cc8 <__udivdi3+0x318>
10008a00:	00803fc4 	movi	r2,255
10008a04:	1185803a 	cmpltu	r2,r2,r6
10008a08:	100490fa 	slli	r2,r2,3
10008a0c:	3086d83a 	srl	r3,r6,r2
10008a10:	01040074 	movhi	r4,4097
10008a14:	2138b804 	addi	r4,r4,-7456
10008a18:	20c7883a 	add	r3,r4,r3
10008a1c:	18c00003 	ldbu	r3,0(r3)
10008a20:	1885883a 	add	r2,r3,r2
10008a24:	00c00804 	movi	r3,32
10008a28:	1887c83a 	sub	r3,r3,r2
10008a2c:	18000526 	beq	r3,zero,10008a44 <__udivdi3+0x94>
10008a30:	80e0983a 	sll	r16,r16,r3
10008a34:	9884d83a 	srl	r2,r19,r2
10008a38:	30e2983a 	sll	r17,r6,r3
10008a3c:	98e4983a 	sll	r18,r19,r3
10008a40:	142cb03a 	or	r22,r2,r16
10008a44:	882ad43a 	srli	r21,r17,16
10008a48:	b009883a 	mov	r4,r22
10008a4c:	8d3fffcc 	andi	r20,r17,65535
10008a50:	a80b883a 	mov	r5,r21
10008a54:	0000b080 	call	10000b08 <__umodsi3>
10008a58:	b009883a 	mov	r4,r22
10008a5c:	a80b883a 	mov	r5,r21
10008a60:	1027883a 	mov	r19,r2
10008a64:	0000aa40 	call	10000aa4 <__udivsi3>
10008a68:	100b883a 	mov	r5,r2
10008a6c:	a009883a 	mov	r4,r20
10008a70:	102d883a 	mov	r22,r2
10008a74:	0000b600 	call	10000b60 <__mulsi3>
10008a78:	9826943a 	slli	r19,r19,16
10008a7c:	9006d43a 	srli	r3,r18,16
10008a80:	1cc6b03a 	or	r3,r3,r19
10008a84:	1880052e 	bgeu	r3,r2,10008a9c <__udivdi3+0xec>
10008a88:	1c47883a 	add	r3,r3,r17
10008a8c:	b13fffc4 	addi	r4,r22,-1
10008a90:	1c400136 	bltu	r3,r17,10008a98 <__udivdi3+0xe8>
10008a94:	18814236 	bltu	r3,r2,10008fa0 <__udivdi3+0x5f0>
10008a98:	202d883a 	mov	r22,r4
10008a9c:	18a1c83a 	sub	r16,r3,r2
10008aa0:	8009883a 	mov	r4,r16
10008aa4:	a80b883a 	mov	r5,r21
10008aa8:	0000b080 	call	10000b08 <__umodsi3>
10008aac:	1027883a 	mov	r19,r2
10008ab0:	8009883a 	mov	r4,r16
10008ab4:	a80b883a 	mov	r5,r21
10008ab8:	9826943a 	slli	r19,r19,16
10008abc:	0000aa40 	call	10000aa4 <__udivsi3>
10008ac0:	100b883a 	mov	r5,r2
10008ac4:	a009883a 	mov	r4,r20
10008ac8:	94bfffcc 	andi	r18,r18,65535
10008acc:	1021883a 	mov	r16,r2
10008ad0:	94e4b03a 	or	r18,r18,r19
10008ad4:	0000b600 	call	10000b60 <__mulsi3>
10008ad8:	9080052e 	bgeu	r18,r2,10008af0 <__udivdi3+0x140>
10008adc:	8ca5883a 	add	r18,r17,r18
10008ae0:	80ffffc4 	addi	r3,r16,-1
10008ae4:	94410c36 	bltu	r18,r17,10008f18 <__udivdi3+0x568>
10008ae8:	90810b2e 	bgeu	r18,r2,10008f18 <__udivdi3+0x568>
10008aec:	843fff84 	addi	r16,r16,-2
10008af0:	b004943a 	slli	r2,r22,16
10008af4:	0007883a 	mov	r3,zero
10008af8:	1404b03a 	or	r2,r2,r16
10008afc:	00005e06 	br	10008c78 <__udivdi3+0x2c8>
10008b00:	29c05b36 	bltu	r5,r7,10008c70 <__udivdi3+0x2c0>
10008b04:	00bfffd4 	movui	r2,65535
10008b08:	11c0672e 	bgeu	r2,r7,10008ca8 <__udivdi3+0x2f8>
10008b0c:	00804034 	movhi	r2,256
10008b10:	10bfffc4 	addi	r2,r2,-1
10008b14:	11c10a36 	bltu	r2,r7,10008f40 <__udivdi3+0x590>
10008b18:	00800404 	movi	r2,16
10008b1c:	3886d83a 	srl	r3,r7,r2
10008b20:	01040074 	movhi	r4,4097
10008b24:	2138b804 	addi	r4,r4,-7456
10008b28:	20c7883a 	add	r3,r4,r3
10008b2c:	18c00003 	ldbu	r3,0(r3)
10008b30:	05c00804 	movi	r23,32
10008b34:	1885883a 	add	r2,r3,r2
10008b38:	b8afc83a 	sub	r23,r23,r2
10008b3c:	b800671e 	bne	r23,zero,10008cdc <__udivdi3+0x32c>
10008b40:	3c010536 	bltu	r7,r16,10008f58 <__udivdi3+0x5a8>
10008b44:	9985403a 	cmpgeu	r2,r19,r6
10008b48:	0007883a 	mov	r3,zero
10008b4c:	00004a06 	br	10008c78 <__udivdi3+0x2c8>
10008b50:	3000041e 	bne	r6,zero,10008b64 <__udivdi3+0x1b4>
10008b54:	000b883a 	mov	r5,zero
10008b58:	01000044 	movi	r4,1
10008b5c:	0000aa40 	call	10000aa4 <__udivsi3>
10008b60:	1023883a 	mov	r17,r2
10008b64:	00bfffd4 	movui	r2,65535
10008b68:	1440532e 	bgeu	r2,r17,10008cb8 <__udivdi3+0x308>
10008b6c:	00804034 	movhi	r2,256
10008b70:	10bfffc4 	addi	r2,r2,-1
10008b74:	1440f436 	bltu	r2,r17,10008f48 <__udivdi3+0x598>
10008b78:	00800404 	movi	r2,16
10008b7c:	8886d83a 	srl	r3,r17,r2
10008b80:	01040074 	movhi	r4,4097
10008b84:	2138b804 	addi	r4,r4,-7456
10008b88:	20c7883a 	add	r3,r4,r3
10008b8c:	18c00003 	ldbu	r3,0(r3)
10008b90:	1885883a 	add	r2,r3,r2
10008b94:	00c00804 	movi	r3,32
10008b98:	1887c83a 	sub	r3,r3,r2
10008b9c:	1800a51e 	bne	r3,zero,10008e34 <__udivdi3+0x484>
10008ba0:	882ad43a 	srli	r21,r17,16
10008ba4:	8461c83a 	sub	r16,r16,r17
10008ba8:	8d3fffcc 	andi	r20,r17,65535
10008bac:	00c00044 	movi	r3,1
10008bb0:	a80b883a 	mov	r5,r21
10008bb4:	8009883a 	mov	r4,r16
10008bb8:	d8c00115 	stw	r3,4(sp)
10008bbc:	0000b080 	call	10000b08 <__umodsi3>
10008bc0:	a80b883a 	mov	r5,r21
10008bc4:	8009883a 	mov	r4,r16
10008bc8:	1027883a 	mov	r19,r2
10008bcc:	0000aa40 	call	10000aa4 <__udivsi3>
10008bd0:	a00b883a 	mov	r5,r20
10008bd4:	1009883a 	mov	r4,r2
10008bd8:	102d883a 	mov	r22,r2
10008bdc:	0000b600 	call	10000b60 <__mulsi3>
10008be0:	9826943a 	slli	r19,r19,16
10008be4:	900ed43a 	srli	r7,r18,16
10008be8:	d8c00117 	ldw	r3,4(sp)
10008bec:	3cceb03a 	or	r7,r7,r19
10008bf0:	3880052e 	bgeu	r7,r2,10008c08 <__udivdi3+0x258>
10008bf4:	3c4f883a 	add	r7,r7,r17
10008bf8:	b13fffc4 	addi	r4,r22,-1
10008bfc:	3c400136 	bltu	r7,r17,10008c04 <__udivdi3+0x254>
10008c00:	3880e436 	bltu	r7,r2,10008f94 <__udivdi3+0x5e4>
10008c04:	202d883a 	mov	r22,r4
10008c08:	38a1c83a 	sub	r16,r7,r2
10008c0c:	8009883a 	mov	r4,r16
10008c10:	a80b883a 	mov	r5,r21
10008c14:	d8c00115 	stw	r3,4(sp)
10008c18:	0000b080 	call	10000b08 <__umodsi3>
10008c1c:	1027883a 	mov	r19,r2
10008c20:	8009883a 	mov	r4,r16
10008c24:	a80b883a 	mov	r5,r21
10008c28:	9826943a 	slli	r19,r19,16
10008c2c:	0000aa40 	call	10000aa4 <__udivsi3>
10008c30:	a00b883a 	mov	r5,r20
10008c34:	1009883a 	mov	r4,r2
10008c38:	94bfffcc 	andi	r18,r18,65535
10008c3c:	1021883a 	mov	r16,r2
10008c40:	94e4b03a 	or	r18,r18,r19
10008c44:	0000b600 	call	10000b60 <__mulsi3>
10008c48:	d8c00117 	ldw	r3,4(sp)
10008c4c:	9080052e 	bgeu	r18,r2,10008c64 <__udivdi3+0x2b4>
10008c50:	8ca5883a 	add	r18,r17,r18
10008c54:	813fffc4 	addi	r4,r16,-1
10008c58:	9440ad36 	bltu	r18,r17,10008f10 <__udivdi3+0x560>
10008c5c:	9080ac2e 	bgeu	r18,r2,10008f10 <__udivdi3+0x560>
10008c60:	843fff84 	addi	r16,r16,-2
10008c64:	b004943a 	slli	r2,r22,16
10008c68:	1404b03a 	or	r2,r2,r16
10008c6c:	00000206 	br	10008c78 <__udivdi3+0x2c8>
10008c70:	0007883a 	mov	r3,zero
10008c74:	0005883a 	mov	r2,zero
10008c78:	dfc00b17 	ldw	ra,44(sp)
10008c7c:	df000a17 	ldw	fp,40(sp)
10008c80:	ddc00917 	ldw	r23,36(sp)
10008c84:	dd800817 	ldw	r22,32(sp)
10008c88:	dd400717 	ldw	r21,28(sp)
10008c8c:	dd000617 	ldw	r20,24(sp)
10008c90:	dcc00517 	ldw	r19,20(sp)
10008c94:	dc800417 	ldw	r18,16(sp)
10008c98:	dc400317 	ldw	r17,12(sp)
10008c9c:	dc000217 	ldw	r16,8(sp)
10008ca0:	dec00c04 	addi	sp,sp,48
10008ca4:	f800283a 	ret
10008ca8:	00803fc4 	movi	r2,255
10008cac:	11c5803a 	cmpltu	r2,r2,r7
10008cb0:	100490fa 	slli	r2,r2,3
10008cb4:	003f9906 	br	10008b1c <__alt_data_end+0xf8008b1c>
10008cb8:	00803fc4 	movi	r2,255
10008cbc:	1445803a 	cmpltu	r2,r2,r17
10008cc0:	100490fa 	slli	r2,r2,3
10008cc4:	003fad06 	br	10008b7c <__alt_data_end+0xf8008b7c>
10008cc8:	00804034 	movhi	r2,256
10008ccc:	10bfffc4 	addi	r2,r2,-1
10008cd0:	11809f36 	bltu	r2,r6,10008f50 <__udivdi3+0x5a0>
10008cd4:	00800404 	movi	r2,16
10008cd8:	003f4c06 	br	10008a0c <__alt_data_end+0xf8008a0c>
10008cdc:	3dce983a 	sll	r7,r7,r23
10008ce0:	30b8d83a 	srl	fp,r6,r2
10008ce4:	80a2d83a 	srl	r17,r16,r2
10008ce8:	35cc983a 	sll	r6,r6,r23
10008cec:	3f38b03a 	or	fp,r7,fp
10008cf0:	e024d43a 	srli	r18,fp,16
10008cf4:	9884d83a 	srl	r2,r19,r2
10008cf8:	85e0983a 	sll	r16,r16,r23
10008cfc:	8809883a 	mov	r4,r17
10008d00:	900b883a 	mov	r5,r18
10008d04:	d9800015 	stw	r6,0(sp)
10008d08:	1420b03a 	or	r16,r2,r16
10008d0c:	0000b080 	call	10000b08 <__umodsi3>
10008d10:	900b883a 	mov	r5,r18
10008d14:	8809883a 	mov	r4,r17
10008d18:	1029883a 	mov	r20,r2
10008d1c:	e5bfffcc 	andi	r22,fp,65535
10008d20:	0000aa40 	call	10000aa4 <__udivsi3>
10008d24:	100b883a 	mov	r5,r2
10008d28:	b009883a 	mov	r4,r22
10008d2c:	102b883a 	mov	r21,r2
10008d30:	0000b600 	call	10000b60 <__mulsi3>
10008d34:	a028943a 	slli	r20,r20,16
10008d38:	8006d43a 	srli	r3,r16,16
10008d3c:	1d06b03a 	or	r3,r3,r20
10008d40:	1880042e 	bgeu	r3,r2,10008d54 <__udivdi3+0x3a4>
10008d44:	1f07883a 	add	r3,r3,fp
10008d48:	a93fffc4 	addi	r4,r21,-1
10008d4c:	1f00892e 	bgeu	r3,fp,10008f74 <__udivdi3+0x5c4>
10008d50:	202b883a 	mov	r21,r4
10008d54:	18a3c83a 	sub	r17,r3,r2
10008d58:	8809883a 	mov	r4,r17
10008d5c:	900b883a 	mov	r5,r18
10008d60:	0000b080 	call	10000b08 <__umodsi3>
10008d64:	1029883a 	mov	r20,r2
10008d68:	8809883a 	mov	r4,r17
10008d6c:	900b883a 	mov	r5,r18
10008d70:	a028943a 	slli	r20,r20,16
10008d74:	0000aa40 	call	10000aa4 <__udivsi3>
10008d78:	100b883a 	mov	r5,r2
10008d7c:	b009883a 	mov	r4,r22
10008d80:	843fffcc 	andi	r16,r16,65535
10008d84:	1023883a 	mov	r17,r2
10008d88:	8520b03a 	or	r16,r16,r20
10008d8c:	0000b600 	call	10000b60 <__mulsi3>
10008d90:	8080042e 	bgeu	r16,r2,10008da4 <__udivdi3+0x3f4>
10008d94:	8721883a 	add	r16,r16,fp
10008d98:	88ffffc4 	addi	r3,r17,-1
10008d9c:	8700712e 	bgeu	r16,fp,10008f64 <__udivdi3+0x5b4>
10008da0:	1823883a 	mov	r17,r3
10008da4:	a80e943a 	slli	r7,r21,16
10008da8:	d8c00017 	ldw	r3,0(sp)
10008dac:	80a1c83a 	sub	r16,r16,r2
10008db0:	3c64b03a 	or	r18,r7,r17
10008db4:	1d3fffcc 	andi	r20,r3,65535
10008db8:	9022d43a 	srli	r17,r18,16
10008dbc:	95bfffcc 	andi	r22,r18,65535
10008dc0:	a00b883a 	mov	r5,r20
10008dc4:	b009883a 	mov	r4,r22
10008dc8:	182ad43a 	srli	r21,r3,16
10008dcc:	0000b600 	call	10000b60 <__mulsi3>
10008dd0:	a00b883a 	mov	r5,r20
10008dd4:	8809883a 	mov	r4,r17
10008dd8:	1039883a 	mov	fp,r2
10008ddc:	0000b600 	call	10000b60 <__mulsi3>
10008de0:	8809883a 	mov	r4,r17
10008de4:	a80b883a 	mov	r5,r21
10008de8:	1029883a 	mov	r20,r2
10008dec:	0000b600 	call	10000b60 <__mulsi3>
10008df0:	a80b883a 	mov	r5,r21
10008df4:	b009883a 	mov	r4,r22
10008df8:	1023883a 	mov	r17,r2
10008dfc:	0000b600 	call	10000b60 <__mulsi3>
10008e00:	e006d43a 	srli	r3,fp,16
10008e04:	1505883a 	add	r2,r2,r20
10008e08:	1887883a 	add	r3,r3,r2
10008e0c:	1d00022e 	bgeu	r3,r20,10008e18 <__udivdi3+0x468>
10008e10:	00800074 	movhi	r2,1
10008e14:	88a3883a 	add	r17,r17,r2
10008e18:	1804d43a 	srli	r2,r3,16
10008e1c:	1463883a 	add	r17,r2,r17
10008e20:	84404436 	bltu	r16,r17,10008f34 <__udivdi3+0x584>
10008e24:	84403e26 	beq	r16,r17,10008f20 <__udivdi3+0x570>
10008e28:	9005883a 	mov	r2,r18
10008e2c:	0007883a 	mov	r3,zero
10008e30:	003f9106 	br	10008c78 <__alt_data_end+0xf8008c78>
10008e34:	88e2983a 	sll	r17,r17,r3
10008e38:	80aed83a 	srl	r23,r16,r2
10008e3c:	80e0983a 	sll	r16,r16,r3
10008e40:	882ad43a 	srli	r21,r17,16
10008e44:	9884d83a 	srl	r2,r19,r2
10008e48:	b809883a 	mov	r4,r23
10008e4c:	a80b883a 	mov	r5,r21
10008e50:	98e4983a 	sll	r18,r19,r3
10008e54:	142cb03a 	or	r22,r2,r16
10008e58:	0000b080 	call	10000b08 <__umodsi3>
10008e5c:	b809883a 	mov	r4,r23
10008e60:	a80b883a 	mov	r5,r21
10008e64:	1027883a 	mov	r19,r2
10008e68:	8d3fffcc 	andi	r20,r17,65535
10008e6c:	0000aa40 	call	10000aa4 <__udivsi3>
10008e70:	a009883a 	mov	r4,r20
10008e74:	100b883a 	mov	r5,r2
10008e78:	102f883a 	mov	r23,r2
10008e7c:	0000b600 	call	10000b60 <__mulsi3>
10008e80:	9826943a 	slli	r19,r19,16
10008e84:	b008d43a 	srli	r4,r22,16
10008e88:	24c8b03a 	or	r4,r4,r19
10008e8c:	2080062e 	bgeu	r4,r2,10008ea8 <__udivdi3+0x4f8>
10008e90:	2449883a 	add	r4,r4,r17
10008e94:	b8ffffc4 	addi	r3,r23,-1
10008e98:	24403c36 	bltu	r4,r17,10008f8c <__udivdi3+0x5dc>
10008e9c:	20803b2e 	bgeu	r4,r2,10008f8c <__udivdi3+0x5dc>
10008ea0:	bdffff84 	addi	r23,r23,-2
10008ea4:	2449883a 	add	r4,r4,r17
10008ea8:	20a1c83a 	sub	r16,r4,r2
10008eac:	a80b883a 	mov	r5,r21
10008eb0:	8009883a 	mov	r4,r16
10008eb4:	0000b080 	call	10000b08 <__umodsi3>
10008eb8:	a80b883a 	mov	r5,r21
10008ebc:	8009883a 	mov	r4,r16
10008ec0:	1027883a 	mov	r19,r2
10008ec4:	0000aa40 	call	10000aa4 <__udivsi3>
10008ec8:	a009883a 	mov	r4,r20
10008ecc:	100b883a 	mov	r5,r2
10008ed0:	9826943a 	slli	r19,r19,16
10008ed4:	1039883a 	mov	fp,r2
10008ed8:	0000b600 	call	10000b60 <__mulsi3>
10008edc:	b13fffcc 	andi	r4,r22,65535
10008ee0:	24c8b03a 	or	r4,r4,r19
10008ee4:	2080062e 	bgeu	r4,r2,10008f00 <__udivdi3+0x550>
10008ee8:	2449883a 	add	r4,r4,r17
10008eec:	e0ffffc4 	addi	r3,fp,-1
10008ef0:	24402436 	bltu	r4,r17,10008f84 <__udivdi3+0x5d4>
10008ef4:	2080232e 	bgeu	r4,r2,10008f84 <__udivdi3+0x5d4>
10008ef8:	e73fff84 	addi	fp,fp,-2
10008efc:	2449883a 	add	r4,r4,r17
10008f00:	b82e943a 	slli	r23,r23,16
10008f04:	20a1c83a 	sub	r16,r4,r2
10008f08:	bf06b03a 	or	r3,r23,fp
10008f0c:	003f2806 	br	10008bb0 <__alt_data_end+0xf8008bb0>
10008f10:	2021883a 	mov	r16,r4
10008f14:	003f5306 	br	10008c64 <__alt_data_end+0xf8008c64>
10008f18:	1821883a 	mov	r16,r3
10008f1c:	003ef406 	br	10008af0 <__alt_data_end+0xf8008af0>
10008f20:	1806943a 	slli	r3,r3,16
10008f24:	9de6983a 	sll	r19,r19,r23
10008f28:	e73fffcc 	andi	fp,fp,65535
10008f2c:	1f07883a 	add	r3,r3,fp
10008f30:	98ffbd2e 	bgeu	r19,r3,10008e28 <__alt_data_end+0xf8008e28>
10008f34:	90bfffc4 	addi	r2,r18,-1
10008f38:	0007883a 	mov	r3,zero
10008f3c:	003f4e06 	br	10008c78 <__alt_data_end+0xf8008c78>
10008f40:	00800604 	movi	r2,24
10008f44:	003ef506 	br	10008b1c <__alt_data_end+0xf8008b1c>
10008f48:	00800604 	movi	r2,24
10008f4c:	003f0b06 	br	10008b7c <__alt_data_end+0xf8008b7c>
10008f50:	00800604 	movi	r2,24
10008f54:	003ead06 	br	10008a0c <__alt_data_end+0xf8008a0c>
10008f58:	0007883a 	mov	r3,zero
10008f5c:	00800044 	movi	r2,1
10008f60:	003f4506 	br	10008c78 <__alt_data_end+0xf8008c78>
10008f64:	80bf8e2e 	bgeu	r16,r2,10008da0 <__alt_data_end+0xf8008da0>
10008f68:	8c7fff84 	addi	r17,r17,-2
10008f6c:	8721883a 	add	r16,r16,fp
10008f70:	003f8c06 	br	10008da4 <__alt_data_end+0xf8008da4>
10008f74:	18bf762e 	bgeu	r3,r2,10008d50 <__alt_data_end+0xf8008d50>
10008f78:	ad7fff84 	addi	r21,r21,-2
10008f7c:	1f07883a 	add	r3,r3,fp
10008f80:	003f7406 	br	10008d54 <__alt_data_end+0xf8008d54>
10008f84:	1839883a 	mov	fp,r3
10008f88:	003fdd06 	br	10008f00 <__alt_data_end+0xf8008f00>
10008f8c:	182f883a 	mov	r23,r3
10008f90:	003fc506 	br	10008ea8 <__alt_data_end+0xf8008ea8>
10008f94:	b5bfff84 	addi	r22,r22,-2
10008f98:	3c4f883a 	add	r7,r7,r17
10008f9c:	003f1a06 	br	10008c08 <__alt_data_end+0xf8008c08>
10008fa0:	b5bfff84 	addi	r22,r22,-2
10008fa4:	1c47883a 	add	r3,r3,r17
10008fa8:	003ebc06 	br	10008a9c <__alt_data_end+0xf8008a9c>

10008fac <__umoddi3>:
10008fac:	defff304 	addi	sp,sp,-52
10008fb0:	df000b15 	stw	fp,44(sp)
10008fb4:	dc400415 	stw	r17,16(sp)
10008fb8:	dc000315 	stw	r16,12(sp)
10008fbc:	dfc00c15 	stw	ra,48(sp)
10008fc0:	ddc00a15 	stw	r23,40(sp)
10008fc4:	dd800915 	stw	r22,36(sp)
10008fc8:	dd400815 	stw	r21,32(sp)
10008fcc:	dd000715 	stw	r20,28(sp)
10008fd0:	dcc00615 	stw	r19,24(sp)
10008fd4:	dc800515 	stw	r18,20(sp)
10008fd8:	2021883a 	mov	r16,r4
10008fdc:	2823883a 	mov	r17,r5
10008fe0:	2839883a 	mov	fp,r5
10008fe4:	3800401e 	bne	r7,zero,100090e8 <__umoddi3+0x13c>
10008fe8:	3027883a 	mov	r19,r6
10008fec:	2029883a 	mov	r20,r4
10008ff0:	2980552e 	bgeu	r5,r6,10009148 <__umoddi3+0x19c>
10008ff4:	00bfffd4 	movui	r2,65535
10008ff8:	1180a236 	bltu	r2,r6,10009284 <__umoddi3+0x2d8>
10008ffc:	01003fc4 	movi	r4,255
10009000:	2189803a 	cmpltu	r4,r4,r6
10009004:	200890fa 	slli	r4,r4,3
10009008:	3104d83a 	srl	r2,r6,r4
1000900c:	00c40074 	movhi	r3,4097
10009010:	18f8b804 	addi	r3,r3,-7456
10009014:	1885883a 	add	r2,r3,r2
10009018:	10c00003 	ldbu	r3,0(r2)
1000901c:	00800804 	movi	r2,32
10009020:	1909883a 	add	r4,r3,r4
10009024:	1125c83a 	sub	r18,r2,r4
10009028:	90000526 	beq	r18,zero,10009040 <__umoddi3+0x94>
1000902c:	8ca2983a 	sll	r17,r17,r18
10009030:	8108d83a 	srl	r4,r16,r4
10009034:	34a6983a 	sll	r19,r6,r18
10009038:	84a8983a 	sll	r20,r16,r18
1000903c:	2478b03a 	or	fp,r4,r17
10009040:	982cd43a 	srli	r22,r19,16
10009044:	e009883a 	mov	r4,fp
10009048:	9dffffcc 	andi	r23,r19,65535
1000904c:	b00b883a 	mov	r5,r22
10009050:	0000b080 	call	10000b08 <__umodsi3>
10009054:	b00b883a 	mov	r5,r22
10009058:	e009883a 	mov	r4,fp
1000905c:	102b883a 	mov	r21,r2
10009060:	0000aa40 	call	10000aa4 <__udivsi3>
10009064:	100b883a 	mov	r5,r2
10009068:	b809883a 	mov	r4,r23
1000906c:	0000b600 	call	10000b60 <__mulsi3>
10009070:	a82a943a 	slli	r21,r21,16
10009074:	a006d43a 	srli	r3,r20,16
10009078:	1d46b03a 	or	r3,r3,r21
1000907c:	1880032e 	bgeu	r3,r2,1000908c <__umoddi3+0xe0>
10009080:	1cc7883a 	add	r3,r3,r19
10009084:	1cc00136 	bltu	r3,r19,1000908c <__umoddi3+0xe0>
10009088:	18813136 	bltu	r3,r2,10009550 <__umoddi3+0x5a4>
1000908c:	18a1c83a 	sub	r16,r3,r2
10009090:	b00b883a 	mov	r5,r22
10009094:	8009883a 	mov	r4,r16
10009098:	0000b080 	call	10000b08 <__umodsi3>
1000909c:	b00b883a 	mov	r5,r22
100090a0:	8009883a 	mov	r4,r16
100090a4:	1023883a 	mov	r17,r2
100090a8:	0000aa40 	call	10000aa4 <__udivsi3>
100090ac:	100b883a 	mov	r5,r2
100090b0:	b809883a 	mov	r4,r23
100090b4:	8822943a 	slli	r17,r17,16
100090b8:	0000b600 	call	10000b60 <__mulsi3>
100090bc:	a0ffffcc 	andi	r3,r20,65535
100090c0:	1c46b03a 	or	r3,r3,r17
100090c4:	1880042e 	bgeu	r3,r2,100090d8 <__umoddi3+0x12c>
100090c8:	1cc7883a 	add	r3,r3,r19
100090cc:	1cc00236 	bltu	r3,r19,100090d8 <__umoddi3+0x12c>
100090d0:	1880012e 	bgeu	r3,r2,100090d8 <__umoddi3+0x12c>
100090d4:	1cc7883a 	add	r3,r3,r19
100090d8:	1885c83a 	sub	r2,r3,r2
100090dc:	1484d83a 	srl	r2,r2,r18
100090e0:	0007883a 	mov	r3,zero
100090e4:	00005306 	br	10009234 <__umoddi3+0x288>
100090e8:	29c05036 	bltu	r5,r7,1000922c <__umoddi3+0x280>
100090ec:	00bfffd4 	movui	r2,65535
100090f0:	11c05c2e 	bgeu	r2,r7,10009264 <__umoddi3+0x2b8>
100090f4:	00804034 	movhi	r2,256
100090f8:	10bfffc4 	addi	r2,r2,-1
100090fc:	11c10636 	bltu	r2,r7,10009518 <__umoddi3+0x56c>
10009100:	01000404 	movi	r4,16
10009104:	3904d83a 	srl	r2,r7,r4
10009108:	00c40074 	movhi	r3,4097
1000910c:	18f8b804 	addi	r3,r3,-7456
10009110:	1885883a 	add	r2,r3,r2
10009114:	14c00003 	ldbu	r19,0(r2)
10009118:	00c00804 	movi	r3,32
1000911c:	9927883a 	add	r19,r19,r4
10009120:	1ce9c83a 	sub	r20,r3,r19
10009124:	a0005c1e 	bne	r20,zero,10009298 <__umoddi3+0x2ec>
10009128:	3c400136 	bltu	r7,r17,10009130 <__umoddi3+0x184>
1000912c:	81810a36 	bltu	r16,r6,10009558 <__umoddi3+0x5ac>
10009130:	8185c83a 	sub	r2,r16,r6
10009134:	89e3c83a 	sub	r17,r17,r7
10009138:	8089803a 	cmpltu	r4,r16,r2
1000913c:	8939c83a 	sub	fp,r17,r4
10009140:	e007883a 	mov	r3,fp
10009144:	00003b06 	br	10009234 <__umoddi3+0x288>
10009148:	3000041e 	bne	r6,zero,1000915c <__umoddi3+0x1b0>
1000914c:	000b883a 	mov	r5,zero
10009150:	01000044 	movi	r4,1
10009154:	0000aa40 	call	10000aa4 <__udivsi3>
10009158:	1027883a 	mov	r19,r2
1000915c:	00bfffd4 	movui	r2,65535
10009160:	14c0442e 	bgeu	r2,r19,10009274 <__umoddi3+0x2c8>
10009164:	00804034 	movhi	r2,256
10009168:	10bfffc4 	addi	r2,r2,-1
1000916c:	14c0ec36 	bltu	r2,r19,10009520 <__umoddi3+0x574>
10009170:	00800404 	movi	r2,16
10009174:	9886d83a 	srl	r3,r19,r2
10009178:	01040074 	movhi	r4,4097
1000917c:	2138b804 	addi	r4,r4,-7456
10009180:	20c7883a 	add	r3,r4,r3
10009184:	18c00003 	ldbu	r3,0(r3)
10009188:	1887883a 	add	r3,r3,r2
1000918c:	00800804 	movi	r2,32
10009190:	10e5c83a 	sub	r18,r2,r3
10009194:	9000ab1e 	bne	r18,zero,10009444 <__umoddi3+0x498>
10009198:	982cd43a 	srli	r22,r19,16
1000919c:	8ce3c83a 	sub	r17,r17,r19
100091a0:	9dffffcc 	andi	r23,r19,65535
100091a4:	b00b883a 	mov	r5,r22
100091a8:	8809883a 	mov	r4,r17
100091ac:	0000b080 	call	10000b08 <__umodsi3>
100091b0:	b00b883a 	mov	r5,r22
100091b4:	8809883a 	mov	r4,r17
100091b8:	102b883a 	mov	r21,r2
100091bc:	0000aa40 	call	10000aa4 <__udivsi3>
100091c0:	b80b883a 	mov	r5,r23
100091c4:	1009883a 	mov	r4,r2
100091c8:	0000b600 	call	10000b60 <__mulsi3>
100091cc:	a82a943a 	slli	r21,r21,16
100091d0:	a006d43a 	srli	r3,r20,16
100091d4:	1d46b03a 	or	r3,r3,r21
100091d8:	1880042e 	bgeu	r3,r2,100091ec <__umoddi3+0x240>
100091dc:	1cc7883a 	add	r3,r3,r19
100091e0:	1cc00236 	bltu	r3,r19,100091ec <__umoddi3+0x240>
100091e4:	1880012e 	bgeu	r3,r2,100091ec <__umoddi3+0x240>
100091e8:	1cc7883a 	add	r3,r3,r19
100091ec:	18a1c83a 	sub	r16,r3,r2
100091f0:	b00b883a 	mov	r5,r22
100091f4:	8009883a 	mov	r4,r16
100091f8:	0000b080 	call	10000b08 <__umodsi3>
100091fc:	1023883a 	mov	r17,r2
10009200:	b00b883a 	mov	r5,r22
10009204:	8009883a 	mov	r4,r16
10009208:	0000aa40 	call	10000aa4 <__udivsi3>
1000920c:	8822943a 	slli	r17,r17,16
10009210:	b80b883a 	mov	r5,r23
10009214:	1009883a 	mov	r4,r2
10009218:	0000b600 	call	10000b60 <__mulsi3>
1000921c:	a53fffcc 	andi	r20,r20,65535
10009220:	a446b03a 	or	r3,r20,r17
10009224:	18bfac2e 	bgeu	r3,r2,100090d8 <__alt_data_end+0xf80090d8>
10009228:	003fa706 	br	100090c8 <__alt_data_end+0xf80090c8>
1000922c:	2005883a 	mov	r2,r4
10009230:	2807883a 	mov	r3,r5
10009234:	dfc00c17 	ldw	ra,48(sp)
10009238:	df000b17 	ldw	fp,44(sp)
1000923c:	ddc00a17 	ldw	r23,40(sp)
10009240:	dd800917 	ldw	r22,36(sp)
10009244:	dd400817 	ldw	r21,32(sp)
10009248:	dd000717 	ldw	r20,28(sp)
1000924c:	dcc00617 	ldw	r19,24(sp)
10009250:	dc800517 	ldw	r18,20(sp)
10009254:	dc400417 	ldw	r17,16(sp)
10009258:	dc000317 	ldw	r16,12(sp)
1000925c:	dec00d04 	addi	sp,sp,52
10009260:	f800283a 	ret
10009264:	04c03fc4 	movi	r19,255
10009268:	99c9803a 	cmpltu	r4,r19,r7
1000926c:	200890fa 	slli	r4,r4,3
10009270:	003fa406 	br	10009104 <__alt_data_end+0xf8009104>
10009274:	00803fc4 	movi	r2,255
10009278:	14c5803a 	cmpltu	r2,r2,r19
1000927c:	100490fa 	slli	r2,r2,3
10009280:	003fbc06 	br	10009174 <__alt_data_end+0xf8009174>
10009284:	00804034 	movhi	r2,256
10009288:	10bfffc4 	addi	r2,r2,-1
1000928c:	1180a636 	bltu	r2,r6,10009528 <__umoddi3+0x57c>
10009290:	01000404 	movi	r4,16
10009294:	003f5c06 	br	10009008 <__alt_data_end+0xf8009008>
10009298:	3d0e983a 	sll	r7,r7,r20
1000929c:	34ead83a 	srl	r21,r6,r19
100092a0:	8cc6d83a 	srl	r3,r17,r19
100092a4:	8d10983a 	sll	r8,r17,r20
100092a8:	3d6ab03a 	or	r21,r7,r21
100092ac:	a82cd43a 	srli	r22,r21,16
100092b0:	84e2d83a 	srl	r17,r16,r19
100092b4:	1809883a 	mov	r4,r3
100092b8:	b00b883a 	mov	r5,r22
100092bc:	8a22b03a 	or	r17,r17,r8
100092c0:	3524983a 	sll	r18,r6,r20
100092c4:	dc400015 	stw	r17,0(sp)
100092c8:	d8c00115 	stw	r3,4(sp)
100092cc:	0000b080 	call	10000b08 <__umodsi3>
100092d0:	d8c00117 	ldw	r3,4(sp)
100092d4:	b00b883a 	mov	r5,r22
100092d8:	1039883a 	mov	fp,r2
100092dc:	1809883a 	mov	r4,r3
100092e0:	0000aa40 	call	10000aa4 <__udivsi3>
100092e4:	adffffcc 	andi	r23,r21,65535
100092e8:	100b883a 	mov	r5,r2
100092ec:	b809883a 	mov	r4,r23
100092f0:	1023883a 	mov	r17,r2
100092f4:	0000b600 	call	10000b60 <__mulsi3>
100092f8:	d9400017 	ldw	r5,0(sp)
100092fc:	e008943a 	slli	r4,fp,16
10009300:	8520983a 	sll	r16,r16,r20
10009304:	2806d43a 	srli	r3,r5,16
10009308:	1906b03a 	or	r3,r3,r4
1000930c:	1880042e 	bgeu	r3,r2,10009320 <__umoddi3+0x374>
10009310:	1d47883a 	add	r3,r3,r21
10009314:	893fffc4 	addi	r4,r17,-1
10009318:	1d40892e 	bgeu	r3,r21,10009540 <__umoddi3+0x594>
1000931c:	2023883a 	mov	r17,r4
10009320:	18b9c83a 	sub	fp,r3,r2
10009324:	b00b883a 	mov	r5,r22
10009328:	e009883a 	mov	r4,fp
1000932c:	0000b080 	call	10000b08 <__umodsi3>
10009330:	b00b883a 	mov	r5,r22
10009334:	e009883a 	mov	r4,fp
10009338:	d8800215 	stw	r2,8(sp)
1000933c:	0000aa40 	call	10000aa4 <__udivsi3>
10009340:	100b883a 	mov	r5,r2
10009344:	b809883a 	mov	r4,r23
10009348:	102d883a 	mov	r22,r2
1000934c:	0000b600 	call	10000b60 <__mulsi3>
10009350:	d9800217 	ldw	r6,8(sp)
10009354:	d8c00017 	ldw	r3,0(sp)
10009358:	300c943a 	slli	r6,r6,16
1000935c:	1a3fffcc 	andi	r8,r3,65535
10009360:	4190b03a 	or	r8,r8,r6
10009364:	4080042e 	bgeu	r8,r2,10009378 <__umoddi3+0x3cc>
10009368:	4551883a 	add	r8,r8,r21
1000936c:	b0ffffc4 	addi	r3,r22,-1
10009370:	45406f2e 	bgeu	r8,r21,10009530 <__umoddi3+0x584>
10009374:	182d883a 	mov	r22,r3
10009378:	880e943a 	slli	r7,r17,16
1000937c:	9006d43a 	srli	r3,r18,16
10009380:	91bfffcc 	andi	r6,r18,65535
10009384:	3dacb03a 	or	r22,r7,r22
10009388:	b02ed43a 	srli	r23,r22,16
1000938c:	b5bfffcc 	andi	r22,r22,65535
10009390:	300b883a 	mov	r5,r6
10009394:	b009883a 	mov	r4,r22
10009398:	40a3c83a 	sub	r17,r8,r2
1000939c:	d8c00115 	stw	r3,4(sp)
100093a0:	d9800215 	stw	r6,8(sp)
100093a4:	0000b600 	call	10000b60 <__mulsi3>
100093a8:	d9800217 	ldw	r6,8(sp)
100093ac:	b809883a 	mov	r4,r23
100093b0:	1039883a 	mov	fp,r2
100093b4:	300b883a 	mov	r5,r6
100093b8:	0000b600 	call	10000b60 <__mulsi3>
100093bc:	d8c00117 	ldw	r3,4(sp)
100093c0:	b809883a 	mov	r4,r23
100093c4:	d8800215 	stw	r2,8(sp)
100093c8:	180b883a 	mov	r5,r3
100093cc:	0000b600 	call	10000b60 <__mulsi3>
100093d0:	d8c00117 	ldw	r3,4(sp)
100093d4:	b009883a 	mov	r4,r22
100093d8:	102f883a 	mov	r23,r2
100093dc:	180b883a 	mov	r5,r3
100093e0:	0000b600 	call	10000b60 <__mulsi3>
100093e4:	d9800217 	ldw	r6,8(sp)
100093e8:	e006d43a 	srli	r3,fp,16
100093ec:	1185883a 	add	r2,r2,r6
100093f0:	1885883a 	add	r2,r3,r2
100093f4:	1180022e 	bgeu	r2,r6,10009400 <__umoddi3+0x454>
100093f8:	00c00074 	movhi	r3,1
100093fc:	b8ef883a 	add	r23,r23,r3
10009400:	1006d43a 	srli	r3,r2,16
10009404:	1004943a 	slli	r2,r2,16
10009408:	e73fffcc 	andi	fp,fp,65535
1000940c:	1dc7883a 	add	r3,r3,r23
10009410:	1739883a 	add	fp,r2,fp
10009414:	88c03a36 	bltu	r17,r3,10009500 <__umoddi3+0x554>
10009418:	88c05126 	beq	r17,r3,10009560 <__umoddi3+0x5b4>
1000941c:	88c9c83a 	sub	r4,r17,r3
10009420:	e00f883a 	mov	r7,fp
10009424:	81cfc83a 	sub	r7,r16,r7
10009428:	81c7803a 	cmpltu	r3,r16,r7
1000942c:	20c7c83a 	sub	r3,r4,r3
10009430:	1cc4983a 	sll	r2,r3,r19
10009434:	3d0ed83a 	srl	r7,r7,r20
10009438:	1d06d83a 	srl	r3,r3,r20
1000943c:	11c4b03a 	or	r2,r2,r7
10009440:	003f7c06 	br	10009234 <__alt_data_end+0xf8009234>
10009444:	9ca6983a 	sll	r19,r19,r18
10009448:	88f8d83a 	srl	fp,r17,r3
1000944c:	80c4d83a 	srl	r2,r16,r3
10009450:	982cd43a 	srli	r22,r19,16
10009454:	8ca2983a 	sll	r17,r17,r18
10009458:	e009883a 	mov	r4,fp
1000945c:	b00b883a 	mov	r5,r22
10009460:	146ab03a 	or	r21,r2,r17
10009464:	0000b080 	call	10000b08 <__umodsi3>
10009468:	b00b883a 	mov	r5,r22
1000946c:	e009883a 	mov	r4,fp
10009470:	1029883a 	mov	r20,r2
10009474:	9dffffcc 	andi	r23,r19,65535
10009478:	0000aa40 	call	10000aa4 <__udivsi3>
1000947c:	b809883a 	mov	r4,r23
10009480:	100b883a 	mov	r5,r2
10009484:	0000b600 	call	10000b60 <__mulsi3>
10009488:	a008943a 	slli	r4,r20,16
1000948c:	a806d43a 	srli	r3,r21,16
10009490:	84a8983a 	sll	r20,r16,r18
10009494:	1906b03a 	or	r3,r3,r4
10009498:	1880042e 	bgeu	r3,r2,100094ac <__umoddi3+0x500>
1000949c:	1cc7883a 	add	r3,r3,r19
100094a0:	1cc00236 	bltu	r3,r19,100094ac <__umoddi3+0x500>
100094a4:	1880012e 	bgeu	r3,r2,100094ac <__umoddi3+0x500>
100094a8:	1cc7883a 	add	r3,r3,r19
100094ac:	18a3c83a 	sub	r17,r3,r2
100094b0:	b00b883a 	mov	r5,r22
100094b4:	8809883a 	mov	r4,r17
100094b8:	0000b080 	call	10000b08 <__umodsi3>
100094bc:	b00b883a 	mov	r5,r22
100094c0:	8809883a 	mov	r4,r17
100094c4:	1021883a 	mov	r16,r2
100094c8:	0000aa40 	call	10000aa4 <__udivsi3>
100094cc:	100b883a 	mov	r5,r2
100094d0:	b809883a 	mov	r4,r23
100094d4:	8020943a 	slli	r16,r16,16
100094d8:	0000b600 	call	10000b60 <__mulsi3>
100094dc:	a8ffffcc 	andi	r3,r21,65535
100094e0:	1c06b03a 	or	r3,r3,r16
100094e4:	1880042e 	bgeu	r3,r2,100094f8 <__umoddi3+0x54c>
100094e8:	1cc7883a 	add	r3,r3,r19
100094ec:	1cc00236 	bltu	r3,r19,100094f8 <__umoddi3+0x54c>
100094f0:	1880012e 	bgeu	r3,r2,100094f8 <__umoddi3+0x54c>
100094f4:	1cc7883a 	add	r3,r3,r19
100094f8:	18a3c83a 	sub	r17,r3,r2
100094fc:	003f2906 	br	100091a4 <__alt_data_end+0xf80091a4>
10009500:	e48fc83a 	sub	r7,fp,r18
10009504:	1d49c83a 	sub	r4,r3,r21
10009508:	e1f9803a 	cmpltu	fp,fp,r7
1000950c:	2739c83a 	sub	fp,r4,fp
10009510:	8f09c83a 	sub	r4,r17,fp
10009514:	003fc306 	br	10009424 <__alt_data_end+0xf8009424>
10009518:	01000604 	movi	r4,24
1000951c:	003ef906 	br	10009104 <__alt_data_end+0xf8009104>
10009520:	00800604 	movi	r2,24
10009524:	003f1306 	br	10009174 <__alt_data_end+0xf8009174>
10009528:	01000604 	movi	r4,24
1000952c:	003eb606 	br	10009008 <__alt_data_end+0xf8009008>
10009530:	40bf902e 	bgeu	r8,r2,10009374 <__alt_data_end+0xf8009374>
10009534:	b5bfff84 	addi	r22,r22,-2
10009538:	4551883a 	add	r8,r8,r21
1000953c:	003f8e06 	br	10009378 <__alt_data_end+0xf8009378>
10009540:	18bf762e 	bgeu	r3,r2,1000931c <__alt_data_end+0xf800931c>
10009544:	8c7fff84 	addi	r17,r17,-2
10009548:	1d47883a 	add	r3,r3,r21
1000954c:	003f7406 	br	10009320 <__alt_data_end+0xf8009320>
10009550:	1cc7883a 	add	r3,r3,r19
10009554:	003ecd06 	br	1000908c <__alt_data_end+0xf800908c>
10009558:	8005883a 	mov	r2,r16
1000955c:	003ef806 	br	10009140 <__alt_data_end+0xf8009140>
10009560:	873fe736 	bltu	r16,fp,10009500 <__alt_data_end+0xf8009500>
10009564:	e00f883a 	mov	r7,fp
10009568:	0009883a 	mov	r4,zero
1000956c:	003fad06 	br	10009424 <__alt_data_end+0xf8009424>

10009570 <__adddf3>:
10009570:	02c00434 	movhi	r11,16
10009574:	5affffc4 	addi	r11,r11,-1
10009578:	2806d7fa 	srli	r3,r5,31
1000957c:	2ad4703a 	and	r10,r5,r11
10009580:	3ad2703a 	and	r9,r7,r11
10009584:	3804d53a 	srli	r2,r7,20
10009588:	3018d77a 	srli	r12,r6,29
1000958c:	280ad53a 	srli	r5,r5,20
10009590:	501490fa 	slli	r10,r10,3
10009594:	2010d77a 	srli	r8,r4,29
10009598:	481290fa 	slli	r9,r9,3
1000959c:	380ed7fa 	srli	r7,r7,31
100095a0:	defffb04 	addi	sp,sp,-20
100095a4:	dc800215 	stw	r18,8(sp)
100095a8:	dc400115 	stw	r17,4(sp)
100095ac:	dc000015 	stw	r16,0(sp)
100095b0:	dfc00415 	stw	ra,16(sp)
100095b4:	dcc00315 	stw	r19,12(sp)
100095b8:	1c803fcc 	andi	r18,r3,255
100095bc:	2c01ffcc 	andi	r16,r5,2047
100095c0:	5210b03a 	or	r8,r10,r8
100095c4:	202290fa 	slli	r17,r4,3
100095c8:	1081ffcc 	andi	r2,r2,2047
100095cc:	4b12b03a 	or	r9,r9,r12
100095d0:	300c90fa 	slli	r6,r6,3
100095d4:	91c07526 	beq	r18,r7,100097ac <__adddf3+0x23c>
100095d8:	8087c83a 	sub	r3,r16,r2
100095dc:	00c0ab0e 	bge	zero,r3,1000988c <__adddf3+0x31c>
100095e0:	10002a1e 	bne	r2,zero,1000968c <__adddf3+0x11c>
100095e4:	4984b03a 	or	r2,r9,r6
100095e8:	1000961e 	bne	r2,zero,10009844 <__adddf3+0x2d4>
100095ec:	888001cc 	andi	r2,r17,7
100095f0:	10000726 	beq	r2,zero,10009610 <__adddf3+0xa0>
100095f4:	888003cc 	andi	r2,r17,15
100095f8:	00c00104 	movi	r3,4
100095fc:	10c00426 	beq	r2,r3,10009610 <__adddf3+0xa0>
10009600:	88c7883a 	add	r3,r17,r3
10009604:	1c63803a 	cmpltu	r17,r3,r17
10009608:	4451883a 	add	r8,r8,r17
1000960c:	1823883a 	mov	r17,r3
10009610:	4080202c 	andhi	r2,r8,128
10009614:	10005926 	beq	r2,zero,1000977c <__adddf3+0x20c>
10009618:	84000044 	addi	r16,r16,1
1000961c:	0081ffc4 	movi	r2,2047
10009620:	8080ba26 	beq	r16,r2,1000990c <__adddf3+0x39c>
10009624:	00bfe034 	movhi	r2,65408
10009628:	10bfffc4 	addi	r2,r2,-1
1000962c:	4090703a 	and	r8,r8,r2
10009630:	4004977a 	slli	r2,r8,29
10009634:	4010927a 	slli	r8,r8,9
10009638:	8822d0fa 	srli	r17,r17,3
1000963c:	8401ffcc 	andi	r16,r16,2047
10009640:	4010d33a 	srli	r8,r8,12
10009644:	9007883a 	mov	r3,r18
10009648:	1444b03a 	or	r2,r2,r17
1000964c:	8401ffcc 	andi	r16,r16,2047
10009650:	8020953a 	slli	r16,r16,20
10009654:	18c03fcc 	andi	r3,r3,255
10009658:	01000434 	movhi	r4,16
1000965c:	213fffc4 	addi	r4,r4,-1
10009660:	180697fa 	slli	r3,r3,31
10009664:	4110703a 	and	r8,r8,r4
10009668:	4410b03a 	or	r8,r8,r16
1000966c:	40c6b03a 	or	r3,r8,r3
10009670:	dfc00417 	ldw	ra,16(sp)
10009674:	dcc00317 	ldw	r19,12(sp)
10009678:	dc800217 	ldw	r18,8(sp)
1000967c:	dc400117 	ldw	r17,4(sp)
10009680:	dc000017 	ldw	r16,0(sp)
10009684:	dec00504 	addi	sp,sp,20
10009688:	f800283a 	ret
1000968c:	0081ffc4 	movi	r2,2047
10009690:	80bfd626 	beq	r16,r2,100095ec <__alt_data_end+0xf80095ec>
10009694:	4a402034 	orhi	r9,r9,128
10009698:	00800e04 	movi	r2,56
1000969c:	10c09f16 	blt	r2,r3,1000991c <__adddf3+0x3ac>
100096a0:	008007c4 	movi	r2,31
100096a4:	10c0c216 	blt	r2,r3,100099b0 <__adddf3+0x440>
100096a8:	00800804 	movi	r2,32
100096ac:	10c5c83a 	sub	r2,r2,r3
100096b0:	488a983a 	sll	r5,r9,r2
100096b4:	30c8d83a 	srl	r4,r6,r3
100096b8:	3084983a 	sll	r2,r6,r2
100096bc:	48c6d83a 	srl	r3,r9,r3
100096c0:	290cb03a 	or	r6,r5,r4
100096c4:	1004c03a 	cmpne	r2,r2,zero
100096c8:	308cb03a 	or	r6,r6,r2
100096cc:	898dc83a 	sub	r6,r17,r6
100096d0:	89a3803a 	cmpltu	r17,r17,r6
100096d4:	40d1c83a 	sub	r8,r8,r3
100096d8:	4451c83a 	sub	r8,r8,r17
100096dc:	3023883a 	mov	r17,r6
100096e0:	4080202c 	andhi	r2,r8,128
100096e4:	10002326 	beq	r2,zero,10009774 <__adddf3+0x204>
100096e8:	04c02034 	movhi	r19,128
100096ec:	9cffffc4 	addi	r19,r19,-1
100096f0:	44e6703a 	and	r19,r8,r19
100096f4:	98007626 	beq	r19,zero,100098d0 <__adddf3+0x360>
100096f8:	9809883a 	mov	r4,r19
100096fc:	000bdb00 	call	1000bdb0 <__clzsi2>
10009700:	10fffe04 	addi	r3,r2,-8
10009704:	010007c4 	movi	r4,31
10009708:	20c07716 	blt	r4,r3,100098e8 <__adddf3+0x378>
1000970c:	00800804 	movi	r2,32
10009710:	10c5c83a 	sub	r2,r2,r3
10009714:	8884d83a 	srl	r2,r17,r2
10009718:	98d0983a 	sll	r8,r19,r3
1000971c:	88e2983a 	sll	r17,r17,r3
10009720:	1204b03a 	or	r2,r2,r8
10009724:	1c007416 	blt	r3,r16,100098f8 <__adddf3+0x388>
10009728:	1c21c83a 	sub	r16,r3,r16
1000972c:	82000044 	addi	r8,r16,1
10009730:	00c007c4 	movi	r3,31
10009734:	1a009116 	blt	r3,r8,1000997c <__adddf3+0x40c>
10009738:	00c00804 	movi	r3,32
1000973c:	1a07c83a 	sub	r3,r3,r8
10009740:	8a08d83a 	srl	r4,r17,r8
10009744:	88e2983a 	sll	r17,r17,r3
10009748:	10c6983a 	sll	r3,r2,r3
1000974c:	1210d83a 	srl	r8,r2,r8
10009750:	8804c03a 	cmpne	r2,r17,zero
10009754:	1906b03a 	or	r3,r3,r4
10009758:	18a2b03a 	or	r17,r3,r2
1000975c:	0021883a 	mov	r16,zero
10009760:	003fa206 	br	100095ec <__alt_data_end+0xf80095ec>
10009764:	1890b03a 	or	r8,r3,r2
10009768:	40017d26 	beq	r8,zero,10009d60 <__adddf3+0x7f0>
1000976c:	1011883a 	mov	r8,r2
10009770:	1823883a 	mov	r17,r3
10009774:	888001cc 	andi	r2,r17,7
10009778:	103f9e1e 	bne	r2,zero,100095f4 <__alt_data_end+0xf80095f4>
1000977c:	4004977a 	slli	r2,r8,29
10009780:	8822d0fa 	srli	r17,r17,3
10009784:	4010d0fa 	srli	r8,r8,3
10009788:	9007883a 	mov	r3,r18
1000978c:	1444b03a 	or	r2,r2,r17
10009790:	0101ffc4 	movi	r4,2047
10009794:	81002426 	beq	r16,r4,10009828 <__adddf3+0x2b8>
10009798:	8120703a 	and	r16,r16,r4
1000979c:	01000434 	movhi	r4,16
100097a0:	213fffc4 	addi	r4,r4,-1
100097a4:	4110703a 	and	r8,r8,r4
100097a8:	003fa806 	br	1000964c <__alt_data_end+0xf800964c>
100097ac:	8089c83a 	sub	r4,r16,r2
100097b0:	01005e0e 	bge	zero,r4,1000992c <__adddf3+0x3bc>
100097b4:	10002b26 	beq	r2,zero,10009864 <__adddf3+0x2f4>
100097b8:	0081ffc4 	movi	r2,2047
100097bc:	80bf8b26 	beq	r16,r2,100095ec <__alt_data_end+0xf80095ec>
100097c0:	4a402034 	orhi	r9,r9,128
100097c4:	00800e04 	movi	r2,56
100097c8:	1100a40e 	bge	r2,r4,10009a5c <__adddf3+0x4ec>
100097cc:	498cb03a 	or	r6,r9,r6
100097d0:	300ac03a 	cmpne	r5,r6,zero
100097d4:	0013883a 	mov	r9,zero
100097d8:	2c4b883a 	add	r5,r5,r17
100097dc:	2c63803a 	cmpltu	r17,r5,r17
100097e0:	4a11883a 	add	r8,r9,r8
100097e4:	8a11883a 	add	r8,r17,r8
100097e8:	2823883a 	mov	r17,r5
100097ec:	4080202c 	andhi	r2,r8,128
100097f0:	103fe026 	beq	r2,zero,10009774 <__alt_data_end+0xf8009774>
100097f4:	84000044 	addi	r16,r16,1
100097f8:	0081ffc4 	movi	r2,2047
100097fc:	8080d226 	beq	r16,r2,10009b48 <__adddf3+0x5d8>
10009800:	00bfe034 	movhi	r2,65408
10009804:	10bfffc4 	addi	r2,r2,-1
10009808:	4090703a 	and	r8,r8,r2
1000980c:	880ad07a 	srli	r5,r17,1
10009810:	400897fa 	slli	r4,r8,31
10009814:	88c0004c 	andi	r3,r17,1
10009818:	28e2b03a 	or	r17,r5,r3
1000981c:	4010d07a 	srli	r8,r8,1
10009820:	2462b03a 	or	r17,r4,r17
10009824:	003f7106 	br	100095ec <__alt_data_end+0xf80095ec>
10009828:	4088b03a 	or	r4,r8,r2
1000982c:	20014526 	beq	r4,zero,10009d44 <__adddf3+0x7d4>
10009830:	01000434 	movhi	r4,16
10009834:	42000234 	orhi	r8,r8,8
10009838:	213fffc4 	addi	r4,r4,-1
1000983c:	4110703a 	and	r8,r8,r4
10009840:	003f8206 	br	1000964c <__alt_data_end+0xf800964c>
10009844:	18ffffc4 	addi	r3,r3,-1
10009848:	1800491e 	bne	r3,zero,10009970 <__adddf3+0x400>
1000984c:	898bc83a 	sub	r5,r17,r6
10009850:	8963803a 	cmpltu	r17,r17,r5
10009854:	4251c83a 	sub	r8,r8,r9
10009858:	4451c83a 	sub	r8,r8,r17
1000985c:	2823883a 	mov	r17,r5
10009860:	003f9f06 	br	100096e0 <__alt_data_end+0xf80096e0>
10009864:	4984b03a 	or	r2,r9,r6
10009868:	103f6026 	beq	r2,zero,100095ec <__alt_data_end+0xf80095ec>
1000986c:	213fffc4 	addi	r4,r4,-1
10009870:	2000931e 	bne	r4,zero,10009ac0 <__adddf3+0x550>
10009874:	898d883a 	add	r6,r17,r6
10009878:	3463803a 	cmpltu	r17,r6,r17
1000987c:	4251883a 	add	r8,r8,r9
10009880:	8a11883a 	add	r8,r17,r8
10009884:	3023883a 	mov	r17,r6
10009888:	003fd806 	br	100097ec <__alt_data_end+0xf80097ec>
1000988c:	1800541e 	bne	r3,zero,100099e0 <__adddf3+0x470>
10009890:	80800044 	addi	r2,r16,1
10009894:	1081ffcc 	andi	r2,r2,2047
10009898:	00c00044 	movi	r3,1
1000989c:	1880a00e 	bge	r3,r2,10009b20 <__adddf3+0x5b0>
100098a0:	8989c83a 	sub	r4,r17,r6
100098a4:	8905803a 	cmpltu	r2,r17,r4
100098a8:	4267c83a 	sub	r19,r8,r9
100098ac:	98a7c83a 	sub	r19,r19,r2
100098b0:	9880202c 	andhi	r2,r19,128
100098b4:	10006326 	beq	r2,zero,10009a44 <__adddf3+0x4d4>
100098b8:	3463c83a 	sub	r17,r6,r17
100098bc:	4a07c83a 	sub	r3,r9,r8
100098c0:	344d803a 	cmpltu	r6,r6,r17
100098c4:	19a7c83a 	sub	r19,r3,r6
100098c8:	3825883a 	mov	r18,r7
100098cc:	983f8a1e 	bne	r19,zero,100096f8 <__alt_data_end+0xf80096f8>
100098d0:	8809883a 	mov	r4,r17
100098d4:	000bdb00 	call	1000bdb0 <__clzsi2>
100098d8:	10800804 	addi	r2,r2,32
100098dc:	10fffe04 	addi	r3,r2,-8
100098e0:	010007c4 	movi	r4,31
100098e4:	20ff890e 	bge	r4,r3,1000970c <__alt_data_end+0xf800970c>
100098e8:	10bff604 	addi	r2,r2,-40
100098ec:	8884983a 	sll	r2,r17,r2
100098f0:	0023883a 	mov	r17,zero
100098f4:	1c3f8c0e 	bge	r3,r16,10009728 <__alt_data_end+0xf8009728>
100098f8:	023fe034 	movhi	r8,65408
100098fc:	423fffc4 	addi	r8,r8,-1
10009900:	80e1c83a 	sub	r16,r16,r3
10009904:	1210703a 	and	r8,r2,r8
10009908:	003f3806 	br	100095ec <__alt_data_end+0xf80095ec>
1000990c:	9007883a 	mov	r3,r18
10009910:	0011883a 	mov	r8,zero
10009914:	0005883a 	mov	r2,zero
10009918:	003f4c06 	br	1000964c <__alt_data_end+0xf800964c>
1000991c:	498cb03a 	or	r6,r9,r6
10009920:	300cc03a 	cmpne	r6,r6,zero
10009924:	0007883a 	mov	r3,zero
10009928:	003f6806 	br	100096cc <__alt_data_end+0xf80096cc>
1000992c:	20009c1e 	bne	r4,zero,10009ba0 <__adddf3+0x630>
10009930:	80800044 	addi	r2,r16,1
10009934:	1141ffcc 	andi	r5,r2,2047
10009938:	01000044 	movi	r4,1
1000993c:	2140670e 	bge	r4,r5,10009adc <__adddf3+0x56c>
10009940:	0101ffc4 	movi	r4,2047
10009944:	11007f26 	beq	r2,r4,10009b44 <__adddf3+0x5d4>
10009948:	898d883a 	add	r6,r17,r6
1000994c:	4247883a 	add	r3,r8,r9
10009950:	3451803a 	cmpltu	r8,r6,r17
10009954:	40d1883a 	add	r8,r8,r3
10009958:	402297fa 	slli	r17,r8,31
1000995c:	300cd07a 	srli	r6,r6,1
10009960:	4010d07a 	srli	r8,r8,1
10009964:	1021883a 	mov	r16,r2
10009968:	89a2b03a 	or	r17,r17,r6
1000996c:	003f1f06 	br	100095ec <__alt_data_end+0xf80095ec>
10009970:	0081ffc4 	movi	r2,2047
10009974:	80bf481e 	bne	r16,r2,10009698 <__alt_data_end+0xf8009698>
10009978:	003f1c06 	br	100095ec <__alt_data_end+0xf80095ec>
1000997c:	843ff844 	addi	r16,r16,-31
10009980:	01000804 	movi	r4,32
10009984:	1406d83a 	srl	r3,r2,r16
10009988:	41005026 	beq	r8,r4,10009acc <__adddf3+0x55c>
1000998c:	01001004 	movi	r4,64
10009990:	2211c83a 	sub	r8,r4,r8
10009994:	1204983a 	sll	r2,r2,r8
10009998:	88a2b03a 	or	r17,r17,r2
1000999c:	8822c03a 	cmpne	r17,r17,zero
100099a0:	1c62b03a 	or	r17,r3,r17
100099a4:	0011883a 	mov	r8,zero
100099a8:	0021883a 	mov	r16,zero
100099ac:	003f7106 	br	10009774 <__alt_data_end+0xf8009774>
100099b0:	193ff804 	addi	r4,r3,-32
100099b4:	00800804 	movi	r2,32
100099b8:	4908d83a 	srl	r4,r9,r4
100099bc:	18804526 	beq	r3,r2,10009ad4 <__adddf3+0x564>
100099c0:	00801004 	movi	r2,64
100099c4:	10c5c83a 	sub	r2,r2,r3
100099c8:	4886983a 	sll	r3,r9,r2
100099cc:	198cb03a 	or	r6,r3,r6
100099d0:	300cc03a 	cmpne	r6,r6,zero
100099d4:	218cb03a 	or	r6,r4,r6
100099d8:	0007883a 	mov	r3,zero
100099dc:	003f3b06 	br	100096cc <__alt_data_end+0xf80096cc>
100099e0:	80002a26 	beq	r16,zero,10009a8c <__adddf3+0x51c>
100099e4:	0101ffc4 	movi	r4,2047
100099e8:	11006826 	beq	r2,r4,10009b8c <__adddf3+0x61c>
100099ec:	00c7c83a 	sub	r3,zero,r3
100099f0:	42002034 	orhi	r8,r8,128
100099f4:	01000e04 	movi	r4,56
100099f8:	20c07c16 	blt	r4,r3,10009bec <__adddf3+0x67c>
100099fc:	010007c4 	movi	r4,31
10009a00:	20c0da16 	blt	r4,r3,10009d6c <__adddf3+0x7fc>
10009a04:	01000804 	movi	r4,32
10009a08:	20c9c83a 	sub	r4,r4,r3
10009a0c:	4114983a 	sll	r10,r8,r4
10009a10:	88cad83a 	srl	r5,r17,r3
10009a14:	8908983a 	sll	r4,r17,r4
10009a18:	40c6d83a 	srl	r3,r8,r3
10009a1c:	5162b03a 	or	r17,r10,r5
10009a20:	2008c03a 	cmpne	r4,r4,zero
10009a24:	8922b03a 	or	r17,r17,r4
10009a28:	3463c83a 	sub	r17,r6,r17
10009a2c:	48c7c83a 	sub	r3,r9,r3
10009a30:	344d803a 	cmpltu	r6,r6,r17
10009a34:	1991c83a 	sub	r8,r3,r6
10009a38:	1021883a 	mov	r16,r2
10009a3c:	3825883a 	mov	r18,r7
10009a40:	003f2706 	br	100096e0 <__alt_data_end+0xf80096e0>
10009a44:	24d0b03a 	or	r8,r4,r19
10009a48:	40001b1e 	bne	r8,zero,10009ab8 <__adddf3+0x548>
10009a4c:	0005883a 	mov	r2,zero
10009a50:	0007883a 	mov	r3,zero
10009a54:	0021883a 	mov	r16,zero
10009a58:	003f4d06 	br	10009790 <__alt_data_end+0xf8009790>
10009a5c:	008007c4 	movi	r2,31
10009a60:	11003c16 	blt	r2,r4,10009b54 <__adddf3+0x5e4>
10009a64:	00800804 	movi	r2,32
10009a68:	1105c83a 	sub	r2,r2,r4
10009a6c:	488e983a 	sll	r7,r9,r2
10009a70:	310ad83a 	srl	r5,r6,r4
10009a74:	3084983a 	sll	r2,r6,r2
10009a78:	4912d83a 	srl	r9,r9,r4
10009a7c:	394ab03a 	or	r5,r7,r5
10009a80:	1004c03a 	cmpne	r2,r2,zero
10009a84:	288ab03a 	or	r5,r5,r2
10009a88:	003f5306 	br	100097d8 <__alt_data_end+0xf80097d8>
10009a8c:	4448b03a 	or	r4,r8,r17
10009a90:	20003e26 	beq	r4,zero,10009b8c <__adddf3+0x61c>
10009a94:	00c6303a 	nor	r3,zero,r3
10009a98:	18003a1e 	bne	r3,zero,10009b84 <__adddf3+0x614>
10009a9c:	3463c83a 	sub	r17,r6,r17
10009aa0:	4a07c83a 	sub	r3,r9,r8
10009aa4:	344d803a 	cmpltu	r6,r6,r17
10009aa8:	1991c83a 	sub	r8,r3,r6
10009aac:	1021883a 	mov	r16,r2
10009ab0:	3825883a 	mov	r18,r7
10009ab4:	003f0a06 	br	100096e0 <__alt_data_end+0xf80096e0>
10009ab8:	2023883a 	mov	r17,r4
10009abc:	003f0d06 	br	100096f4 <__alt_data_end+0xf80096f4>
10009ac0:	0081ffc4 	movi	r2,2047
10009ac4:	80bf3f1e 	bne	r16,r2,100097c4 <__alt_data_end+0xf80097c4>
10009ac8:	003ec806 	br	100095ec <__alt_data_end+0xf80095ec>
10009acc:	0005883a 	mov	r2,zero
10009ad0:	003fb106 	br	10009998 <__alt_data_end+0xf8009998>
10009ad4:	0007883a 	mov	r3,zero
10009ad8:	003fbc06 	br	100099cc <__alt_data_end+0xf80099cc>
10009adc:	4444b03a 	or	r2,r8,r17
10009ae0:	8000871e 	bne	r16,zero,10009d00 <__adddf3+0x790>
10009ae4:	1000ba26 	beq	r2,zero,10009dd0 <__adddf3+0x860>
10009ae8:	4984b03a 	or	r2,r9,r6
10009aec:	103ebf26 	beq	r2,zero,100095ec <__alt_data_end+0xf80095ec>
10009af0:	8985883a 	add	r2,r17,r6
10009af4:	4247883a 	add	r3,r8,r9
10009af8:	1451803a 	cmpltu	r8,r2,r17
10009afc:	40d1883a 	add	r8,r8,r3
10009b00:	40c0202c 	andhi	r3,r8,128
10009b04:	1023883a 	mov	r17,r2
10009b08:	183f1a26 	beq	r3,zero,10009774 <__alt_data_end+0xf8009774>
10009b0c:	00bfe034 	movhi	r2,65408
10009b10:	10bfffc4 	addi	r2,r2,-1
10009b14:	2021883a 	mov	r16,r4
10009b18:	4090703a 	and	r8,r8,r2
10009b1c:	003eb306 	br	100095ec <__alt_data_end+0xf80095ec>
10009b20:	4444b03a 	or	r2,r8,r17
10009b24:	8000291e 	bne	r16,zero,10009bcc <__adddf3+0x65c>
10009b28:	10004b1e 	bne	r2,zero,10009c58 <__adddf3+0x6e8>
10009b2c:	4990b03a 	or	r8,r9,r6
10009b30:	40008b26 	beq	r8,zero,10009d60 <__adddf3+0x7f0>
10009b34:	4811883a 	mov	r8,r9
10009b38:	3023883a 	mov	r17,r6
10009b3c:	3825883a 	mov	r18,r7
10009b40:	003eaa06 	br	100095ec <__alt_data_end+0xf80095ec>
10009b44:	1021883a 	mov	r16,r2
10009b48:	0011883a 	mov	r8,zero
10009b4c:	0005883a 	mov	r2,zero
10009b50:	003f0f06 	br	10009790 <__alt_data_end+0xf8009790>
10009b54:	217ff804 	addi	r5,r4,-32
10009b58:	00800804 	movi	r2,32
10009b5c:	494ad83a 	srl	r5,r9,r5
10009b60:	20807d26 	beq	r4,r2,10009d58 <__adddf3+0x7e8>
10009b64:	00801004 	movi	r2,64
10009b68:	1109c83a 	sub	r4,r2,r4
10009b6c:	4912983a 	sll	r9,r9,r4
10009b70:	498cb03a 	or	r6,r9,r6
10009b74:	300cc03a 	cmpne	r6,r6,zero
10009b78:	298ab03a 	or	r5,r5,r6
10009b7c:	0013883a 	mov	r9,zero
10009b80:	003f1506 	br	100097d8 <__alt_data_end+0xf80097d8>
10009b84:	0101ffc4 	movi	r4,2047
10009b88:	113f9a1e 	bne	r2,r4,100099f4 <__alt_data_end+0xf80099f4>
10009b8c:	4811883a 	mov	r8,r9
10009b90:	3023883a 	mov	r17,r6
10009b94:	1021883a 	mov	r16,r2
10009b98:	3825883a 	mov	r18,r7
10009b9c:	003e9306 	br	100095ec <__alt_data_end+0xf80095ec>
10009ba0:	8000161e 	bne	r16,zero,10009bfc <__adddf3+0x68c>
10009ba4:	444ab03a 	or	r5,r8,r17
10009ba8:	28005126 	beq	r5,zero,10009cf0 <__adddf3+0x780>
10009bac:	0108303a 	nor	r4,zero,r4
10009bb0:	20004d1e 	bne	r4,zero,10009ce8 <__adddf3+0x778>
10009bb4:	89a3883a 	add	r17,r17,r6
10009bb8:	4253883a 	add	r9,r8,r9
10009bbc:	898d803a 	cmpltu	r6,r17,r6
10009bc0:	3251883a 	add	r8,r6,r9
10009bc4:	1021883a 	mov	r16,r2
10009bc8:	003f0806 	br	100097ec <__alt_data_end+0xf80097ec>
10009bcc:	1000301e 	bne	r2,zero,10009c90 <__adddf3+0x720>
10009bd0:	4984b03a 	or	r2,r9,r6
10009bd4:	10007126 	beq	r2,zero,10009d9c <__adddf3+0x82c>
10009bd8:	4811883a 	mov	r8,r9
10009bdc:	3023883a 	mov	r17,r6
10009be0:	3825883a 	mov	r18,r7
10009be4:	0401ffc4 	movi	r16,2047
10009be8:	003e8006 	br	100095ec <__alt_data_end+0xf80095ec>
10009bec:	4462b03a 	or	r17,r8,r17
10009bf0:	8822c03a 	cmpne	r17,r17,zero
10009bf4:	0007883a 	mov	r3,zero
10009bf8:	003f8b06 	br	10009a28 <__alt_data_end+0xf8009a28>
10009bfc:	0141ffc4 	movi	r5,2047
10009c00:	11403b26 	beq	r2,r5,10009cf0 <__adddf3+0x780>
10009c04:	0109c83a 	sub	r4,zero,r4
10009c08:	42002034 	orhi	r8,r8,128
10009c0c:	01400e04 	movi	r5,56
10009c10:	29006716 	blt	r5,r4,10009db0 <__adddf3+0x840>
10009c14:	014007c4 	movi	r5,31
10009c18:	29007016 	blt	r5,r4,10009ddc <__adddf3+0x86c>
10009c1c:	01400804 	movi	r5,32
10009c20:	290bc83a 	sub	r5,r5,r4
10009c24:	4154983a 	sll	r10,r8,r5
10009c28:	890ed83a 	srl	r7,r17,r4
10009c2c:	894a983a 	sll	r5,r17,r5
10009c30:	4108d83a 	srl	r4,r8,r4
10009c34:	51e2b03a 	or	r17,r10,r7
10009c38:	280ac03a 	cmpne	r5,r5,zero
10009c3c:	8962b03a 	or	r17,r17,r5
10009c40:	89a3883a 	add	r17,r17,r6
10009c44:	2253883a 	add	r9,r4,r9
10009c48:	898d803a 	cmpltu	r6,r17,r6
10009c4c:	3251883a 	add	r8,r6,r9
10009c50:	1021883a 	mov	r16,r2
10009c54:	003ee506 	br	100097ec <__alt_data_end+0xf80097ec>
10009c58:	4984b03a 	or	r2,r9,r6
10009c5c:	103e6326 	beq	r2,zero,100095ec <__alt_data_end+0xf80095ec>
10009c60:	8987c83a 	sub	r3,r17,r6
10009c64:	88c9803a 	cmpltu	r4,r17,r3
10009c68:	4245c83a 	sub	r2,r8,r9
10009c6c:	1105c83a 	sub	r2,r2,r4
10009c70:	1100202c 	andhi	r4,r2,128
10009c74:	203ebb26 	beq	r4,zero,10009764 <__alt_data_end+0xf8009764>
10009c78:	3463c83a 	sub	r17,r6,r17
10009c7c:	4a07c83a 	sub	r3,r9,r8
10009c80:	344d803a 	cmpltu	r6,r6,r17
10009c84:	1991c83a 	sub	r8,r3,r6
10009c88:	3825883a 	mov	r18,r7
10009c8c:	003e5706 	br	100095ec <__alt_data_end+0xf80095ec>
10009c90:	4984b03a 	or	r2,r9,r6
10009c94:	10002e26 	beq	r2,zero,10009d50 <__adddf3+0x7e0>
10009c98:	4004d0fa 	srli	r2,r8,3
10009c9c:	8822d0fa 	srli	r17,r17,3
10009ca0:	4010977a 	slli	r8,r8,29
10009ca4:	10c0022c 	andhi	r3,r2,8
10009ca8:	4462b03a 	or	r17,r8,r17
10009cac:	18000826 	beq	r3,zero,10009cd0 <__adddf3+0x760>
10009cb0:	4808d0fa 	srli	r4,r9,3
10009cb4:	20c0022c 	andhi	r3,r4,8
10009cb8:	1800051e 	bne	r3,zero,10009cd0 <__adddf3+0x760>
10009cbc:	300cd0fa 	srli	r6,r6,3
10009cc0:	4806977a 	slli	r3,r9,29
10009cc4:	2005883a 	mov	r2,r4
10009cc8:	3825883a 	mov	r18,r7
10009ccc:	19a2b03a 	or	r17,r3,r6
10009cd0:	8810d77a 	srli	r8,r17,29
10009cd4:	100490fa 	slli	r2,r2,3
10009cd8:	882290fa 	slli	r17,r17,3
10009cdc:	0401ffc4 	movi	r16,2047
10009ce0:	4090b03a 	or	r8,r8,r2
10009ce4:	003e4106 	br	100095ec <__alt_data_end+0xf80095ec>
10009ce8:	0141ffc4 	movi	r5,2047
10009cec:	117fc71e 	bne	r2,r5,10009c0c <__alt_data_end+0xf8009c0c>
10009cf0:	4811883a 	mov	r8,r9
10009cf4:	3023883a 	mov	r17,r6
10009cf8:	1021883a 	mov	r16,r2
10009cfc:	003e3b06 	br	100095ec <__alt_data_end+0xf80095ec>
10009d00:	10002f26 	beq	r2,zero,10009dc0 <__adddf3+0x850>
10009d04:	4984b03a 	or	r2,r9,r6
10009d08:	10001126 	beq	r2,zero,10009d50 <__adddf3+0x7e0>
10009d0c:	4004d0fa 	srli	r2,r8,3
10009d10:	8822d0fa 	srli	r17,r17,3
10009d14:	4010977a 	slli	r8,r8,29
10009d18:	10c0022c 	andhi	r3,r2,8
10009d1c:	4462b03a 	or	r17,r8,r17
10009d20:	183feb26 	beq	r3,zero,10009cd0 <__alt_data_end+0xf8009cd0>
10009d24:	4808d0fa 	srli	r4,r9,3
10009d28:	20c0022c 	andhi	r3,r4,8
10009d2c:	183fe81e 	bne	r3,zero,10009cd0 <__alt_data_end+0xf8009cd0>
10009d30:	300cd0fa 	srli	r6,r6,3
10009d34:	4806977a 	slli	r3,r9,29
10009d38:	2005883a 	mov	r2,r4
10009d3c:	19a2b03a 	or	r17,r3,r6
10009d40:	003fe306 	br	10009cd0 <__alt_data_end+0xf8009cd0>
10009d44:	0011883a 	mov	r8,zero
10009d48:	0005883a 	mov	r2,zero
10009d4c:	003e3f06 	br	1000964c <__alt_data_end+0xf800964c>
10009d50:	0401ffc4 	movi	r16,2047
10009d54:	003e2506 	br	100095ec <__alt_data_end+0xf80095ec>
10009d58:	0013883a 	mov	r9,zero
10009d5c:	003f8406 	br	10009b70 <__alt_data_end+0xf8009b70>
10009d60:	0005883a 	mov	r2,zero
10009d64:	0007883a 	mov	r3,zero
10009d68:	003e8906 	br	10009790 <__alt_data_end+0xf8009790>
10009d6c:	197ff804 	addi	r5,r3,-32
10009d70:	01000804 	movi	r4,32
10009d74:	414ad83a 	srl	r5,r8,r5
10009d78:	19002426 	beq	r3,r4,10009e0c <__adddf3+0x89c>
10009d7c:	01001004 	movi	r4,64
10009d80:	20c7c83a 	sub	r3,r4,r3
10009d84:	40c6983a 	sll	r3,r8,r3
10009d88:	1c46b03a 	or	r3,r3,r17
10009d8c:	1806c03a 	cmpne	r3,r3,zero
10009d90:	28e2b03a 	or	r17,r5,r3
10009d94:	0007883a 	mov	r3,zero
10009d98:	003f2306 	br	10009a28 <__alt_data_end+0xf8009a28>
10009d9c:	0007883a 	mov	r3,zero
10009da0:	5811883a 	mov	r8,r11
10009da4:	00bfffc4 	movi	r2,-1
10009da8:	0401ffc4 	movi	r16,2047
10009dac:	003e7806 	br	10009790 <__alt_data_end+0xf8009790>
10009db0:	4462b03a 	or	r17,r8,r17
10009db4:	8822c03a 	cmpne	r17,r17,zero
10009db8:	0009883a 	mov	r4,zero
10009dbc:	003fa006 	br	10009c40 <__alt_data_end+0xf8009c40>
10009dc0:	4811883a 	mov	r8,r9
10009dc4:	3023883a 	mov	r17,r6
10009dc8:	0401ffc4 	movi	r16,2047
10009dcc:	003e0706 	br	100095ec <__alt_data_end+0xf80095ec>
10009dd0:	4811883a 	mov	r8,r9
10009dd4:	3023883a 	mov	r17,r6
10009dd8:	003e0406 	br	100095ec <__alt_data_end+0xf80095ec>
10009ddc:	21fff804 	addi	r7,r4,-32
10009de0:	01400804 	movi	r5,32
10009de4:	41ced83a 	srl	r7,r8,r7
10009de8:	21400a26 	beq	r4,r5,10009e14 <__adddf3+0x8a4>
10009dec:	01401004 	movi	r5,64
10009df0:	2909c83a 	sub	r4,r5,r4
10009df4:	4108983a 	sll	r4,r8,r4
10009df8:	2448b03a 	or	r4,r4,r17
10009dfc:	2008c03a 	cmpne	r4,r4,zero
10009e00:	3922b03a 	or	r17,r7,r4
10009e04:	0009883a 	mov	r4,zero
10009e08:	003f8d06 	br	10009c40 <__alt_data_end+0xf8009c40>
10009e0c:	0007883a 	mov	r3,zero
10009e10:	003fdd06 	br	10009d88 <__alt_data_end+0xf8009d88>
10009e14:	0009883a 	mov	r4,zero
10009e18:	003ff706 	br	10009df8 <__alt_data_end+0xf8009df8>

10009e1c <__divdf3>:
10009e1c:	defff004 	addi	sp,sp,-64
10009e20:	dc800815 	stw	r18,32(sp)
10009e24:	2824d53a 	srli	r18,r5,20
10009e28:	dd800c15 	stw	r22,48(sp)
10009e2c:	282cd7fa 	srli	r22,r5,31
10009e30:	dc000615 	stw	r16,24(sp)
10009e34:	04000434 	movhi	r16,16
10009e38:	843fffc4 	addi	r16,r16,-1
10009e3c:	dfc00f15 	stw	ra,60(sp)
10009e40:	df000e15 	stw	fp,56(sp)
10009e44:	ddc00d15 	stw	r23,52(sp)
10009e48:	dd400b15 	stw	r21,44(sp)
10009e4c:	dd000a15 	stw	r20,40(sp)
10009e50:	dcc00915 	stw	r19,36(sp)
10009e54:	dc400715 	stw	r17,28(sp)
10009e58:	9481ffcc 	andi	r18,r18,2047
10009e5c:	2c20703a 	and	r16,r5,r16
10009e60:	b2003fcc 	andi	r8,r22,255
10009e64:	90006126 	beq	r18,zero,10009fec <__divdf3+0x1d0>
10009e68:	0081ffc4 	movi	r2,2047
10009e6c:	202b883a 	mov	r21,r4
10009e70:	90803726 	beq	r18,r2,10009f50 <__divdf3+0x134>
10009e74:	80800434 	orhi	r2,r16,16
10009e78:	100490fa 	slli	r2,r2,3
10009e7c:	2020d77a 	srli	r16,r4,29
10009e80:	202a90fa 	slli	r21,r4,3
10009e84:	94bf0044 	addi	r18,r18,-1023
10009e88:	80a0b03a 	or	r16,r16,r2
10009e8c:	0013883a 	mov	r9,zero
10009e90:	000b883a 	mov	r5,zero
10009e94:	3806d53a 	srli	r3,r7,20
10009e98:	382ed7fa 	srli	r23,r7,31
10009e9c:	04400434 	movhi	r17,16
10009ea0:	8c7fffc4 	addi	r17,r17,-1
10009ea4:	18c1ffcc 	andi	r3,r3,2047
10009ea8:	3029883a 	mov	r20,r6
10009eac:	3c62703a 	and	r17,r7,r17
10009eb0:	bf003fcc 	andi	fp,r23,255
10009eb4:	18006e26 	beq	r3,zero,1000a070 <__divdf3+0x254>
10009eb8:	0081ffc4 	movi	r2,2047
10009ebc:	18806626 	beq	r3,r2,1000a058 <__divdf3+0x23c>
10009ec0:	88800434 	orhi	r2,r17,16
10009ec4:	100490fa 	slli	r2,r2,3
10009ec8:	3022d77a 	srli	r17,r6,29
10009ecc:	302890fa 	slli	r20,r6,3
10009ed0:	18ff0044 	addi	r3,r3,-1023
10009ed4:	88a2b03a 	or	r17,r17,r2
10009ed8:	000f883a 	mov	r7,zero
10009edc:	b5e6f03a 	xor	r19,r22,r23
10009ee0:	3a4cb03a 	or	r6,r7,r9
10009ee4:	008003c4 	movi	r2,15
10009ee8:	9809883a 	mov	r4,r19
10009eec:	90c7c83a 	sub	r3,r18,r3
10009ef0:	9cc03fcc 	andi	r19,r19,255
10009ef4:	11809636 	bltu	r2,r6,1000a150 <__divdf3+0x334>
10009ef8:	300c90ba 	slli	r6,r6,2
10009efc:	00840074 	movhi	r2,4097
10009f00:	10a7c404 	addi	r2,r2,-24816
10009f04:	308d883a 	add	r6,r6,r2
10009f08:	30800017 	ldw	r2,0(r6)
10009f0c:	1000683a 	jmp	r2
10009f10:	1000a150 	cmplti	zero,r2,645
10009f14:	10009f88 	cmpgei	zero,r2,638
10009f18:	1000a140 	call	11000a14 <_gp+0xfe8704>
10009f1c:	10009f7c 	xorhi	zero,r2,637
10009f20:	1000a140 	call	11000a14 <_gp+0xfe8704>
10009f24:	1000a114 	ori	zero,r2,644
10009f28:	1000a140 	call	11000a14 <_gp+0xfe8704>
10009f2c:	10009f7c 	xorhi	zero,r2,637
10009f30:	10009f88 	cmpgei	zero,r2,638
10009f34:	10009f88 	cmpgei	zero,r2,638
10009f38:	1000a114 	ori	zero,r2,644
10009f3c:	10009f7c 	xorhi	zero,r2,637
10009f40:	10009f6c 	andhi	zero,r2,637
10009f44:	10009f6c 	andhi	zero,r2,637
10009f48:	10009f6c 	andhi	zero,r2,637
10009f4c:	1000a4d8 	cmpnei	zero,r2,659
10009f50:	2404b03a 	or	r2,r4,r16
10009f54:	10006c1e 	bne	r2,zero,1000a108 <__divdf3+0x2ec>
10009f58:	02400204 	movi	r9,8
10009f5c:	0021883a 	mov	r16,zero
10009f60:	002b883a 	mov	r21,zero
10009f64:	01400084 	movi	r5,2
10009f68:	003fca06 	br	10009e94 <__alt_data_end+0xf8009e94>
10009f6c:	8023883a 	mov	r17,r16
10009f70:	a829883a 	mov	r20,r21
10009f74:	4039883a 	mov	fp,r8
10009f78:	280f883a 	mov	r7,r5
10009f7c:	00800084 	movi	r2,2
10009f80:	3881601e 	bne	r7,r2,1000a504 <__divdf3+0x6e8>
10009f84:	e027883a 	mov	r19,fp
10009f88:	9900004c 	andi	r4,r19,1
10009f8c:	0081ffc4 	movi	r2,2047
10009f90:	0021883a 	mov	r16,zero
10009f94:	002b883a 	mov	r21,zero
10009f98:	1004953a 	slli	r2,r2,20
10009f9c:	20c03fcc 	andi	r3,r4,255
10009fa0:	01400434 	movhi	r5,16
10009fa4:	297fffc4 	addi	r5,r5,-1
10009fa8:	180697fa 	slli	r3,r3,31
10009fac:	8160703a 	and	r16,r16,r5
10009fb0:	80a0b03a 	or	r16,r16,r2
10009fb4:	80c6b03a 	or	r3,r16,r3
10009fb8:	a805883a 	mov	r2,r21
10009fbc:	dfc00f17 	ldw	ra,60(sp)
10009fc0:	df000e17 	ldw	fp,56(sp)
10009fc4:	ddc00d17 	ldw	r23,52(sp)
10009fc8:	dd800c17 	ldw	r22,48(sp)
10009fcc:	dd400b17 	ldw	r21,44(sp)
10009fd0:	dd000a17 	ldw	r20,40(sp)
10009fd4:	dcc00917 	ldw	r19,36(sp)
10009fd8:	dc800817 	ldw	r18,32(sp)
10009fdc:	dc400717 	ldw	r17,28(sp)
10009fe0:	dc000617 	ldw	r16,24(sp)
10009fe4:	dec01004 	addi	sp,sp,64
10009fe8:	f800283a 	ret
10009fec:	2404b03a 	or	r2,r4,r16
10009ff0:	2023883a 	mov	r17,r4
10009ff4:	10003f26 	beq	r2,zero,1000a0f4 <__divdf3+0x2d8>
10009ff8:	80015e26 	beq	r16,zero,1000a574 <__divdf3+0x758>
10009ffc:	8009883a 	mov	r4,r16
1000a000:	d9800215 	stw	r6,8(sp)
1000a004:	d9c00515 	stw	r7,20(sp)
1000a008:	da000415 	stw	r8,16(sp)
1000a00c:	000bdb00 	call	1000bdb0 <__clzsi2>
1000a010:	d9800217 	ldw	r6,8(sp)
1000a014:	d9c00517 	ldw	r7,20(sp)
1000a018:	da000417 	ldw	r8,16(sp)
1000a01c:	113ffd44 	addi	r4,r2,-11
1000a020:	00c00704 	movi	r3,28
1000a024:	19014f16 	blt	r3,r4,1000a564 <__divdf3+0x748>
1000a028:	00c00744 	movi	r3,29
1000a02c:	157ffe04 	addi	r21,r2,-8
1000a030:	1907c83a 	sub	r3,r3,r4
1000a034:	8560983a 	sll	r16,r16,r21
1000a038:	88c6d83a 	srl	r3,r17,r3
1000a03c:	8d6a983a 	sll	r21,r17,r21
1000a040:	1c20b03a 	or	r16,r3,r16
1000a044:	1080fcc4 	addi	r2,r2,1011
1000a048:	00a5c83a 	sub	r18,zero,r2
1000a04c:	0013883a 	mov	r9,zero
1000a050:	000b883a 	mov	r5,zero
1000a054:	003f8f06 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a058:	3444b03a 	or	r2,r6,r17
1000a05c:	1000231e 	bne	r2,zero,1000a0ec <__divdf3+0x2d0>
1000a060:	0023883a 	mov	r17,zero
1000a064:	0029883a 	mov	r20,zero
1000a068:	01c00084 	movi	r7,2
1000a06c:	003f9b06 	br	10009edc <__alt_data_end+0xf8009edc>
1000a070:	3444b03a 	or	r2,r6,r17
1000a074:	10001926 	beq	r2,zero,1000a0dc <__divdf3+0x2c0>
1000a078:	88014b26 	beq	r17,zero,1000a5a8 <__divdf3+0x78c>
1000a07c:	8809883a 	mov	r4,r17
1000a080:	d9400115 	stw	r5,4(sp)
1000a084:	d9800215 	stw	r6,8(sp)
1000a088:	da000415 	stw	r8,16(sp)
1000a08c:	da400315 	stw	r9,12(sp)
1000a090:	000bdb00 	call	1000bdb0 <__clzsi2>
1000a094:	d9400117 	ldw	r5,4(sp)
1000a098:	d9800217 	ldw	r6,8(sp)
1000a09c:	da000417 	ldw	r8,16(sp)
1000a0a0:	da400317 	ldw	r9,12(sp)
1000a0a4:	113ffd44 	addi	r4,r2,-11
1000a0a8:	00c00704 	movi	r3,28
1000a0ac:	19013a16 	blt	r3,r4,1000a598 <__divdf3+0x77c>
1000a0b0:	00c00744 	movi	r3,29
1000a0b4:	153ffe04 	addi	r20,r2,-8
1000a0b8:	1907c83a 	sub	r3,r3,r4
1000a0bc:	8d22983a 	sll	r17,r17,r20
1000a0c0:	30c6d83a 	srl	r3,r6,r3
1000a0c4:	3528983a 	sll	r20,r6,r20
1000a0c8:	1c62b03a 	or	r17,r3,r17
1000a0cc:	1080fcc4 	addi	r2,r2,1011
1000a0d0:	0087c83a 	sub	r3,zero,r2
1000a0d4:	000f883a 	mov	r7,zero
1000a0d8:	003f8006 	br	10009edc <__alt_data_end+0xf8009edc>
1000a0dc:	0023883a 	mov	r17,zero
1000a0e0:	0029883a 	mov	r20,zero
1000a0e4:	01c00044 	movi	r7,1
1000a0e8:	003f7c06 	br	10009edc <__alt_data_end+0xf8009edc>
1000a0ec:	01c000c4 	movi	r7,3
1000a0f0:	003f7a06 	br	10009edc <__alt_data_end+0xf8009edc>
1000a0f4:	02400104 	movi	r9,4
1000a0f8:	0021883a 	mov	r16,zero
1000a0fc:	002b883a 	mov	r21,zero
1000a100:	01400044 	movi	r5,1
1000a104:	003f6306 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a108:	02400304 	movi	r9,12
1000a10c:	014000c4 	movi	r5,3
1000a110:	003f6006 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a114:	04000434 	movhi	r16,16
1000a118:	0009883a 	mov	r4,zero
1000a11c:	843fffc4 	addi	r16,r16,-1
1000a120:	057fffc4 	movi	r21,-1
1000a124:	0081ffc4 	movi	r2,2047
1000a128:	003f9b06 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a12c:	00c00044 	movi	r3,1
1000a130:	1887c83a 	sub	r3,r3,r2
1000a134:	01000e04 	movi	r4,56
1000a138:	20c1530e 	bge	r4,r3,1000a688 <__divdf3+0x86c>
1000a13c:	9900004c 	andi	r4,r19,1
1000a140:	0005883a 	mov	r2,zero
1000a144:	0021883a 	mov	r16,zero
1000a148:	002b883a 	mov	r21,zero
1000a14c:	003f9206 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a150:	8c012e36 	bltu	r17,r16,1000a60c <__divdf3+0x7f0>
1000a154:	84412c26 	beq	r16,r17,1000a608 <__divdf3+0x7ec>
1000a158:	a82f883a 	mov	r23,r21
1000a15c:	18ffffc4 	addi	r3,r3,-1
1000a160:	002b883a 	mov	r21,zero
1000a164:	a004d63a 	srli	r2,r20,24
1000a168:	8822923a 	slli	r17,r17,8
1000a16c:	a028923a 	slli	r20,r20,8
1000a170:	8009883a 	mov	r4,r16
1000a174:	88acb03a 	or	r22,r17,r2
1000a178:	dd000015 	stw	r20,0(sp)
1000a17c:	b028d43a 	srli	r20,r22,16
1000a180:	d8c00215 	stw	r3,8(sp)
1000a184:	b4bfffcc 	andi	r18,r22,65535
1000a188:	a00b883a 	mov	r5,r20
1000a18c:	0000aa40 	call	10000aa4 <__udivsi3>
1000a190:	100b883a 	mov	r5,r2
1000a194:	9009883a 	mov	r4,r18
1000a198:	1023883a 	mov	r17,r2
1000a19c:	0000b600 	call	10000b60 <__mulsi3>
1000a1a0:	8009883a 	mov	r4,r16
1000a1a4:	a00b883a 	mov	r5,r20
1000a1a8:	1039883a 	mov	fp,r2
1000a1ac:	0000b080 	call	10000b08 <__umodsi3>
1000a1b0:	1004943a 	slli	r2,r2,16
1000a1b4:	b808d43a 	srli	r4,r23,16
1000a1b8:	d8c00217 	ldw	r3,8(sp)
1000a1bc:	2084b03a 	or	r2,r4,r2
1000a1c0:	1700062e 	bgeu	r2,fp,1000a1dc <__divdf3+0x3c0>
1000a1c4:	1585883a 	add	r2,r2,r22
1000a1c8:	893fffc4 	addi	r4,r17,-1
1000a1cc:	15811d36 	bltu	r2,r22,1000a644 <__divdf3+0x828>
1000a1d0:	17011c2e 	bgeu	r2,fp,1000a644 <__divdf3+0x828>
1000a1d4:	8c7fff84 	addi	r17,r17,-2
1000a1d8:	1585883a 	add	r2,r2,r22
1000a1dc:	1739c83a 	sub	fp,r2,fp
1000a1e0:	a00b883a 	mov	r5,r20
1000a1e4:	e009883a 	mov	r4,fp
1000a1e8:	d8c00215 	stw	r3,8(sp)
1000a1ec:	0000aa40 	call	10000aa4 <__udivsi3>
1000a1f0:	100b883a 	mov	r5,r2
1000a1f4:	9009883a 	mov	r4,r18
1000a1f8:	1021883a 	mov	r16,r2
1000a1fc:	0000b600 	call	10000b60 <__mulsi3>
1000a200:	a00b883a 	mov	r5,r20
1000a204:	e009883a 	mov	r4,fp
1000a208:	d8800415 	stw	r2,16(sp)
1000a20c:	0000b080 	call	10000b08 <__umodsi3>
1000a210:	1004943a 	slli	r2,r2,16
1000a214:	da000417 	ldw	r8,16(sp)
1000a218:	bdffffcc 	andi	r23,r23,65535
1000a21c:	b884b03a 	or	r2,r23,r2
1000a220:	d8c00217 	ldw	r3,8(sp)
1000a224:	1200062e 	bgeu	r2,r8,1000a240 <__divdf3+0x424>
1000a228:	1585883a 	add	r2,r2,r22
1000a22c:	813fffc4 	addi	r4,r16,-1
1000a230:	15810236 	bltu	r2,r22,1000a63c <__divdf3+0x820>
1000a234:	1201012e 	bgeu	r2,r8,1000a63c <__divdf3+0x820>
1000a238:	843fff84 	addi	r16,r16,-2
1000a23c:	1585883a 	add	r2,r2,r22
1000a240:	8822943a 	slli	r17,r17,16
1000a244:	d9800017 	ldw	r6,0(sp)
1000a248:	1211c83a 	sub	r8,r2,r8
1000a24c:	8c22b03a 	or	r17,r17,r16
1000a250:	373fffcc 	andi	fp,r6,65535
1000a254:	8abfffcc 	andi	r10,r17,65535
1000a258:	8820d43a 	srli	r16,r17,16
1000a25c:	5009883a 	mov	r4,r10
1000a260:	e00b883a 	mov	r5,fp
1000a264:	302ed43a 	srli	r23,r6,16
1000a268:	d8c00215 	stw	r3,8(sp)
1000a26c:	da000415 	stw	r8,16(sp)
1000a270:	da800115 	stw	r10,4(sp)
1000a274:	0000b600 	call	10000b60 <__mulsi3>
1000a278:	800b883a 	mov	r5,r16
1000a27c:	e009883a 	mov	r4,fp
1000a280:	d8800515 	stw	r2,20(sp)
1000a284:	0000b600 	call	10000b60 <__mulsi3>
1000a288:	8009883a 	mov	r4,r16
1000a28c:	b80b883a 	mov	r5,r23
1000a290:	d8800315 	stw	r2,12(sp)
1000a294:	0000b600 	call	10000b60 <__mulsi3>
1000a298:	da800117 	ldw	r10,4(sp)
1000a29c:	b80b883a 	mov	r5,r23
1000a2a0:	1021883a 	mov	r16,r2
1000a2a4:	5009883a 	mov	r4,r10
1000a2a8:	0000b600 	call	10000b60 <__mulsi3>
1000a2ac:	d9c00517 	ldw	r7,20(sp)
1000a2b0:	da400317 	ldw	r9,12(sp)
1000a2b4:	d8c00217 	ldw	r3,8(sp)
1000a2b8:	3808d43a 	srli	r4,r7,16
1000a2bc:	1245883a 	add	r2,r2,r9
1000a2c0:	da000417 	ldw	r8,16(sp)
1000a2c4:	2085883a 	add	r2,r4,r2
1000a2c8:	1240022e 	bgeu	r2,r9,1000a2d4 <__divdf3+0x4b8>
1000a2cc:	01000074 	movhi	r4,1
1000a2d0:	8121883a 	add	r16,r16,r4
1000a2d4:	1008d43a 	srli	r4,r2,16
1000a2d8:	1004943a 	slli	r2,r2,16
1000a2dc:	39ffffcc 	andi	r7,r7,65535
1000a2e0:	2409883a 	add	r4,r4,r16
1000a2e4:	11c5883a 	add	r2,r2,r7
1000a2e8:	4100bb36 	bltu	r8,r4,1000a5d8 <__divdf3+0x7bc>
1000a2ec:	4100d726 	beq	r8,r4,1000a64c <__divdf3+0x830>
1000a2f0:	4109c83a 	sub	r4,r8,r4
1000a2f4:	a8a1c83a 	sub	r16,r21,r2
1000a2f8:	ac2b803a 	cmpltu	r21,r21,r16
1000a2fc:	256bc83a 	sub	r21,r4,r21
1000a300:	b540d926 	beq	r22,r21,1000a668 <__divdf3+0x84c>
1000a304:	a00b883a 	mov	r5,r20
1000a308:	a809883a 	mov	r4,r21
1000a30c:	d8c00215 	stw	r3,8(sp)
1000a310:	0000aa40 	call	10000aa4 <__udivsi3>
1000a314:	100b883a 	mov	r5,r2
1000a318:	9009883a 	mov	r4,r18
1000a31c:	d8800515 	stw	r2,20(sp)
1000a320:	0000b600 	call	10000b60 <__mulsi3>
1000a324:	a809883a 	mov	r4,r21
1000a328:	a00b883a 	mov	r5,r20
1000a32c:	d8800415 	stw	r2,16(sp)
1000a330:	0000b080 	call	10000b08 <__umodsi3>
1000a334:	1004943a 	slli	r2,r2,16
1000a338:	8008d43a 	srli	r4,r16,16
1000a33c:	da000417 	ldw	r8,16(sp)
1000a340:	d8c00217 	ldw	r3,8(sp)
1000a344:	2084b03a 	or	r2,r4,r2
1000a348:	d9c00517 	ldw	r7,20(sp)
1000a34c:	1200062e 	bgeu	r2,r8,1000a368 <__divdf3+0x54c>
1000a350:	1585883a 	add	r2,r2,r22
1000a354:	393fffc4 	addi	r4,r7,-1
1000a358:	1580c536 	bltu	r2,r22,1000a670 <__divdf3+0x854>
1000a35c:	1200c42e 	bgeu	r2,r8,1000a670 <__divdf3+0x854>
1000a360:	39ffff84 	addi	r7,r7,-2
1000a364:	1585883a 	add	r2,r2,r22
1000a368:	122bc83a 	sub	r21,r2,r8
1000a36c:	a00b883a 	mov	r5,r20
1000a370:	a809883a 	mov	r4,r21
1000a374:	d8c00215 	stw	r3,8(sp)
1000a378:	d9c00515 	stw	r7,20(sp)
1000a37c:	0000aa40 	call	10000aa4 <__udivsi3>
1000a380:	9009883a 	mov	r4,r18
1000a384:	100b883a 	mov	r5,r2
1000a388:	d8800415 	stw	r2,16(sp)
1000a38c:	0000b600 	call	10000b60 <__mulsi3>
1000a390:	a809883a 	mov	r4,r21
1000a394:	a00b883a 	mov	r5,r20
1000a398:	1025883a 	mov	r18,r2
1000a39c:	0000b080 	call	10000b08 <__umodsi3>
1000a3a0:	1004943a 	slli	r2,r2,16
1000a3a4:	813fffcc 	andi	r4,r16,65535
1000a3a8:	d8c00217 	ldw	r3,8(sp)
1000a3ac:	20a0b03a 	or	r16,r4,r2
1000a3b0:	d9c00517 	ldw	r7,20(sp)
1000a3b4:	da000417 	ldw	r8,16(sp)
1000a3b8:	8480062e 	bgeu	r16,r18,1000a3d4 <__divdf3+0x5b8>
1000a3bc:	85a1883a 	add	r16,r16,r22
1000a3c0:	40bfffc4 	addi	r2,r8,-1
1000a3c4:	8580ac36 	bltu	r16,r22,1000a678 <__divdf3+0x85c>
1000a3c8:	8480ab2e 	bgeu	r16,r18,1000a678 <__divdf3+0x85c>
1000a3cc:	423fff84 	addi	r8,r8,-2
1000a3d0:	85a1883a 	add	r16,r16,r22
1000a3d4:	3804943a 	slli	r2,r7,16
1000a3d8:	84a1c83a 	sub	r16,r16,r18
1000a3dc:	e009883a 	mov	r4,fp
1000a3e0:	1228b03a 	or	r20,r2,r8
1000a3e4:	a1ffffcc 	andi	r7,r20,65535
1000a3e8:	a024d43a 	srli	r18,r20,16
1000a3ec:	380b883a 	mov	r5,r7
1000a3f0:	d8c00215 	stw	r3,8(sp)
1000a3f4:	d9c00515 	stw	r7,20(sp)
1000a3f8:	0000b600 	call	10000b60 <__mulsi3>
1000a3fc:	900b883a 	mov	r5,r18
1000a400:	e009883a 	mov	r4,fp
1000a404:	102b883a 	mov	r21,r2
1000a408:	0000b600 	call	10000b60 <__mulsi3>
1000a40c:	900b883a 	mov	r5,r18
1000a410:	b809883a 	mov	r4,r23
1000a414:	1039883a 	mov	fp,r2
1000a418:	0000b600 	call	10000b60 <__mulsi3>
1000a41c:	d9c00517 	ldw	r7,20(sp)
1000a420:	b80b883a 	mov	r5,r23
1000a424:	1025883a 	mov	r18,r2
1000a428:	3809883a 	mov	r4,r7
1000a42c:	0000b600 	call	10000b60 <__mulsi3>
1000a430:	a808d43a 	srli	r4,r21,16
1000a434:	1705883a 	add	r2,r2,fp
1000a438:	d8c00217 	ldw	r3,8(sp)
1000a43c:	2085883a 	add	r2,r4,r2
1000a440:	1700022e 	bgeu	r2,fp,1000a44c <__divdf3+0x630>
1000a444:	01000074 	movhi	r4,1
1000a448:	9125883a 	add	r18,r18,r4
1000a44c:	1008d43a 	srli	r4,r2,16
1000a450:	1004943a 	slli	r2,r2,16
1000a454:	ad7fffcc 	andi	r21,r21,65535
1000a458:	2489883a 	add	r4,r4,r18
1000a45c:	1545883a 	add	r2,r2,r21
1000a460:	81003836 	bltu	r16,r4,1000a544 <__divdf3+0x728>
1000a464:	81003626 	beq	r16,r4,1000a540 <__divdf3+0x724>
1000a468:	a5000054 	ori	r20,r20,1
1000a46c:	1880ffc4 	addi	r2,r3,1023
1000a470:	00bf2e0e 	bge	zero,r2,1000a12c <__alt_data_end+0xf800a12c>
1000a474:	a10001cc 	andi	r4,r20,7
1000a478:	20000726 	beq	r4,zero,1000a498 <__divdf3+0x67c>
1000a47c:	a10003cc 	andi	r4,r20,15
1000a480:	01400104 	movi	r5,4
1000a484:	21400426 	beq	r4,r5,1000a498 <__divdf3+0x67c>
1000a488:	a149883a 	add	r4,r20,r5
1000a48c:	2529803a 	cmpltu	r20,r4,r20
1000a490:	8d23883a 	add	r17,r17,r20
1000a494:	2029883a 	mov	r20,r4
1000a498:	8900402c 	andhi	r4,r17,256
1000a49c:	20000426 	beq	r4,zero,1000a4b0 <__divdf3+0x694>
1000a4a0:	18810004 	addi	r2,r3,1024
1000a4a4:	00ffc034 	movhi	r3,65280
1000a4a8:	18ffffc4 	addi	r3,r3,-1
1000a4ac:	88e2703a 	and	r17,r17,r3
1000a4b0:	00c1ff84 	movi	r3,2046
1000a4b4:	18beb416 	blt	r3,r2,10009f88 <__alt_data_end+0xf8009f88>
1000a4b8:	a028d0fa 	srli	r20,r20,3
1000a4bc:	882a977a 	slli	r21,r17,29
1000a4c0:	8820927a 	slli	r16,r17,9
1000a4c4:	1081ffcc 	andi	r2,r2,2047
1000a4c8:	ad2ab03a 	or	r21,r21,r20
1000a4cc:	8020d33a 	srli	r16,r16,12
1000a4d0:	9900004c 	andi	r4,r19,1
1000a4d4:	003eb006 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a4d8:	8080022c 	andhi	r2,r16,8
1000a4dc:	10001226 	beq	r2,zero,1000a528 <__divdf3+0x70c>
1000a4e0:	8880022c 	andhi	r2,r17,8
1000a4e4:	1000101e 	bne	r2,zero,1000a528 <__divdf3+0x70c>
1000a4e8:	00800434 	movhi	r2,16
1000a4ec:	8c000234 	orhi	r16,r17,8
1000a4f0:	10bfffc4 	addi	r2,r2,-1
1000a4f4:	b809883a 	mov	r4,r23
1000a4f8:	80a0703a 	and	r16,r16,r2
1000a4fc:	a02b883a 	mov	r21,r20
1000a500:	003f0806 	br	1000a124 <__alt_data_end+0xf800a124>
1000a504:	008000c4 	movi	r2,3
1000a508:	3880b126 	beq	r7,r2,1000a7d0 <__divdf3+0x9b4>
1000a50c:	00800044 	movi	r2,1
1000a510:	38805b1e 	bne	r7,r2,1000a680 <__divdf3+0x864>
1000a514:	e009883a 	mov	r4,fp
1000a518:	0005883a 	mov	r2,zero
1000a51c:	0021883a 	mov	r16,zero
1000a520:	002b883a 	mov	r21,zero
1000a524:	003e9c06 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a528:	00800434 	movhi	r2,16
1000a52c:	84000234 	orhi	r16,r16,8
1000a530:	10bfffc4 	addi	r2,r2,-1
1000a534:	b009883a 	mov	r4,r22
1000a538:	80a0703a 	and	r16,r16,r2
1000a53c:	003ef906 	br	1000a124 <__alt_data_end+0xf800a124>
1000a540:	103fca26 	beq	r2,zero,1000a46c <__alt_data_end+0xf800a46c>
1000a544:	b421883a 	add	r16,r22,r16
1000a548:	a17fffc4 	addi	r5,r20,-1
1000a54c:	8580422e 	bgeu	r16,r22,1000a658 <__divdf3+0x83c>
1000a550:	2829883a 	mov	r20,r5
1000a554:	813fc41e 	bne	r16,r4,1000a468 <__alt_data_end+0xf800a468>
1000a558:	d9800017 	ldw	r6,0(sp)
1000a55c:	30bfc21e 	bne	r6,r2,1000a468 <__alt_data_end+0xf800a468>
1000a560:	003fc206 	br	1000a46c <__alt_data_end+0xf800a46c>
1000a564:	143ff604 	addi	r16,r2,-40
1000a568:	8c20983a 	sll	r16,r17,r16
1000a56c:	002b883a 	mov	r21,zero
1000a570:	003eb406 	br	1000a044 <__alt_data_end+0xf800a044>
1000a574:	d9800215 	stw	r6,8(sp)
1000a578:	d9c00515 	stw	r7,20(sp)
1000a57c:	da000415 	stw	r8,16(sp)
1000a580:	000bdb00 	call	1000bdb0 <__clzsi2>
1000a584:	10800804 	addi	r2,r2,32
1000a588:	da000417 	ldw	r8,16(sp)
1000a58c:	d9c00517 	ldw	r7,20(sp)
1000a590:	d9800217 	ldw	r6,8(sp)
1000a594:	003ea106 	br	1000a01c <__alt_data_end+0xf800a01c>
1000a598:	147ff604 	addi	r17,r2,-40
1000a59c:	3462983a 	sll	r17,r6,r17
1000a5a0:	0029883a 	mov	r20,zero
1000a5a4:	003ec906 	br	1000a0cc <__alt_data_end+0xf800a0cc>
1000a5a8:	3009883a 	mov	r4,r6
1000a5ac:	d9400115 	stw	r5,4(sp)
1000a5b0:	d9800215 	stw	r6,8(sp)
1000a5b4:	da000415 	stw	r8,16(sp)
1000a5b8:	da400315 	stw	r9,12(sp)
1000a5bc:	000bdb00 	call	1000bdb0 <__clzsi2>
1000a5c0:	10800804 	addi	r2,r2,32
1000a5c4:	da400317 	ldw	r9,12(sp)
1000a5c8:	da000417 	ldw	r8,16(sp)
1000a5cc:	d9800217 	ldw	r6,8(sp)
1000a5d0:	d9400117 	ldw	r5,4(sp)
1000a5d4:	003eb306 	br	1000a0a4 <__alt_data_end+0xf800a0a4>
1000a5d8:	d9800017 	ldw	r6,0(sp)
1000a5dc:	a9ab883a 	add	r21,r21,r6
1000a5e0:	a98b803a 	cmpltu	r5,r21,r6
1000a5e4:	2d8b883a 	add	r5,r5,r22
1000a5e8:	2a11883a 	add	r8,r5,r8
1000a5ec:	897fffc4 	addi	r5,r17,-1
1000a5f0:	b2000c2e 	bgeu	r22,r8,1000a624 <__divdf3+0x808>
1000a5f4:	41003f36 	bltu	r8,r4,1000a6f4 <__divdf3+0x8d8>
1000a5f8:	22006c26 	beq	r4,r8,1000a7ac <__divdf3+0x990>
1000a5fc:	4109c83a 	sub	r4,r8,r4
1000a600:	2823883a 	mov	r17,r5
1000a604:	003f3b06 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000a608:	ad3ed336 	bltu	r21,r20,1000a158 <__alt_data_end+0xf800a158>
1000a60c:	a804d07a 	srli	r2,r21,1
1000a610:	802e97fa 	slli	r23,r16,31
1000a614:	a82a97fa 	slli	r21,r21,31
1000a618:	8020d07a 	srli	r16,r16,1
1000a61c:	b8aeb03a 	or	r23,r23,r2
1000a620:	003ed006 	br	1000a164 <__alt_data_end+0xf800a164>
1000a624:	b23ff51e 	bne	r22,r8,1000a5fc <__alt_data_end+0xf800a5fc>
1000a628:	d9800017 	ldw	r6,0(sp)
1000a62c:	a9bff12e 	bgeu	r21,r6,1000a5f4 <__alt_data_end+0xf800a5f4>
1000a630:	b109c83a 	sub	r4,r22,r4
1000a634:	2823883a 	mov	r17,r5
1000a638:	003f2e06 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000a63c:	2021883a 	mov	r16,r4
1000a640:	003eff06 	br	1000a240 <__alt_data_end+0xf800a240>
1000a644:	2023883a 	mov	r17,r4
1000a648:	003ee406 	br	1000a1dc <__alt_data_end+0xf800a1dc>
1000a64c:	a8bfe236 	bltu	r21,r2,1000a5d8 <__alt_data_end+0xf800a5d8>
1000a650:	0009883a 	mov	r4,zero
1000a654:	003f2706 	br	1000a2f4 <__alt_data_end+0xf800a2f4>
1000a658:	81002d36 	bltu	r16,r4,1000a710 <__divdf3+0x8f4>
1000a65c:	24005626 	beq	r4,r16,1000a7b8 <__divdf3+0x99c>
1000a660:	2829883a 	mov	r20,r5
1000a664:	003f8006 	br	1000a468 <__alt_data_end+0xf800a468>
1000a668:	053fffc4 	movi	r20,-1
1000a66c:	003f7f06 	br	1000a46c <__alt_data_end+0xf800a46c>
1000a670:	200f883a 	mov	r7,r4
1000a674:	003f3c06 	br	1000a368 <__alt_data_end+0xf800a368>
1000a678:	1011883a 	mov	r8,r2
1000a67c:	003f5506 	br	1000a3d4 <__alt_data_end+0xf800a3d4>
1000a680:	e027883a 	mov	r19,fp
1000a684:	003f7906 	br	1000a46c <__alt_data_end+0xf800a46c>
1000a688:	010007c4 	movi	r4,31
1000a68c:	20c02816 	blt	r4,r3,1000a730 <__divdf3+0x914>
1000a690:	00800804 	movi	r2,32
1000a694:	10c5c83a 	sub	r2,r2,r3
1000a698:	888a983a 	sll	r5,r17,r2
1000a69c:	a0c8d83a 	srl	r4,r20,r3
1000a6a0:	a084983a 	sll	r2,r20,r2
1000a6a4:	88e2d83a 	srl	r17,r17,r3
1000a6a8:	2906b03a 	or	r3,r5,r4
1000a6ac:	1004c03a 	cmpne	r2,r2,zero
1000a6b0:	1886b03a 	or	r3,r3,r2
1000a6b4:	188001cc 	andi	r2,r3,7
1000a6b8:	10000726 	beq	r2,zero,1000a6d8 <__divdf3+0x8bc>
1000a6bc:	188003cc 	andi	r2,r3,15
1000a6c0:	01000104 	movi	r4,4
1000a6c4:	11000426 	beq	r2,r4,1000a6d8 <__divdf3+0x8bc>
1000a6c8:	1805883a 	mov	r2,r3
1000a6cc:	10c00104 	addi	r3,r2,4
1000a6d0:	1885803a 	cmpltu	r2,r3,r2
1000a6d4:	88a3883a 	add	r17,r17,r2
1000a6d8:	8880202c 	andhi	r2,r17,128
1000a6dc:	10002926 	beq	r2,zero,1000a784 <__divdf3+0x968>
1000a6e0:	9900004c 	andi	r4,r19,1
1000a6e4:	00800044 	movi	r2,1
1000a6e8:	0021883a 	mov	r16,zero
1000a6ec:	002b883a 	mov	r21,zero
1000a6f0:	003e2906 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a6f4:	d9800017 	ldw	r6,0(sp)
1000a6f8:	8c7fff84 	addi	r17,r17,-2
1000a6fc:	a9ab883a 	add	r21,r21,r6
1000a700:	a98b803a 	cmpltu	r5,r21,r6
1000a704:	2d8b883a 	add	r5,r5,r22
1000a708:	2a11883a 	add	r8,r5,r8
1000a70c:	003ef806 	br	1000a2f0 <__alt_data_end+0xf800a2f0>
1000a710:	d9800017 	ldw	r6,0(sp)
1000a714:	318f883a 	add	r7,r6,r6
1000a718:	398b803a 	cmpltu	r5,r7,r6
1000a71c:	2d8d883a 	add	r6,r5,r22
1000a720:	81a1883a 	add	r16,r16,r6
1000a724:	a17fff84 	addi	r5,r20,-2
1000a728:	d9c00015 	stw	r7,0(sp)
1000a72c:	003f8806 	br	1000a550 <__alt_data_end+0xf800a550>
1000a730:	013ff844 	movi	r4,-31
1000a734:	2085c83a 	sub	r2,r4,r2
1000a738:	8888d83a 	srl	r4,r17,r2
1000a73c:	00800804 	movi	r2,32
1000a740:	18802126 	beq	r3,r2,1000a7c8 <__divdf3+0x9ac>
1000a744:	04001004 	movi	r16,64
1000a748:	80c7c83a 	sub	r3,r16,r3
1000a74c:	88e0983a 	sll	r16,r17,r3
1000a750:	8504b03a 	or	r2,r16,r20
1000a754:	1004c03a 	cmpne	r2,r2,zero
1000a758:	2084b03a 	or	r2,r4,r2
1000a75c:	144001cc 	andi	r17,r2,7
1000a760:	88000d1e 	bne	r17,zero,1000a798 <__divdf3+0x97c>
1000a764:	0021883a 	mov	r16,zero
1000a768:	102ad0fa 	srli	r21,r2,3
1000a76c:	9900004c 	andi	r4,r19,1
1000a770:	0005883a 	mov	r2,zero
1000a774:	ac6ab03a 	or	r21,r21,r17
1000a778:	003e0706 	br	10009f98 <__alt_data_end+0xf8009f98>
1000a77c:	1007883a 	mov	r3,r2
1000a780:	0023883a 	mov	r17,zero
1000a784:	8820927a 	slli	r16,r17,9
1000a788:	1805883a 	mov	r2,r3
1000a78c:	8822977a 	slli	r17,r17,29
1000a790:	8020d33a 	srli	r16,r16,12
1000a794:	003ff406 	br	1000a768 <__alt_data_end+0xf800a768>
1000a798:	10c003cc 	andi	r3,r2,15
1000a79c:	01000104 	movi	r4,4
1000a7a0:	193ff626 	beq	r3,r4,1000a77c <__alt_data_end+0xf800a77c>
1000a7a4:	0023883a 	mov	r17,zero
1000a7a8:	003fc806 	br	1000a6cc <__alt_data_end+0xf800a6cc>
1000a7ac:	a8bfd136 	bltu	r21,r2,1000a6f4 <__alt_data_end+0xf800a6f4>
1000a7b0:	2823883a 	mov	r17,r5
1000a7b4:	003fa606 	br	1000a650 <__alt_data_end+0xf800a650>
1000a7b8:	d9800017 	ldw	r6,0(sp)
1000a7bc:	30bfd436 	bltu	r6,r2,1000a710 <__alt_data_end+0xf800a710>
1000a7c0:	2829883a 	mov	r20,r5
1000a7c4:	003f6406 	br	1000a558 <__alt_data_end+0xf800a558>
1000a7c8:	0021883a 	mov	r16,zero
1000a7cc:	003fe006 	br	1000a750 <__alt_data_end+0xf800a750>
1000a7d0:	00800434 	movhi	r2,16
1000a7d4:	8c000234 	orhi	r16,r17,8
1000a7d8:	10bfffc4 	addi	r2,r2,-1
1000a7dc:	e009883a 	mov	r4,fp
1000a7e0:	80a0703a 	and	r16,r16,r2
1000a7e4:	a02b883a 	mov	r21,r20
1000a7e8:	003e4e06 	br	1000a124 <__alt_data_end+0xf800a124>

1000a7ec <__eqdf2>:
1000a7ec:	2804d53a 	srli	r2,r5,20
1000a7f0:	3806d53a 	srli	r3,r7,20
1000a7f4:	02000434 	movhi	r8,16
1000a7f8:	423fffc4 	addi	r8,r8,-1
1000a7fc:	1081ffcc 	andi	r2,r2,2047
1000a800:	0281ffc4 	movi	r10,2047
1000a804:	2a12703a 	and	r9,r5,r8
1000a808:	18c1ffcc 	andi	r3,r3,2047
1000a80c:	3a10703a 	and	r8,r7,r8
1000a810:	280ad7fa 	srli	r5,r5,31
1000a814:	380ed7fa 	srli	r7,r7,31
1000a818:	12801026 	beq	r2,r10,1000a85c <__eqdf2+0x70>
1000a81c:	0281ffc4 	movi	r10,2047
1000a820:	1a800a26 	beq	r3,r10,1000a84c <__eqdf2+0x60>
1000a824:	10c00226 	beq	r2,r3,1000a830 <__eqdf2+0x44>
1000a828:	00800044 	movi	r2,1
1000a82c:	f800283a 	ret
1000a830:	4a3ffd1e 	bne	r9,r8,1000a828 <__alt_data_end+0xf800a828>
1000a834:	21bffc1e 	bne	r4,r6,1000a828 <__alt_data_end+0xf800a828>
1000a838:	29c00c26 	beq	r5,r7,1000a86c <__eqdf2+0x80>
1000a83c:	103ffa1e 	bne	r2,zero,1000a828 <__alt_data_end+0xf800a828>
1000a840:	2244b03a 	or	r2,r4,r9
1000a844:	1004c03a 	cmpne	r2,r2,zero
1000a848:	f800283a 	ret
1000a84c:	3214b03a 	or	r10,r6,r8
1000a850:	503ff426 	beq	r10,zero,1000a824 <__alt_data_end+0xf800a824>
1000a854:	00800044 	movi	r2,1
1000a858:	f800283a 	ret
1000a85c:	2254b03a 	or	r10,r4,r9
1000a860:	503fee26 	beq	r10,zero,1000a81c <__alt_data_end+0xf800a81c>
1000a864:	00800044 	movi	r2,1
1000a868:	f800283a 	ret
1000a86c:	0005883a 	mov	r2,zero
1000a870:	f800283a 	ret

1000a874 <__gedf2>:
1000a874:	2804d53a 	srli	r2,r5,20
1000a878:	3806d53a 	srli	r3,r7,20
1000a87c:	02000434 	movhi	r8,16
1000a880:	423fffc4 	addi	r8,r8,-1
1000a884:	1081ffcc 	andi	r2,r2,2047
1000a888:	0241ffc4 	movi	r9,2047
1000a88c:	2a14703a 	and	r10,r5,r8
1000a890:	18c1ffcc 	andi	r3,r3,2047
1000a894:	3a10703a 	and	r8,r7,r8
1000a898:	280ad7fa 	srli	r5,r5,31
1000a89c:	380ed7fa 	srli	r7,r7,31
1000a8a0:	12401d26 	beq	r2,r9,1000a918 <__gedf2+0xa4>
1000a8a4:	0241ffc4 	movi	r9,2047
1000a8a8:	1a401226 	beq	r3,r9,1000a8f4 <__gedf2+0x80>
1000a8ac:	1000081e 	bne	r2,zero,1000a8d0 <__gedf2+0x5c>
1000a8b0:	2296b03a 	or	r11,r4,r10
1000a8b4:	5813003a 	cmpeq	r9,r11,zero
1000a8b8:	1800091e 	bne	r3,zero,1000a8e0 <__gedf2+0x6c>
1000a8bc:	3218b03a 	or	r12,r6,r8
1000a8c0:	6000071e 	bne	r12,zero,1000a8e0 <__gedf2+0x6c>
1000a8c4:	0005883a 	mov	r2,zero
1000a8c8:	5800101e 	bne	r11,zero,1000a90c <__gedf2+0x98>
1000a8cc:	f800283a 	ret
1000a8d0:	18000c1e 	bne	r3,zero,1000a904 <__gedf2+0x90>
1000a8d4:	3212b03a 	or	r9,r6,r8
1000a8d8:	48000c26 	beq	r9,zero,1000a90c <__gedf2+0x98>
1000a8dc:	0013883a 	mov	r9,zero
1000a8e0:	39c03fcc 	andi	r7,r7,255
1000a8e4:	48000826 	beq	r9,zero,1000a908 <__gedf2+0x94>
1000a8e8:	38000926 	beq	r7,zero,1000a910 <__gedf2+0x9c>
1000a8ec:	00800044 	movi	r2,1
1000a8f0:	f800283a 	ret
1000a8f4:	3212b03a 	or	r9,r6,r8
1000a8f8:	483fec26 	beq	r9,zero,1000a8ac <__alt_data_end+0xf800a8ac>
1000a8fc:	00bfff84 	movi	r2,-2
1000a900:	f800283a 	ret
1000a904:	39c03fcc 	andi	r7,r7,255
1000a908:	29c00626 	beq	r5,r7,1000a924 <__gedf2+0xb0>
1000a90c:	283ff726 	beq	r5,zero,1000a8ec <__alt_data_end+0xf800a8ec>
1000a910:	00bfffc4 	movi	r2,-1
1000a914:	f800283a 	ret
1000a918:	2292b03a 	or	r9,r4,r10
1000a91c:	483fe126 	beq	r9,zero,1000a8a4 <__alt_data_end+0xf800a8a4>
1000a920:	003ff606 	br	1000a8fc <__alt_data_end+0xf800a8fc>
1000a924:	18bff916 	blt	r3,r2,1000a90c <__alt_data_end+0xf800a90c>
1000a928:	10c00316 	blt	r2,r3,1000a938 <__gedf2+0xc4>
1000a92c:	42bff736 	bltu	r8,r10,1000a90c <__alt_data_end+0xf800a90c>
1000a930:	52000326 	beq	r10,r8,1000a940 <__gedf2+0xcc>
1000a934:	5200042e 	bgeu	r10,r8,1000a948 <__gedf2+0xd4>
1000a938:	283fec1e 	bne	r5,zero,1000a8ec <__alt_data_end+0xf800a8ec>
1000a93c:	003ff406 	br	1000a910 <__alt_data_end+0xf800a910>
1000a940:	313ff236 	bltu	r6,r4,1000a90c <__alt_data_end+0xf800a90c>
1000a944:	21bffc36 	bltu	r4,r6,1000a938 <__alt_data_end+0xf800a938>
1000a948:	0005883a 	mov	r2,zero
1000a94c:	f800283a 	ret

1000a950 <__ledf2>:
1000a950:	2804d53a 	srli	r2,r5,20
1000a954:	3810d53a 	srli	r8,r7,20
1000a958:	00c00434 	movhi	r3,16
1000a95c:	18ffffc4 	addi	r3,r3,-1
1000a960:	1081ffcc 	andi	r2,r2,2047
1000a964:	0241ffc4 	movi	r9,2047
1000a968:	28d4703a 	and	r10,r5,r3
1000a96c:	4201ffcc 	andi	r8,r8,2047
1000a970:	38c6703a 	and	r3,r7,r3
1000a974:	280ad7fa 	srli	r5,r5,31
1000a978:	380ed7fa 	srli	r7,r7,31
1000a97c:	12401f26 	beq	r2,r9,1000a9fc <__ledf2+0xac>
1000a980:	0241ffc4 	movi	r9,2047
1000a984:	42401426 	beq	r8,r9,1000a9d8 <__ledf2+0x88>
1000a988:	1000091e 	bne	r2,zero,1000a9b0 <__ledf2+0x60>
1000a98c:	2296b03a 	or	r11,r4,r10
1000a990:	5813003a 	cmpeq	r9,r11,zero
1000a994:	29403fcc 	andi	r5,r5,255
1000a998:	40000a1e 	bne	r8,zero,1000a9c4 <__ledf2+0x74>
1000a99c:	30d8b03a 	or	r12,r6,r3
1000a9a0:	6000081e 	bne	r12,zero,1000a9c4 <__ledf2+0x74>
1000a9a4:	0005883a 	mov	r2,zero
1000a9a8:	5800111e 	bne	r11,zero,1000a9f0 <__ledf2+0xa0>
1000a9ac:	f800283a 	ret
1000a9b0:	29403fcc 	andi	r5,r5,255
1000a9b4:	40000c1e 	bne	r8,zero,1000a9e8 <__ledf2+0x98>
1000a9b8:	30d2b03a 	or	r9,r6,r3
1000a9bc:	48000c26 	beq	r9,zero,1000a9f0 <__ledf2+0xa0>
1000a9c0:	0013883a 	mov	r9,zero
1000a9c4:	39c03fcc 	andi	r7,r7,255
1000a9c8:	48000826 	beq	r9,zero,1000a9ec <__ledf2+0x9c>
1000a9cc:	38001126 	beq	r7,zero,1000aa14 <__ledf2+0xc4>
1000a9d0:	00800044 	movi	r2,1
1000a9d4:	f800283a 	ret
1000a9d8:	30d2b03a 	or	r9,r6,r3
1000a9dc:	483fea26 	beq	r9,zero,1000a988 <__alt_data_end+0xf800a988>
1000a9e0:	00800084 	movi	r2,2
1000a9e4:	f800283a 	ret
1000a9e8:	39c03fcc 	andi	r7,r7,255
1000a9ec:	39400726 	beq	r7,r5,1000aa0c <__ledf2+0xbc>
1000a9f0:	2800081e 	bne	r5,zero,1000aa14 <__ledf2+0xc4>
1000a9f4:	00800044 	movi	r2,1
1000a9f8:	f800283a 	ret
1000a9fc:	2292b03a 	or	r9,r4,r10
1000aa00:	483fdf26 	beq	r9,zero,1000a980 <__alt_data_end+0xf800a980>
1000aa04:	00800084 	movi	r2,2
1000aa08:	f800283a 	ret
1000aa0c:	4080030e 	bge	r8,r2,1000aa1c <__ledf2+0xcc>
1000aa10:	383fef26 	beq	r7,zero,1000a9d0 <__alt_data_end+0xf800a9d0>
1000aa14:	00bfffc4 	movi	r2,-1
1000aa18:	f800283a 	ret
1000aa1c:	123feb16 	blt	r2,r8,1000a9cc <__alt_data_end+0xf800a9cc>
1000aa20:	1abff336 	bltu	r3,r10,1000a9f0 <__alt_data_end+0xf800a9f0>
1000aa24:	50c00326 	beq	r10,r3,1000aa34 <__ledf2+0xe4>
1000aa28:	50c0042e 	bgeu	r10,r3,1000aa3c <__ledf2+0xec>
1000aa2c:	283fe81e 	bne	r5,zero,1000a9d0 <__alt_data_end+0xf800a9d0>
1000aa30:	003ff806 	br	1000aa14 <__alt_data_end+0xf800aa14>
1000aa34:	313fee36 	bltu	r6,r4,1000a9f0 <__alt_data_end+0xf800a9f0>
1000aa38:	21bffc36 	bltu	r4,r6,1000aa2c <__alt_data_end+0xf800aa2c>
1000aa3c:	0005883a 	mov	r2,zero
1000aa40:	f800283a 	ret

1000aa44 <__muldf3>:
1000aa44:	deffee04 	addi	sp,sp,-72
1000aa48:	dd000c15 	stw	r20,48(sp)
1000aa4c:	2828d53a 	srli	r20,r5,20
1000aa50:	ddc00f15 	stw	r23,60(sp)
1000aa54:	282ed7fa 	srli	r23,r5,31
1000aa58:	dc000815 	stw	r16,32(sp)
1000aa5c:	04000434 	movhi	r16,16
1000aa60:	dcc00b15 	stw	r19,44(sp)
1000aa64:	843fffc4 	addi	r16,r16,-1
1000aa68:	dfc01115 	stw	ra,68(sp)
1000aa6c:	df001015 	stw	fp,64(sp)
1000aa70:	dd800e15 	stw	r22,56(sp)
1000aa74:	dd400d15 	stw	r21,52(sp)
1000aa78:	dc800a15 	stw	r18,40(sp)
1000aa7c:	dc400915 	stw	r17,36(sp)
1000aa80:	a501ffcc 	andi	r20,r20,2047
1000aa84:	2c20703a 	and	r16,r5,r16
1000aa88:	b827883a 	mov	r19,r23
1000aa8c:	ba403fcc 	andi	r9,r23,255
1000aa90:	a0006026 	beq	r20,zero,1000ac14 <__muldf3+0x1d0>
1000aa94:	0081ffc4 	movi	r2,2047
1000aa98:	202d883a 	mov	r22,r4
1000aa9c:	a0803626 	beq	r20,r2,1000ab78 <__muldf3+0x134>
1000aaa0:	84000434 	orhi	r16,r16,16
1000aaa4:	200ad77a 	srli	r5,r4,29
1000aaa8:	800490fa 	slli	r2,r16,3
1000aaac:	202c90fa 	slli	r22,r4,3
1000aab0:	a53f0044 	addi	r20,r20,-1023
1000aab4:	28a0b03a 	or	r16,r5,r2
1000aab8:	002b883a 	mov	r21,zero
1000aabc:	000b883a 	mov	r5,zero
1000aac0:	3804d53a 	srli	r2,r7,20
1000aac4:	3838d7fa 	srli	fp,r7,31
1000aac8:	04400434 	movhi	r17,16
1000aacc:	8c7fffc4 	addi	r17,r17,-1
1000aad0:	1081ffcc 	andi	r2,r2,2047
1000aad4:	3025883a 	mov	r18,r6
1000aad8:	3c62703a 	and	r17,r7,r17
1000aadc:	e2803fcc 	andi	r10,fp,255
1000aae0:	10006d26 	beq	r2,zero,1000ac98 <__muldf3+0x254>
1000aae4:	00c1ffc4 	movi	r3,2047
1000aae8:	10c06526 	beq	r2,r3,1000ac80 <__muldf3+0x23c>
1000aaec:	8c400434 	orhi	r17,r17,16
1000aaf0:	300ed77a 	srli	r7,r6,29
1000aaf4:	880690fa 	slli	r3,r17,3
1000aaf8:	302490fa 	slli	r18,r6,3
1000aafc:	10bf0044 	addi	r2,r2,-1023
1000ab00:	38e2b03a 	or	r17,r7,r3
1000ab04:	000f883a 	mov	r7,zero
1000ab08:	a087883a 	add	r3,r20,r2
1000ab0c:	010003c4 	movi	r4,15
1000ab10:	3d44b03a 	or	r2,r7,r21
1000ab14:	e5ccf03a 	xor	r6,fp,r23
1000ab18:	1a000044 	addi	r8,r3,1
1000ab1c:	20809b36 	bltu	r4,r2,1000ad8c <__muldf3+0x348>
1000ab20:	100490ba 	slli	r2,r2,2
1000ab24:	01040074 	movhi	r4,4097
1000ab28:	212ace04 	addi	r4,r4,-21704
1000ab2c:	1105883a 	add	r2,r2,r4
1000ab30:	10800017 	ldw	r2,0(r2)
1000ab34:	1000683a 	jmp	r2
1000ab38:	1000ad8c 	andi	zero,r2,694
1000ab3c:	1000ab98 	cmpnei	zero,r2,686
1000ab40:	1000ab98 	cmpnei	zero,r2,686
1000ab44:	1000ab94 	ori	zero,r2,686
1000ab48:	1000ad68 	cmpgeui	zero,r2,693
1000ab4c:	1000ad68 	cmpgeui	zero,r2,693
1000ab50:	1000ad50 	cmplti	zero,r2,693
1000ab54:	1000ab94 	ori	zero,r2,686
1000ab58:	1000ad68 	cmpgeui	zero,r2,693
1000ab5c:	1000ad50 	cmplti	zero,r2,693
1000ab60:	1000ad68 	cmpgeui	zero,r2,693
1000ab64:	1000ab94 	ori	zero,r2,686
1000ab68:	1000ad78 	rdprs	zero,r2,693
1000ab6c:	1000ad78 	rdprs	zero,r2,693
1000ab70:	1000ad78 	rdprs	zero,r2,693
1000ab74:	1000b0d8 	cmpnei	zero,r2,707
1000ab78:	2404b03a 	or	r2,r4,r16
1000ab7c:	1000711e 	bne	r2,zero,1000ad44 <__muldf3+0x300>
1000ab80:	05400204 	movi	r21,8
1000ab84:	0021883a 	mov	r16,zero
1000ab88:	002d883a 	mov	r22,zero
1000ab8c:	01400084 	movi	r5,2
1000ab90:	003fcb06 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000ab94:	500d883a 	mov	r6,r10
1000ab98:	00800084 	movi	r2,2
1000ab9c:	38805926 	beq	r7,r2,1000ad04 <__muldf3+0x2c0>
1000aba0:	008000c4 	movi	r2,3
1000aba4:	3881bb26 	beq	r7,r2,1000b294 <__muldf3+0x850>
1000aba8:	00800044 	movi	r2,1
1000abac:	3881961e 	bne	r7,r2,1000b208 <__muldf3+0x7c4>
1000abb0:	3027883a 	mov	r19,r6
1000abb4:	0005883a 	mov	r2,zero
1000abb8:	0021883a 	mov	r16,zero
1000abbc:	002d883a 	mov	r22,zero
1000abc0:	1004953a 	slli	r2,r2,20
1000abc4:	98c03fcc 	andi	r3,r19,255
1000abc8:	04400434 	movhi	r17,16
1000abcc:	8c7fffc4 	addi	r17,r17,-1
1000abd0:	180697fa 	slli	r3,r3,31
1000abd4:	8460703a 	and	r16,r16,r17
1000abd8:	80a0b03a 	or	r16,r16,r2
1000abdc:	80c6b03a 	or	r3,r16,r3
1000abe0:	b005883a 	mov	r2,r22
1000abe4:	dfc01117 	ldw	ra,68(sp)
1000abe8:	df001017 	ldw	fp,64(sp)
1000abec:	ddc00f17 	ldw	r23,60(sp)
1000abf0:	dd800e17 	ldw	r22,56(sp)
1000abf4:	dd400d17 	ldw	r21,52(sp)
1000abf8:	dd000c17 	ldw	r20,48(sp)
1000abfc:	dcc00b17 	ldw	r19,44(sp)
1000ac00:	dc800a17 	ldw	r18,40(sp)
1000ac04:	dc400917 	ldw	r17,36(sp)
1000ac08:	dc000817 	ldw	r16,32(sp)
1000ac0c:	dec01204 	addi	sp,sp,72
1000ac10:	f800283a 	ret
1000ac14:	2404b03a 	or	r2,r4,r16
1000ac18:	202b883a 	mov	r21,r4
1000ac1c:	10004426 	beq	r2,zero,1000ad30 <__muldf3+0x2ec>
1000ac20:	80015126 	beq	r16,zero,1000b168 <__muldf3+0x724>
1000ac24:	8009883a 	mov	r4,r16
1000ac28:	d9800715 	stw	r6,28(sp)
1000ac2c:	d9c00215 	stw	r7,8(sp)
1000ac30:	da400415 	stw	r9,16(sp)
1000ac34:	000bdb00 	call	1000bdb0 <__clzsi2>
1000ac38:	d9800717 	ldw	r6,28(sp)
1000ac3c:	d9c00217 	ldw	r7,8(sp)
1000ac40:	da400417 	ldw	r9,16(sp)
1000ac44:	113ffd44 	addi	r4,r2,-11
1000ac48:	00c00704 	movi	r3,28
1000ac4c:	19014216 	blt	r3,r4,1000b158 <__muldf3+0x714>
1000ac50:	00c00744 	movi	r3,29
1000ac54:	15bffe04 	addi	r22,r2,-8
1000ac58:	1907c83a 	sub	r3,r3,r4
1000ac5c:	85a0983a 	sll	r16,r16,r22
1000ac60:	a8c6d83a 	srl	r3,r21,r3
1000ac64:	adac983a 	sll	r22,r21,r22
1000ac68:	1c20b03a 	or	r16,r3,r16
1000ac6c:	1080fcc4 	addi	r2,r2,1011
1000ac70:	00a9c83a 	sub	r20,zero,r2
1000ac74:	002b883a 	mov	r21,zero
1000ac78:	000b883a 	mov	r5,zero
1000ac7c:	003f9006 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000ac80:	3446b03a 	or	r3,r6,r17
1000ac84:	1800281e 	bne	r3,zero,1000ad28 <__muldf3+0x2e4>
1000ac88:	0023883a 	mov	r17,zero
1000ac8c:	0025883a 	mov	r18,zero
1000ac90:	01c00084 	movi	r7,2
1000ac94:	003f9c06 	br	1000ab08 <__alt_data_end+0xf800ab08>
1000ac98:	3446b03a 	or	r3,r6,r17
1000ac9c:	18001e26 	beq	r3,zero,1000ad18 <__muldf3+0x2d4>
1000aca0:	88012126 	beq	r17,zero,1000b128 <__muldf3+0x6e4>
1000aca4:	8809883a 	mov	r4,r17
1000aca8:	d9400215 	stw	r5,8(sp)
1000acac:	d9800715 	stw	r6,28(sp)
1000acb0:	da400415 	stw	r9,16(sp)
1000acb4:	da800315 	stw	r10,12(sp)
1000acb8:	000bdb00 	call	1000bdb0 <__clzsi2>
1000acbc:	d9400217 	ldw	r5,8(sp)
1000acc0:	d9800717 	ldw	r6,28(sp)
1000acc4:	da400417 	ldw	r9,16(sp)
1000acc8:	da800317 	ldw	r10,12(sp)
1000accc:	113ffd44 	addi	r4,r2,-11
1000acd0:	00c00704 	movi	r3,28
1000acd4:	19011016 	blt	r3,r4,1000b118 <__muldf3+0x6d4>
1000acd8:	00c00744 	movi	r3,29
1000acdc:	14bffe04 	addi	r18,r2,-8
1000ace0:	1907c83a 	sub	r3,r3,r4
1000ace4:	8ca2983a 	sll	r17,r17,r18
1000ace8:	30c6d83a 	srl	r3,r6,r3
1000acec:	34a4983a 	sll	r18,r6,r18
1000acf0:	1c62b03a 	or	r17,r3,r17
1000acf4:	1080fcc4 	addi	r2,r2,1011
1000acf8:	0085c83a 	sub	r2,zero,r2
1000acfc:	000f883a 	mov	r7,zero
1000ad00:	003f8106 	br	1000ab08 <__alt_data_end+0xf800ab08>
1000ad04:	3027883a 	mov	r19,r6
1000ad08:	0081ffc4 	movi	r2,2047
1000ad0c:	0021883a 	mov	r16,zero
1000ad10:	002d883a 	mov	r22,zero
1000ad14:	003faa06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000ad18:	0023883a 	mov	r17,zero
1000ad1c:	0025883a 	mov	r18,zero
1000ad20:	01c00044 	movi	r7,1
1000ad24:	003f7806 	br	1000ab08 <__alt_data_end+0xf800ab08>
1000ad28:	01c000c4 	movi	r7,3
1000ad2c:	003f7606 	br	1000ab08 <__alt_data_end+0xf800ab08>
1000ad30:	05400104 	movi	r21,4
1000ad34:	0021883a 	mov	r16,zero
1000ad38:	002d883a 	mov	r22,zero
1000ad3c:	01400044 	movi	r5,1
1000ad40:	003f5f06 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000ad44:	05400304 	movi	r21,12
1000ad48:	014000c4 	movi	r5,3
1000ad4c:	003f5c06 	br	1000aac0 <__alt_data_end+0xf800aac0>
1000ad50:	04000434 	movhi	r16,16
1000ad54:	0027883a 	mov	r19,zero
1000ad58:	843fffc4 	addi	r16,r16,-1
1000ad5c:	05bfffc4 	movi	r22,-1
1000ad60:	0081ffc4 	movi	r2,2047
1000ad64:	003f9606 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000ad68:	8023883a 	mov	r17,r16
1000ad6c:	b025883a 	mov	r18,r22
1000ad70:	280f883a 	mov	r7,r5
1000ad74:	003f8806 	br	1000ab98 <__alt_data_end+0xf800ab98>
1000ad78:	8023883a 	mov	r17,r16
1000ad7c:	b025883a 	mov	r18,r22
1000ad80:	480d883a 	mov	r6,r9
1000ad84:	280f883a 	mov	r7,r5
1000ad88:	003f8306 	br	1000ab98 <__alt_data_end+0xf800ab98>
1000ad8c:	b026d43a 	srli	r19,r22,16
1000ad90:	902ed43a 	srli	r23,r18,16
1000ad94:	b5bfffcc 	andi	r22,r22,65535
1000ad98:	94bfffcc 	andi	r18,r18,65535
1000ad9c:	b00b883a 	mov	r5,r22
1000ada0:	9009883a 	mov	r4,r18
1000ada4:	d8c00515 	stw	r3,20(sp)
1000ada8:	d9800715 	stw	r6,28(sp)
1000adac:	da000615 	stw	r8,24(sp)
1000adb0:	0000b600 	call	10000b60 <__mulsi3>
1000adb4:	980b883a 	mov	r5,r19
1000adb8:	9009883a 	mov	r4,r18
1000adbc:	1029883a 	mov	r20,r2
1000adc0:	0000b600 	call	10000b60 <__mulsi3>
1000adc4:	b80b883a 	mov	r5,r23
1000adc8:	9809883a 	mov	r4,r19
1000adcc:	102b883a 	mov	r21,r2
1000add0:	0000b600 	call	10000b60 <__mulsi3>
1000add4:	b809883a 	mov	r4,r23
1000add8:	b00b883a 	mov	r5,r22
1000addc:	1039883a 	mov	fp,r2
1000ade0:	0000b600 	call	10000b60 <__mulsi3>
1000ade4:	a008d43a 	srli	r4,r20,16
1000ade8:	1545883a 	add	r2,r2,r21
1000adec:	d8c00517 	ldw	r3,20(sp)
1000adf0:	2085883a 	add	r2,r4,r2
1000adf4:	d9800717 	ldw	r6,28(sp)
1000adf8:	da000617 	ldw	r8,24(sp)
1000adfc:	1540022e 	bgeu	r2,r21,1000ae08 <__muldf3+0x3c4>
1000ae00:	01000074 	movhi	r4,1
1000ae04:	e139883a 	add	fp,fp,r4
1000ae08:	100e943a 	slli	r7,r2,16
1000ae0c:	1004d43a 	srli	r2,r2,16
1000ae10:	882ad43a 	srli	r21,r17,16
1000ae14:	a53fffcc 	andi	r20,r20,65535
1000ae18:	8c7fffcc 	andi	r17,r17,65535
1000ae1c:	3d29883a 	add	r20,r7,r20
1000ae20:	b00b883a 	mov	r5,r22
1000ae24:	8809883a 	mov	r4,r17
1000ae28:	d8c00515 	stw	r3,20(sp)
1000ae2c:	d9800715 	stw	r6,28(sp)
1000ae30:	da000615 	stw	r8,24(sp)
1000ae34:	dd000115 	stw	r20,4(sp)
1000ae38:	d8800015 	stw	r2,0(sp)
1000ae3c:	0000b600 	call	10000b60 <__mulsi3>
1000ae40:	980b883a 	mov	r5,r19
1000ae44:	8809883a 	mov	r4,r17
1000ae48:	d8800215 	stw	r2,8(sp)
1000ae4c:	0000b600 	call	10000b60 <__mulsi3>
1000ae50:	9809883a 	mov	r4,r19
1000ae54:	a80b883a 	mov	r5,r21
1000ae58:	1029883a 	mov	r20,r2
1000ae5c:	0000b600 	call	10000b60 <__mulsi3>
1000ae60:	b00b883a 	mov	r5,r22
1000ae64:	a809883a 	mov	r4,r21
1000ae68:	d8800415 	stw	r2,16(sp)
1000ae6c:	0000b600 	call	10000b60 <__mulsi3>
1000ae70:	d9c00217 	ldw	r7,8(sp)
1000ae74:	1505883a 	add	r2,r2,r20
1000ae78:	d8c00517 	ldw	r3,20(sp)
1000ae7c:	3826d43a 	srli	r19,r7,16
1000ae80:	d9800717 	ldw	r6,28(sp)
1000ae84:	da000617 	ldw	r8,24(sp)
1000ae88:	9885883a 	add	r2,r19,r2
1000ae8c:	da400417 	ldw	r9,16(sp)
1000ae90:	1500022e 	bgeu	r2,r20,1000ae9c <__muldf3+0x458>
1000ae94:	01000074 	movhi	r4,1
1000ae98:	4913883a 	add	r9,r9,r4
1000ae9c:	1028d43a 	srli	r20,r2,16
1000aea0:	1004943a 	slli	r2,r2,16
1000aea4:	802cd43a 	srli	r22,r16,16
1000aea8:	843fffcc 	andi	r16,r16,65535
1000aeac:	3cffffcc 	andi	r19,r7,65535
1000aeb0:	9009883a 	mov	r4,r18
1000aeb4:	800b883a 	mov	r5,r16
1000aeb8:	a269883a 	add	r20,r20,r9
1000aebc:	d8c00515 	stw	r3,20(sp)
1000aec0:	d9800715 	stw	r6,28(sp)
1000aec4:	da000615 	stw	r8,24(sp)
1000aec8:	14e7883a 	add	r19,r2,r19
1000aecc:	0000b600 	call	10000b60 <__mulsi3>
1000aed0:	9009883a 	mov	r4,r18
1000aed4:	b00b883a 	mov	r5,r22
1000aed8:	d8800315 	stw	r2,12(sp)
1000aedc:	0000b600 	call	10000b60 <__mulsi3>
1000aee0:	b809883a 	mov	r4,r23
1000aee4:	b00b883a 	mov	r5,r22
1000aee8:	d8800215 	stw	r2,8(sp)
1000aeec:	0000b600 	call	10000b60 <__mulsi3>
1000aef0:	b80b883a 	mov	r5,r23
1000aef4:	8009883a 	mov	r4,r16
1000aef8:	d8800415 	stw	r2,16(sp)
1000aefc:	0000b600 	call	10000b60 <__mulsi3>
1000af00:	da800317 	ldw	r10,12(sp)
1000af04:	d9c00217 	ldw	r7,8(sp)
1000af08:	d9000017 	ldw	r4,0(sp)
1000af0c:	502ed43a 	srli	r23,r10,16
1000af10:	11c5883a 	add	r2,r2,r7
1000af14:	24e5883a 	add	r18,r4,r19
1000af18:	b885883a 	add	r2,r23,r2
1000af1c:	d8c00517 	ldw	r3,20(sp)
1000af20:	d9800717 	ldw	r6,28(sp)
1000af24:	da000617 	ldw	r8,24(sp)
1000af28:	da400417 	ldw	r9,16(sp)
1000af2c:	11c0022e 	bgeu	r2,r7,1000af38 <__muldf3+0x4f4>
1000af30:	01000074 	movhi	r4,1
1000af34:	4913883a 	add	r9,r9,r4
1000af38:	100ed43a 	srli	r7,r2,16
1000af3c:	1004943a 	slli	r2,r2,16
1000af40:	55ffffcc 	andi	r23,r10,65535
1000af44:	3a53883a 	add	r9,r7,r9
1000af48:	8809883a 	mov	r4,r17
1000af4c:	800b883a 	mov	r5,r16
1000af50:	d8c00515 	stw	r3,20(sp)
1000af54:	d9800715 	stw	r6,28(sp)
1000af58:	da000615 	stw	r8,24(sp)
1000af5c:	da400415 	stw	r9,16(sp)
1000af60:	15ef883a 	add	r23,r2,r23
1000af64:	0000b600 	call	10000b60 <__mulsi3>
1000af68:	8809883a 	mov	r4,r17
1000af6c:	b00b883a 	mov	r5,r22
1000af70:	d8800215 	stw	r2,8(sp)
1000af74:	0000b600 	call	10000b60 <__mulsi3>
1000af78:	b00b883a 	mov	r5,r22
1000af7c:	a809883a 	mov	r4,r21
1000af80:	d8800315 	stw	r2,12(sp)
1000af84:	0000b600 	call	10000b60 <__mulsi3>
1000af88:	8009883a 	mov	r4,r16
1000af8c:	a80b883a 	mov	r5,r21
1000af90:	1023883a 	mov	r17,r2
1000af94:	0000b600 	call	10000b60 <__mulsi3>
1000af98:	d9c00217 	ldw	r7,8(sp)
1000af9c:	da800317 	ldw	r10,12(sp)
1000afa0:	d8c00517 	ldw	r3,20(sp)
1000afa4:	3808d43a 	srli	r4,r7,16
1000afa8:	1285883a 	add	r2,r2,r10
1000afac:	d9800717 	ldw	r6,28(sp)
1000afb0:	2085883a 	add	r2,r4,r2
1000afb4:	da000617 	ldw	r8,24(sp)
1000afb8:	da400417 	ldw	r9,16(sp)
1000afbc:	1280022e 	bgeu	r2,r10,1000afc8 <__muldf3+0x584>
1000afc0:	01000074 	movhi	r4,1
1000afc4:	8923883a 	add	r17,r17,r4
1000afc8:	1008943a 	slli	r4,r2,16
1000afcc:	39ffffcc 	andi	r7,r7,65535
1000afd0:	e4b9883a 	add	fp,fp,r18
1000afd4:	21cf883a 	add	r7,r4,r7
1000afd8:	e4e7803a 	cmpltu	r19,fp,r19
1000afdc:	3d0f883a 	add	r7,r7,r20
1000afe0:	bf39883a 	add	fp,r23,fp
1000afe4:	99c9883a 	add	r4,r19,r7
1000afe8:	e5ef803a 	cmpltu	r23,fp,r23
1000afec:	490b883a 	add	r5,r9,r4
1000aff0:	1004d43a 	srli	r2,r2,16
1000aff4:	b965883a 	add	r18,r23,r5
1000aff8:	24c9803a 	cmpltu	r4,r4,r19
1000affc:	3d29803a 	cmpltu	r20,r7,r20
1000b000:	a128b03a 	or	r20,r20,r4
1000b004:	95ef803a 	cmpltu	r23,r18,r23
1000b008:	2a53803a 	cmpltu	r9,r5,r9
1000b00c:	a0a9883a 	add	r20,r20,r2
1000b010:	4deeb03a 	or	r23,r9,r23
1000b014:	a5ef883a 	add	r23,r20,r23
1000b018:	bc63883a 	add	r17,r23,r17
1000b01c:	e004927a 	slli	r2,fp,9
1000b020:	d9000117 	ldw	r4,4(sp)
1000b024:	882e927a 	slli	r23,r17,9
1000b028:	9022d5fa 	srli	r17,r18,23
1000b02c:	e038d5fa 	srli	fp,fp,23
1000b030:	1104b03a 	or	r2,r2,r4
1000b034:	9024927a 	slli	r18,r18,9
1000b038:	1004c03a 	cmpne	r2,r2,zero
1000b03c:	bc62b03a 	or	r17,r23,r17
1000b040:	1738b03a 	or	fp,r2,fp
1000b044:	8880402c 	andhi	r2,r17,256
1000b048:	e4a4b03a 	or	r18,fp,r18
1000b04c:	10000726 	beq	r2,zero,1000b06c <__muldf3+0x628>
1000b050:	9006d07a 	srli	r3,r18,1
1000b054:	880497fa 	slli	r2,r17,31
1000b058:	9480004c 	andi	r18,r18,1
1000b05c:	8822d07a 	srli	r17,r17,1
1000b060:	1ca4b03a 	or	r18,r3,r18
1000b064:	14a4b03a 	or	r18,r2,r18
1000b068:	4007883a 	mov	r3,r8
1000b06c:	1880ffc4 	addi	r2,r3,1023
1000b070:	0080460e 	bge	zero,r2,1000b18c <__muldf3+0x748>
1000b074:	910001cc 	andi	r4,r18,7
1000b078:	20000726 	beq	r4,zero,1000b098 <__muldf3+0x654>
1000b07c:	910003cc 	andi	r4,r18,15
1000b080:	01400104 	movi	r5,4
1000b084:	21400426 	beq	r4,r5,1000b098 <__muldf3+0x654>
1000b088:	9149883a 	add	r4,r18,r5
1000b08c:	24a5803a 	cmpltu	r18,r4,r18
1000b090:	8ca3883a 	add	r17,r17,r18
1000b094:	2025883a 	mov	r18,r4
1000b098:	8900402c 	andhi	r4,r17,256
1000b09c:	20000426 	beq	r4,zero,1000b0b0 <__muldf3+0x66c>
1000b0a0:	18810004 	addi	r2,r3,1024
1000b0a4:	00ffc034 	movhi	r3,65280
1000b0a8:	18ffffc4 	addi	r3,r3,-1
1000b0ac:	88e2703a 	and	r17,r17,r3
1000b0b0:	00c1ff84 	movi	r3,2046
1000b0b4:	18bf1316 	blt	r3,r2,1000ad04 <__alt_data_end+0xf800ad04>
1000b0b8:	882c977a 	slli	r22,r17,29
1000b0bc:	9024d0fa 	srli	r18,r18,3
1000b0c0:	8822927a 	slli	r17,r17,9
1000b0c4:	1081ffcc 	andi	r2,r2,2047
1000b0c8:	b4acb03a 	or	r22,r22,r18
1000b0cc:	8820d33a 	srli	r16,r17,12
1000b0d0:	3027883a 	mov	r19,r6
1000b0d4:	003eba06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000b0d8:	8080022c 	andhi	r2,r16,8
1000b0dc:	10000926 	beq	r2,zero,1000b104 <__muldf3+0x6c0>
1000b0e0:	8880022c 	andhi	r2,r17,8
1000b0e4:	1000071e 	bne	r2,zero,1000b104 <__muldf3+0x6c0>
1000b0e8:	00800434 	movhi	r2,16
1000b0ec:	8c000234 	orhi	r16,r17,8
1000b0f0:	10bfffc4 	addi	r2,r2,-1
1000b0f4:	e027883a 	mov	r19,fp
1000b0f8:	80a0703a 	and	r16,r16,r2
1000b0fc:	902d883a 	mov	r22,r18
1000b100:	003f1706 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000b104:	00800434 	movhi	r2,16
1000b108:	84000234 	orhi	r16,r16,8
1000b10c:	10bfffc4 	addi	r2,r2,-1
1000b110:	80a0703a 	and	r16,r16,r2
1000b114:	003f1206 	br	1000ad60 <__alt_data_end+0xf800ad60>
1000b118:	147ff604 	addi	r17,r2,-40
1000b11c:	3462983a 	sll	r17,r6,r17
1000b120:	0025883a 	mov	r18,zero
1000b124:	003ef306 	br	1000acf4 <__alt_data_end+0xf800acf4>
1000b128:	3009883a 	mov	r4,r6
1000b12c:	d9400215 	stw	r5,8(sp)
1000b130:	d9800715 	stw	r6,28(sp)
1000b134:	da400415 	stw	r9,16(sp)
1000b138:	da800315 	stw	r10,12(sp)
1000b13c:	000bdb00 	call	1000bdb0 <__clzsi2>
1000b140:	10800804 	addi	r2,r2,32
1000b144:	da800317 	ldw	r10,12(sp)
1000b148:	da400417 	ldw	r9,16(sp)
1000b14c:	d9800717 	ldw	r6,28(sp)
1000b150:	d9400217 	ldw	r5,8(sp)
1000b154:	003edd06 	br	1000accc <__alt_data_end+0xf800accc>
1000b158:	143ff604 	addi	r16,r2,-40
1000b15c:	ac20983a 	sll	r16,r21,r16
1000b160:	002d883a 	mov	r22,zero
1000b164:	003ec106 	br	1000ac6c <__alt_data_end+0xf800ac6c>
1000b168:	d9800715 	stw	r6,28(sp)
1000b16c:	d9c00215 	stw	r7,8(sp)
1000b170:	da400415 	stw	r9,16(sp)
1000b174:	000bdb00 	call	1000bdb0 <__clzsi2>
1000b178:	10800804 	addi	r2,r2,32
1000b17c:	da400417 	ldw	r9,16(sp)
1000b180:	d9c00217 	ldw	r7,8(sp)
1000b184:	d9800717 	ldw	r6,28(sp)
1000b188:	003eae06 	br	1000ac44 <__alt_data_end+0xf800ac44>
1000b18c:	00c00044 	movi	r3,1
1000b190:	1887c83a 	sub	r3,r3,r2
1000b194:	01000e04 	movi	r4,56
1000b198:	20fe8516 	blt	r4,r3,1000abb0 <__alt_data_end+0xf800abb0>
1000b19c:	010007c4 	movi	r4,31
1000b1a0:	20c01b16 	blt	r4,r3,1000b210 <__muldf3+0x7cc>
1000b1a4:	00800804 	movi	r2,32
1000b1a8:	10c5c83a 	sub	r2,r2,r3
1000b1ac:	888a983a 	sll	r5,r17,r2
1000b1b0:	90c8d83a 	srl	r4,r18,r3
1000b1b4:	9084983a 	sll	r2,r18,r2
1000b1b8:	88e2d83a 	srl	r17,r17,r3
1000b1bc:	2906b03a 	or	r3,r5,r4
1000b1c0:	1004c03a 	cmpne	r2,r2,zero
1000b1c4:	1886b03a 	or	r3,r3,r2
1000b1c8:	188001cc 	andi	r2,r3,7
1000b1cc:	10000726 	beq	r2,zero,1000b1ec <__muldf3+0x7a8>
1000b1d0:	188003cc 	andi	r2,r3,15
1000b1d4:	01000104 	movi	r4,4
1000b1d8:	11000426 	beq	r2,r4,1000b1ec <__muldf3+0x7a8>
1000b1dc:	1805883a 	mov	r2,r3
1000b1e0:	10c00104 	addi	r3,r2,4
1000b1e4:	1885803a 	cmpltu	r2,r3,r2
1000b1e8:	88a3883a 	add	r17,r17,r2
1000b1ec:	8880202c 	andhi	r2,r17,128
1000b1f0:	10001c26 	beq	r2,zero,1000b264 <__muldf3+0x820>
1000b1f4:	3027883a 	mov	r19,r6
1000b1f8:	00800044 	movi	r2,1
1000b1fc:	0021883a 	mov	r16,zero
1000b200:	002d883a 	mov	r22,zero
1000b204:	003e6e06 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000b208:	4007883a 	mov	r3,r8
1000b20c:	003f9706 	br	1000b06c <__alt_data_end+0xf800b06c>
1000b210:	017ff844 	movi	r5,-31
1000b214:	2885c83a 	sub	r2,r5,r2
1000b218:	888ad83a 	srl	r5,r17,r2
1000b21c:	00800804 	movi	r2,32
1000b220:	18801a26 	beq	r3,r2,1000b28c <__muldf3+0x848>
1000b224:	01001004 	movi	r4,64
1000b228:	20c7c83a 	sub	r3,r4,r3
1000b22c:	88e2983a 	sll	r17,r17,r3
1000b230:	8ca4b03a 	or	r18,r17,r18
1000b234:	9004c03a 	cmpne	r2,r18,zero
1000b238:	2884b03a 	or	r2,r5,r2
1000b23c:	144001cc 	andi	r17,r2,7
1000b240:	88000d1e 	bne	r17,zero,1000b278 <__muldf3+0x834>
1000b244:	0021883a 	mov	r16,zero
1000b248:	102cd0fa 	srli	r22,r2,3
1000b24c:	3027883a 	mov	r19,r6
1000b250:	0005883a 	mov	r2,zero
1000b254:	b46cb03a 	or	r22,r22,r17
1000b258:	003e5906 	br	1000abc0 <__alt_data_end+0xf800abc0>
1000b25c:	1007883a 	mov	r3,r2
1000b260:	0023883a 	mov	r17,zero
1000b264:	8820927a 	slli	r16,r17,9
1000b268:	1805883a 	mov	r2,r3
1000b26c:	8822977a 	slli	r17,r17,29
1000b270:	8020d33a 	srli	r16,r16,12
1000b274:	003ff406 	br	1000b248 <__alt_data_end+0xf800b248>
1000b278:	10c003cc 	andi	r3,r2,15
1000b27c:	01000104 	movi	r4,4
1000b280:	193ff626 	beq	r3,r4,1000b25c <__alt_data_end+0xf800b25c>
1000b284:	0023883a 	mov	r17,zero
1000b288:	003fd506 	br	1000b1e0 <__alt_data_end+0xf800b1e0>
1000b28c:	0023883a 	mov	r17,zero
1000b290:	003fe706 	br	1000b230 <__alt_data_end+0xf800b230>
1000b294:	00800434 	movhi	r2,16
1000b298:	8c000234 	orhi	r16,r17,8
1000b29c:	10bfffc4 	addi	r2,r2,-1
1000b2a0:	3027883a 	mov	r19,r6
1000b2a4:	80a0703a 	and	r16,r16,r2
1000b2a8:	902d883a 	mov	r22,r18
1000b2ac:	003eac06 	br	1000ad60 <__alt_data_end+0xf800ad60>

1000b2b0 <__subdf3>:
1000b2b0:	02000434 	movhi	r8,16
1000b2b4:	423fffc4 	addi	r8,r8,-1
1000b2b8:	defffb04 	addi	sp,sp,-20
1000b2bc:	2a14703a 	and	r10,r5,r8
1000b2c0:	3812d53a 	srli	r9,r7,20
1000b2c4:	3a10703a 	and	r8,r7,r8
1000b2c8:	2006d77a 	srli	r3,r4,29
1000b2cc:	3004d77a 	srli	r2,r6,29
1000b2d0:	dc000015 	stw	r16,0(sp)
1000b2d4:	501490fa 	slli	r10,r10,3
1000b2d8:	2820d53a 	srli	r16,r5,20
1000b2dc:	401090fa 	slli	r8,r8,3
1000b2e0:	dc800215 	stw	r18,8(sp)
1000b2e4:	dc400115 	stw	r17,4(sp)
1000b2e8:	dfc00415 	stw	ra,16(sp)
1000b2ec:	202290fa 	slli	r17,r4,3
1000b2f0:	dcc00315 	stw	r19,12(sp)
1000b2f4:	4a41ffcc 	andi	r9,r9,2047
1000b2f8:	0101ffc4 	movi	r4,2047
1000b2fc:	2824d7fa 	srli	r18,r5,31
1000b300:	8401ffcc 	andi	r16,r16,2047
1000b304:	50c6b03a 	or	r3,r10,r3
1000b308:	380ed7fa 	srli	r7,r7,31
1000b30c:	408ab03a 	or	r5,r8,r2
1000b310:	300c90fa 	slli	r6,r6,3
1000b314:	49009626 	beq	r9,r4,1000b570 <__subdf3+0x2c0>
1000b318:	39c0005c 	xori	r7,r7,1
1000b31c:	8245c83a 	sub	r2,r16,r9
1000b320:	3c807426 	beq	r7,r18,1000b4f4 <__subdf3+0x244>
1000b324:	0080af0e 	bge	zero,r2,1000b5e4 <__subdf3+0x334>
1000b328:	48002a1e 	bne	r9,zero,1000b3d4 <__subdf3+0x124>
1000b32c:	2988b03a 	or	r4,r5,r6
1000b330:	20009a1e 	bne	r4,zero,1000b59c <__subdf3+0x2ec>
1000b334:	888001cc 	andi	r2,r17,7
1000b338:	10000726 	beq	r2,zero,1000b358 <__subdf3+0xa8>
1000b33c:	888003cc 	andi	r2,r17,15
1000b340:	01000104 	movi	r4,4
1000b344:	11000426 	beq	r2,r4,1000b358 <__subdf3+0xa8>
1000b348:	890b883a 	add	r5,r17,r4
1000b34c:	2c63803a 	cmpltu	r17,r5,r17
1000b350:	1c47883a 	add	r3,r3,r17
1000b354:	2823883a 	mov	r17,r5
1000b358:	1880202c 	andhi	r2,r3,128
1000b35c:	10005926 	beq	r2,zero,1000b4c4 <__subdf3+0x214>
1000b360:	84000044 	addi	r16,r16,1
1000b364:	0081ffc4 	movi	r2,2047
1000b368:	8080be26 	beq	r16,r2,1000b664 <__subdf3+0x3b4>
1000b36c:	017fe034 	movhi	r5,65408
1000b370:	297fffc4 	addi	r5,r5,-1
1000b374:	1946703a 	and	r3,r3,r5
1000b378:	1804977a 	slli	r2,r3,29
1000b37c:	1806927a 	slli	r3,r3,9
1000b380:	8822d0fa 	srli	r17,r17,3
1000b384:	8401ffcc 	andi	r16,r16,2047
1000b388:	180ad33a 	srli	r5,r3,12
1000b38c:	9100004c 	andi	r4,r18,1
1000b390:	1444b03a 	or	r2,r2,r17
1000b394:	80c1ffcc 	andi	r3,r16,2047
1000b398:	1820953a 	slli	r16,r3,20
1000b39c:	20c03fcc 	andi	r3,r4,255
1000b3a0:	180897fa 	slli	r4,r3,31
1000b3a4:	00c00434 	movhi	r3,16
1000b3a8:	18ffffc4 	addi	r3,r3,-1
1000b3ac:	28c6703a 	and	r3,r5,r3
1000b3b0:	1c06b03a 	or	r3,r3,r16
1000b3b4:	1906b03a 	or	r3,r3,r4
1000b3b8:	dfc00417 	ldw	ra,16(sp)
1000b3bc:	dcc00317 	ldw	r19,12(sp)
1000b3c0:	dc800217 	ldw	r18,8(sp)
1000b3c4:	dc400117 	ldw	r17,4(sp)
1000b3c8:	dc000017 	ldw	r16,0(sp)
1000b3cc:	dec00504 	addi	sp,sp,20
1000b3d0:	f800283a 	ret
1000b3d4:	0101ffc4 	movi	r4,2047
1000b3d8:	813fd626 	beq	r16,r4,1000b334 <__alt_data_end+0xf800b334>
1000b3dc:	29402034 	orhi	r5,r5,128
1000b3e0:	01000e04 	movi	r4,56
1000b3e4:	2080a316 	blt	r4,r2,1000b674 <__subdf3+0x3c4>
1000b3e8:	010007c4 	movi	r4,31
1000b3ec:	2080c616 	blt	r4,r2,1000b708 <__subdf3+0x458>
1000b3f0:	01000804 	movi	r4,32
1000b3f4:	2089c83a 	sub	r4,r4,r2
1000b3f8:	2910983a 	sll	r8,r5,r4
1000b3fc:	308ed83a 	srl	r7,r6,r2
1000b400:	3108983a 	sll	r4,r6,r4
1000b404:	2884d83a 	srl	r2,r5,r2
1000b408:	41ccb03a 	or	r6,r8,r7
1000b40c:	2008c03a 	cmpne	r4,r4,zero
1000b410:	310cb03a 	or	r6,r6,r4
1000b414:	898dc83a 	sub	r6,r17,r6
1000b418:	89a3803a 	cmpltu	r17,r17,r6
1000b41c:	1887c83a 	sub	r3,r3,r2
1000b420:	1c47c83a 	sub	r3,r3,r17
1000b424:	3023883a 	mov	r17,r6
1000b428:	1880202c 	andhi	r2,r3,128
1000b42c:	10002326 	beq	r2,zero,1000b4bc <__subdf3+0x20c>
1000b430:	04c02034 	movhi	r19,128
1000b434:	9cffffc4 	addi	r19,r19,-1
1000b438:	1ce6703a 	and	r19,r3,r19
1000b43c:	98007a26 	beq	r19,zero,1000b628 <__subdf3+0x378>
1000b440:	9809883a 	mov	r4,r19
1000b444:	000bdb00 	call	1000bdb0 <__clzsi2>
1000b448:	113ffe04 	addi	r4,r2,-8
1000b44c:	00c007c4 	movi	r3,31
1000b450:	19007b16 	blt	r3,r4,1000b640 <__subdf3+0x390>
1000b454:	00800804 	movi	r2,32
1000b458:	1105c83a 	sub	r2,r2,r4
1000b45c:	8884d83a 	srl	r2,r17,r2
1000b460:	9906983a 	sll	r3,r19,r4
1000b464:	8922983a 	sll	r17,r17,r4
1000b468:	10c4b03a 	or	r2,r2,r3
1000b46c:	24007816 	blt	r4,r16,1000b650 <__subdf3+0x3a0>
1000b470:	2421c83a 	sub	r16,r4,r16
1000b474:	80c00044 	addi	r3,r16,1
1000b478:	010007c4 	movi	r4,31
1000b47c:	20c09516 	blt	r4,r3,1000b6d4 <__subdf3+0x424>
1000b480:	01400804 	movi	r5,32
1000b484:	28cbc83a 	sub	r5,r5,r3
1000b488:	88c8d83a 	srl	r4,r17,r3
1000b48c:	8962983a 	sll	r17,r17,r5
1000b490:	114a983a 	sll	r5,r2,r5
1000b494:	10c6d83a 	srl	r3,r2,r3
1000b498:	8804c03a 	cmpne	r2,r17,zero
1000b49c:	290ab03a 	or	r5,r5,r4
1000b4a0:	28a2b03a 	or	r17,r5,r2
1000b4a4:	0021883a 	mov	r16,zero
1000b4a8:	003fa206 	br	1000b334 <__alt_data_end+0xf800b334>
1000b4ac:	2090b03a 	or	r8,r4,r2
1000b4b0:	40018e26 	beq	r8,zero,1000baec <__subdf3+0x83c>
1000b4b4:	1007883a 	mov	r3,r2
1000b4b8:	2023883a 	mov	r17,r4
1000b4bc:	888001cc 	andi	r2,r17,7
1000b4c0:	103f9e1e 	bne	r2,zero,1000b33c <__alt_data_end+0xf800b33c>
1000b4c4:	1804977a 	slli	r2,r3,29
1000b4c8:	8822d0fa 	srli	r17,r17,3
1000b4cc:	1810d0fa 	srli	r8,r3,3
1000b4d0:	9100004c 	andi	r4,r18,1
1000b4d4:	1444b03a 	or	r2,r2,r17
1000b4d8:	00c1ffc4 	movi	r3,2047
1000b4dc:	80c02826 	beq	r16,r3,1000b580 <__subdf3+0x2d0>
1000b4e0:	01400434 	movhi	r5,16
1000b4e4:	297fffc4 	addi	r5,r5,-1
1000b4e8:	80e0703a 	and	r16,r16,r3
1000b4ec:	414a703a 	and	r5,r8,r5
1000b4f0:	003fa806 	br	1000b394 <__alt_data_end+0xf800b394>
1000b4f4:	0080630e 	bge	zero,r2,1000b684 <__subdf3+0x3d4>
1000b4f8:	48003026 	beq	r9,zero,1000b5bc <__subdf3+0x30c>
1000b4fc:	0101ffc4 	movi	r4,2047
1000b500:	813f8c26 	beq	r16,r4,1000b334 <__alt_data_end+0xf800b334>
1000b504:	29402034 	orhi	r5,r5,128
1000b508:	01000e04 	movi	r4,56
1000b50c:	2080a90e 	bge	r4,r2,1000b7b4 <__subdf3+0x504>
1000b510:	298cb03a 	or	r6,r5,r6
1000b514:	3012c03a 	cmpne	r9,r6,zero
1000b518:	0005883a 	mov	r2,zero
1000b51c:	4c53883a 	add	r9,r9,r17
1000b520:	4c63803a 	cmpltu	r17,r9,r17
1000b524:	10c7883a 	add	r3,r2,r3
1000b528:	88c7883a 	add	r3,r17,r3
1000b52c:	4823883a 	mov	r17,r9
1000b530:	1880202c 	andhi	r2,r3,128
1000b534:	1000d026 	beq	r2,zero,1000b878 <__subdf3+0x5c8>
1000b538:	84000044 	addi	r16,r16,1
1000b53c:	0081ffc4 	movi	r2,2047
1000b540:	8080fe26 	beq	r16,r2,1000b93c <__subdf3+0x68c>
1000b544:	00bfe034 	movhi	r2,65408
1000b548:	10bfffc4 	addi	r2,r2,-1
1000b54c:	1886703a 	and	r3,r3,r2
1000b550:	880ad07a 	srli	r5,r17,1
1000b554:	180497fa 	slli	r2,r3,31
1000b558:	8900004c 	andi	r4,r17,1
1000b55c:	2922b03a 	or	r17,r5,r4
1000b560:	1806d07a 	srli	r3,r3,1
1000b564:	1462b03a 	or	r17,r2,r17
1000b568:	3825883a 	mov	r18,r7
1000b56c:	003f7106 	br	1000b334 <__alt_data_end+0xf800b334>
1000b570:	2984b03a 	or	r2,r5,r6
1000b574:	103f6826 	beq	r2,zero,1000b318 <__alt_data_end+0xf800b318>
1000b578:	39c03fcc 	andi	r7,r7,255
1000b57c:	003f6706 	br	1000b31c <__alt_data_end+0xf800b31c>
1000b580:	4086b03a 	or	r3,r8,r2
1000b584:	18015226 	beq	r3,zero,1000bad0 <__subdf3+0x820>
1000b588:	00c00434 	movhi	r3,16
1000b58c:	41400234 	orhi	r5,r8,8
1000b590:	18ffffc4 	addi	r3,r3,-1
1000b594:	28ca703a 	and	r5,r5,r3
1000b598:	003f7e06 	br	1000b394 <__alt_data_end+0xf800b394>
1000b59c:	10bfffc4 	addi	r2,r2,-1
1000b5a0:	1000491e 	bne	r2,zero,1000b6c8 <__subdf3+0x418>
1000b5a4:	898fc83a 	sub	r7,r17,r6
1000b5a8:	89e3803a 	cmpltu	r17,r17,r7
1000b5ac:	1947c83a 	sub	r3,r3,r5
1000b5b0:	1c47c83a 	sub	r3,r3,r17
1000b5b4:	3823883a 	mov	r17,r7
1000b5b8:	003f9b06 	br	1000b428 <__alt_data_end+0xf800b428>
1000b5bc:	2988b03a 	or	r4,r5,r6
1000b5c0:	203f5c26 	beq	r4,zero,1000b334 <__alt_data_end+0xf800b334>
1000b5c4:	10bfffc4 	addi	r2,r2,-1
1000b5c8:	1000931e 	bne	r2,zero,1000b818 <__subdf3+0x568>
1000b5cc:	898d883a 	add	r6,r17,r6
1000b5d0:	3463803a 	cmpltu	r17,r6,r17
1000b5d4:	1947883a 	add	r3,r3,r5
1000b5d8:	88c7883a 	add	r3,r17,r3
1000b5dc:	3023883a 	mov	r17,r6
1000b5e0:	003fd306 	br	1000b530 <__alt_data_end+0xf800b530>
1000b5e4:	1000541e 	bne	r2,zero,1000b738 <__subdf3+0x488>
1000b5e8:	80800044 	addi	r2,r16,1
1000b5ec:	1081ffcc 	andi	r2,r2,2047
1000b5f0:	01000044 	movi	r4,1
1000b5f4:	2080a20e 	bge	r4,r2,1000b880 <__subdf3+0x5d0>
1000b5f8:	8989c83a 	sub	r4,r17,r6
1000b5fc:	8905803a 	cmpltu	r2,r17,r4
1000b600:	1967c83a 	sub	r19,r3,r5
1000b604:	98a7c83a 	sub	r19,r19,r2
1000b608:	9880202c 	andhi	r2,r19,128
1000b60c:	10006326 	beq	r2,zero,1000b79c <__subdf3+0x4ec>
1000b610:	3463c83a 	sub	r17,r6,r17
1000b614:	28c7c83a 	sub	r3,r5,r3
1000b618:	344d803a 	cmpltu	r6,r6,r17
1000b61c:	19a7c83a 	sub	r19,r3,r6
1000b620:	3825883a 	mov	r18,r7
1000b624:	983f861e 	bne	r19,zero,1000b440 <__alt_data_end+0xf800b440>
1000b628:	8809883a 	mov	r4,r17
1000b62c:	000bdb00 	call	1000bdb0 <__clzsi2>
1000b630:	10800804 	addi	r2,r2,32
1000b634:	113ffe04 	addi	r4,r2,-8
1000b638:	00c007c4 	movi	r3,31
1000b63c:	193f850e 	bge	r3,r4,1000b454 <__alt_data_end+0xf800b454>
1000b640:	10bff604 	addi	r2,r2,-40
1000b644:	8884983a 	sll	r2,r17,r2
1000b648:	0023883a 	mov	r17,zero
1000b64c:	243f880e 	bge	r4,r16,1000b470 <__alt_data_end+0xf800b470>
1000b650:	00ffe034 	movhi	r3,65408
1000b654:	18ffffc4 	addi	r3,r3,-1
1000b658:	8121c83a 	sub	r16,r16,r4
1000b65c:	10c6703a 	and	r3,r2,r3
1000b660:	003f3406 	br	1000b334 <__alt_data_end+0xf800b334>
1000b664:	9100004c 	andi	r4,r18,1
1000b668:	000b883a 	mov	r5,zero
1000b66c:	0005883a 	mov	r2,zero
1000b670:	003f4806 	br	1000b394 <__alt_data_end+0xf800b394>
1000b674:	298cb03a 	or	r6,r5,r6
1000b678:	300cc03a 	cmpne	r6,r6,zero
1000b67c:	0005883a 	mov	r2,zero
1000b680:	003f6406 	br	1000b414 <__alt_data_end+0xf800b414>
1000b684:	10009a1e 	bne	r2,zero,1000b8f0 <__subdf3+0x640>
1000b688:	82400044 	addi	r9,r16,1
1000b68c:	4881ffcc 	andi	r2,r9,2047
1000b690:	02800044 	movi	r10,1
1000b694:	5080670e 	bge	r10,r2,1000b834 <__subdf3+0x584>
1000b698:	0081ffc4 	movi	r2,2047
1000b69c:	4880af26 	beq	r9,r2,1000b95c <__subdf3+0x6ac>
1000b6a0:	898d883a 	add	r6,r17,r6
1000b6a4:	1945883a 	add	r2,r3,r5
1000b6a8:	3447803a 	cmpltu	r3,r6,r17
1000b6ac:	1887883a 	add	r3,r3,r2
1000b6b0:	182297fa 	slli	r17,r3,31
1000b6b4:	300cd07a 	srli	r6,r6,1
1000b6b8:	1806d07a 	srli	r3,r3,1
1000b6bc:	4821883a 	mov	r16,r9
1000b6c0:	89a2b03a 	or	r17,r17,r6
1000b6c4:	003f1b06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b6c8:	0101ffc4 	movi	r4,2047
1000b6cc:	813f441e 	bne	r16,r4,1000b3e0 <__alt_data_end+0xf800b3e0>
1000b6d0:	003f1806 	br	1000b334 <__alt_data_end+0xf800b334>
1000b6d4:	843ff844 	addi	r16,r16,-31
1000b6d8:	01400804 	movi	r5,32
1000b6dc:	1408d83a 	srl	r4,r2,r16
1000b6e0:	19405026 	beq	r3,r5,1000b824 <__subdf3+0x574>
1000b6e4:	01401004 	movi	r5,64
1000b6e8:	28c7c83a 	sub	r3,r5,r3
1000b6ec:	10c4983a 	sll	r2,r2,r3
1000b6f0:	88a2b03a 	or	r17,r17,r2
1000b6f4:	8822c03a 	cmpne	r17,r17,zero
1000b6f8:	2462b03a 	or	r17,r4,r17
1000b6fc:	0007883a 	mov	r3,zero
1000b700:	0021883a 	mov	r16,zero
1000b704:	003f6d06 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000b708:	11fff804 	addi	r7,r2,-32
1000b70c:	01000804 	movi	r4,32
1000b710:	29ced83a 	srl	r7,r5,r7
1000b714:	11004526 	beq	r2,r4,1000b82c <__subdf3+0x57c>
1000b718:	01001004 	movi	r4,64
1000b71c:	2089c83a 	sub	r4,r4,r2
1000b720:	2904983a 	sll	r2,r5,r4
1000b724:	118cb03a 	or	r6,r2,r6
1000b728:	300cc03a 	cmpne	r6,r6,zero
1000b72c:	398cb03a 	or	r6,r7,r6
1000b730:	0005883a 	mov	r2,zero
1000b734:	003f3706 	br	1000b414 <__alt_data_end+0xf800b414>
1000b738:	80002a26 	beq	r16,zero,1000b7e4 <__subdf3+0x534>
1000b73c:	0101ffc4 	movi	r4,2047
1000b740:	49006626 	beq	r9,r4,1000b8dc <__subdf3+0x62c>
1000b744:	0085c83a 	sub	r2,zero,r2
1000b748:	18c02034 	orhi	r3,r3,128
1000b74c:	01000e04 	movi	r4,56
1000b750:	20807e16 	blt	r4,r2,1000b94c <__subdf3+0x69c>
1000b754:	010007c4 	movi	r4,31
1000b758:	2080e716 	blt	r4,r2,1000baf8 <__subdf3+0x848>
1000b75c:	01000804 	movi	r4,32
1000b760:	2089c83a 	sub	r4,r4,r2
1000b764:	1914983a 	sll	r10,r3,r4
1000b768:	8890d83a 	srl	r8,r17,r2
1000b76c:	8908983a 	sll	r4,r17,r4
1000b770:	1884d83a 	srl	r2,r3,r2
1000b774:	5222b03a 	or	r17,r10,r8
1000b778:	2006c03a 	cmpne	r3,r4,zero
1000b77c:	88e2b03a 	or	r17,r17,r3
1000b780:	3463c83a 	sub	r17,r6,r17
1000b784:	2885c83a 	sub	r2,r5,r2
1000b788:	344d803a 	cmpltu	r6,r6,r17
1000b78c:	1187c83a 	sub	r3,r2,r6
1000b790:	4821883a 	mov	r16,r9
1000b794:	3825883a 	mov	r18,r7
1000b798:	003f2306 	br	1000b428 <__alt_data_end+0xf800b428>
1000b79c:	24d0b03a 	or	r8,r4,r19
1000b7a0:	40001b1e 	bne	r8,zero,1000b810 <__subdf3+0x560>
1000b7a4:	0005883a 	mov	r2,zero
1000b7a8:	0009883a 	mov	r4,zero
1000b7ac:	0021883a 	mov	r16,zero
1000b7b0:	003f4906 	br	1000b4d8 <__alt_data_end+0xf800b4d8>
1000b7b4:	010007c4 	movi	r4,31
1000b7b8:	20803a16 	blt	r4,r2,1000b8a4 <__subdf3+0x5f4>
1000b7bc:	01000804 	movi	r4,32
1000b7c0:	2089c83a 	sub	r4,r4,r2
1000b7c4:	2912983a 	sll	r9,r5,r4
1000b7c8:	3090d83a 	srl	r8,r6,r2
1000b7cc:	3108983a 	sll	r4,r6,r4
1000b7d0:	2884d83a 	srl	r2,r5,r2
1000b7d4:	4a12b03a 	or	r9,r9,r8
1000b7d8:	2008c03a 	cmpne	r4,r4,zero
1000b7dc:	4912b03a 	or	r9,r9,r4
1000b7e0:	003f4e06 	br	1000b51c <__alt_data_end+0xf800b51c>
1000b7e4:	1c48b03a 	or	r4,r3,r17
1000b7e8:	20003c26 	beq	r4,zero,1000b8dc <__subdf3+0x62c>
1000b7ec:	0084303a 	nor	r2,zero,r2
1000b7f0:	1000381e 	bne	r2,zero,1000b8d4 <__subdf3+0x624>
1000b7f4:	3463c83a 	sub	r17,r6,r17
1000b7f8:	28c5c83a 	sub	r2,r5,r3
1000b7fc:	344d803a 	cmpltu	r6,r6,r17
1000b800:	1187c83a 	sub	r3,r2,r6
1000b804:	4821883a 	mov	r16,r9
1000b808:	3825883a 	mov	r18,r7
1000b80c:	003f0606 	br	1000b428 <__alt_data_end+0xf800b428>
1000b810:	2023883a 	mov	r17,r4
1000b814:	003f0906 	br	1000b43c <__alt_data_end+0xf800b43c>
1000b818:	0101ffc4 	movi	r4,2047
1000b81c:	813f3a1e 	bne	r16,r4,1000b508 <__alt_data_end+0xf800b508>
1000b820:	003ec406 	br	1000b334 <__alt_data_end+0xf800b334>
1000b824:	0005883a 	mov	r2,zero
1000b828:	003fb106 	br	1000b6f0 <__alt_data_end+0xf800b6f0>
1000b82c:	0005883a 	mov	r2,zero
1000b830:	003fbc06 	br	1000b724 <__alt_data_end+0xf800b724>
1000b834:	1c44b03a 	or	r2,r3,r17
1000b838:	80008e1e 	bne	r16,zero,1000ba74 <__subdf3+0x7c4>
1000b83c:	1000c826 	beq	r2,zero,1000bb60 <__subdf3+0x8b0>
1000b840:	2984b03a 	or	r2,r5,r6
1000b844:	103ebb26 	beq	r2,zero,1000b334 <__alt_data_end+0xf800b334>
1000b848:	8989883a 	add	r4,r17,r6
1000b84c:	1945883a 	add	r2,r3,r5
1000b850:	2447803a 	cmpltu	r3,r4,r17
1000b854:	1887883a 	add	r3,r3,r2
1000b858:	1880202c 	andhi	r2,r3,128
1000b85c:	2023883a 	mov	r17,r4
1000b860:	103f1626 	beq	r2,zero,1000b4bc <__alt_data_end+0xf800b4bc>
1000b864:	00bfe034 	movhi	r2,65408
1000b868:	10bfffc4 	addi	r2,r2,-1
1000b86c:	5021883a 	mov	r16,r10
1000b870:	1886703a 	and	r3,r3,r2
1000b874:	003eaf06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b878:	3825883a 	mov	r18,r7
1000b87c:	003f0f06 	br	1000b4bc <__alt_data_end+0xf800b4bc>
1000b880:	1c44b03a 	or	r2,r3,r17
1000b884:	8000251e 	bne	r16,zero,1000b91c <__subdf3+0x66c>
1000b888:	1000661e 	bne	r2,zero,1000ba24 <__subdf3+0x774>
1000b88c:	2990b03a 	or	r8,r5,r6
1000b890:	40009626 	beq	r8,zero,1000baec <__subdf3+0x83c>
1000b894:	2807883a 	mov	r3,r5
1000b898:	3023883a 	mov	r17,r6
1000b89c:	3825883a 	mov	r18,r7
1000b8a0:	003ea406 	br	1000b334 <__alt_data_end+0xf800b334>
1000b8a4:	127ff804 	addi	r9,r2,-32
1000b8a8:	01000804 	movi	r4,32
1000b8ac:	2a52d83a 	srl	r9,r5,r9
1000b8b0:	11008c26 	beq	r2,r4,1000bae4 <__subdf3+0x834>
1000b8b4:	01001004 	movi	r4,64
1000b8b8:	2085c83a 	sub	r2,r4,r2
1000b8bc:	2884983a 	sll	r2,r5,r2
1000b8c0:	118cb03a 	or	r6,r2,r6
1000b8c4:	300cc03a 	cmpne	r6,r6,zero
1000b8c8:	4992b03a 	or	r9,r9,r6
1000b8cc:	0005883a 	mov	r2,zero
1000b8d0:	003f1206 	br	1000b51c <__alt_data_end+0xf800b51c>
1000b8d4:	0101ffc4 	movi	r4,2047
1000b8d8:	493f9c1e 	bne	r9,r4,1000b74c <__alt_data_end+0xf800b74c>
1000b8dc:	2807883a 	mov	r3,r5
1000b8e0:	3023883a 	mov	r17,r6
1000b8e4:	4821883a 	mov	r16,r9
1000b8e8:	3825883a 	mov	r18,r7
1000b8ec:	003e9106 	br	1000b334 <__alt_data_end+0xf800b334>
1000b8f0:	80001f1e 	bne	r16,zero,1000b970 <__subdf3+0x6c0>
1000b8f4:	1c48b03a 	or	r4,r3,r17
1000b8f8:	20005a26 	beq	r4,zero,1000ba64 <__subdf3+0x7b4>
1000b8fc:	0084303a 	nor	r2,zero,r2
1000b900:	1000561e 	bne	r2,zero,1000ba5c <__subdf3+0x7ac>
1000b904:	89a3883a 	add	r17,r17,r6
1000b908:	1945883a 	add	r2,r3,r5
1000b90c:	898d803a 	cmpltu	r6,r17,r6
1000b910:	3087883a 	add	r3,r6,r2
1000b914:	4821883a 	mov	r16,r9
1000b918:	003f0506 	br	1000b530 <__alt_data_end+0xf800b530>
1000b91c:	10002b1e 	bne	r2,zero,1000b9cc <__subdf3+0x71c>
1000b920:	2984b03a 	or	r2,r5,r6
1000b924:	10008026 	beq	r2,zero,1000bb28 <__subdf3+0x878>
1000b928:	2807883a 	mov	r3,r5
1000b92c:	3023883a 	mov	r17,r6
1000b930:	3825883a 	mov	r18,r7
1000b934:	0401ffc4 	movi	r16,2047
1000b938:	003e7e06 	br	1000b334 <__alt_data_end+0xf800b334>
1000b93c:	3809883a 	mov	r4,r7
1000b940:	0011883a 	mov	r8,zero
1000b944:	0005883a 	mov	r2,zero
1000b948:	003ee306 	br	1000b4d8 <__alt_data_end+0xf800b4d8>
1000b94c:	1c62b03a 	or	r17,r3,r17
1000b950:	8822c03a 	cmpne	r17,r17,zero
1000b954:	0005883a 	mov	r2,zero
1000b958:	003f8906 	br	1000b780 <__alt_data_end+0xf800b780>
1000b95c:	3809883a 	mov	r4,r7
1000b960:	4821883a 	mov	r16,r9
1000b964:	0011883a 	mov	r8,zero
1000b968:	0005883a 	mov	r2,zero
1000b96c:	003eda06 	br	1000b4d8 <__alt_data_end+0xf800b4d8>
1000b970:	0101ffc4 	movi	r4,2047
1000b974:	49003b26 	beq	r9,r4,1000ba64 <__subdf3+0x7b4>
1000b978:	0085c83a 	sub	r2,zero,r2
1000b97c:	18c02034 	orhi	r3,r3,128
1000b980:	01000e04 	movi	r4,56
1000b984:	20806e16 	blt	r4,r2,1000bb40 <__subdf3+0x890>
1000b988:	010007c4 	movi	r4,31
1000b98c:	20807716 	blt	r4,r2,1000bb6c <__subdf3+0x8bc>
1000b990:	01000804 	movi	r4,32
1000b994:	2089c83a 	sub	r4,r4,r2
1000b998:	1914983a 	sll	r10,r3,r4
1000b99c:	8890d83a 	srl	r8,r17,r2
1000b9a0:	8908983a 	sll	r4,r17,r4
1000b9a4:	1884d83a 	srl	r2,r3,r2
1000b9a8:	5222b03a 	or	r17,r10,r8
1000b9ac:	2006c03a 	cmpne	r3,r4,zero
1000b9b0:	88e2b03a 	or	r17,r17,r3
1000b9b4:	89a3883a 	add	r17,r17,r6
1000b9b8:	1145883a 	add	r2,r2,r5
1000b9bc:	898d803a 	cmpltu	r6,r17,r6
1000b9c0:	3087883a 	add	r3,r6,r2
1000b9c4:	4821883a 	mov	r16,r9
1000b9c8:	003ed906 	br	1000b530 <__alt_data_end+0xf800b530>
1000b9cc:	2984b03a 	or	r2,r5,r6
1000b9d0:	10004226 	beq	r2,zero,1000badc <__subdf3+0x82c>
1000b9d4:	1808d0fa 	srli	r4,r3,3
1000b9d8:	8822d0fa 	srli	r17,r17,3
1000b9dc:	1806977a 	slli	r3,r3,29
1000b9e0:	2080022c 	andhi	r2,r4,8
1000b9e4:	1c62b03a 	or	r17,r3,r17
1000b9e8:	10000826 	beq	r2,zero,1000ba0c <__subdf3+0x75c>
1000b9ec:	2812d0fa 	srli	r9,r5,3
1000b9f0:	4880022c 	andhi	r2,r9,8
1000b9f4:	1000051e 	bne	r2,zero,1000ba0c <__subdf3+0x75c>
1000b9f8:	300cd0fa 	srli	r6,r6,3
1000b9fc:	2804977a 	slli	r2,r5,29
1000ba00:	4809883a 	mov	r4,r9
1000ba04:	3825883a 	mov	r18,r7
1000ba08:	11a2b03a 	or	r17,r2,r6
1000ba0c:	8806d77a 	srli	r3,r17,29
1000ba10:	200890fa 	slli	r4,r4,3
1000ba14:	882290fa 	slli	r17,r17,3
1000ba18:	0401ffc4 	movi	r16,2047
1000ba1c:	1906b03a 	or	r3,r3,r4
1000ba20:	003e4406 	br	1000b334 <__alt_data_end+0xf800b334>
1000ba24:	2984b03a 	or	r2,r5,r6
1000ba28:	103e4226 	beq	r2,zero,1000b334 <__alt_data_end+0xf800b334>
1000ba2c:	8989c83a 	sub	r4,r17,r6
1000ba30:	8911803a 	cmpltu	r8,r17,r4
1000ba34:	1945c83a 	sub	r2,r3,r5
1000ba38:	1205c83a 	sub	r2,r2,r8
1000ba3c:	1200202c 	andhi	r8,r2,128
1000ba40:	403e9a26 	beq	r8,zero,1000b4ac <__alt_data_end+0xf800b4ac>
1000ba44:	3463c83a 	sub	r17,r6,r17
1000ba48:	28c5c83a 	sub	r2,r5,r3
1000ba4c:	344d803a 	cmpltu	r6,r6,r17
1000ba50:	1187c83a 	sub	r3,r2,r6
1000ba54:	3825883a 	mov	r18,r7
1000ba58:	003e3606 	br	1000b334 <__alt_data_end+0xf800b334>
1000ba5c:	0101ffc4 	movi	r4,2047
1000ba60:	493fc71e 	bne	r9,r4,1000b980 <__alt_data_end+0xf800b980>
1000ba64:	2807883a 	mov	r3,r5
1000ba68:	3023883a 	mov	r17,r6
1000ba6c:	4821883a 	mov	r16,r9
1000ba70:	003e3006 	br	1000b334 <__alt_data_end+0xf800b334>
1000ba74:	10003626 	beq	r2,zero,1000bb50 <__subdf3+0x8a0>
1000ba78:	2984b03a 	or	r2,r5,r6
1000ba7c:	10001726 	beq	r2,zero,1000badc <__subdf3+0x82c>
1000ba80:	1808d0fa 	srli	r4,r3,3
1000ba84:	8822d0fa 	srli	r17,r17,3
1000ba88:	1806977a 	slli	r3,r3,29
1000ba8c:	2080022c 	andhi	r2,r4,8
1000ba90:	1c62b03a 	or	r17,r3,r17
1000ba94:	10000726 	beq	r2,zero,1000bab4 <__subdf3+0x804>
1000ba98:	2812d0fa 	srli	r9,r5,3
1000ba9c:	4880022c 	andhi	r2,r9,8
1000baa0:	1000041e 	bne	r2,zero,1000bab4 <__subdf3+0x804>
1000baa4:	300cd0fa 	srli	r6,r6,3
1000baa8:	2804977a 	slli	r2,r5,29
1000baac:	4809883a 	mov	r4,r9
1000bab0:	11a2b03a 	or	r17,r2,r6
1000bab4:	8806d77a 	srli	r3,r17,29
1000bab8:	200890fa 	slli	r4,r4,3
1000babc:	882290fa 	slli	r17,r17,3
1000bac0:	3825883a 	mov	r18,r7
1000bac4:	1906b03a 	or	r3,r3,r4
1000bac8:	0401ffc4 	movi	r16,2047
1000bacc:	003e1906 	br	1000b334 <__alt_data_end+0xf800b334>
1000bad0:	000b883a 	mov	r5,zero
1000bad4:	0005883a 	mov	r2,zero
1000bad8:	003e2e06 	br	1000b394 <__alt_data_end+0xf800b394>
1000badc:	0401ffc4 	movi	r16,2047
1000bae0:	003e1406 	br	1000b334 <__alt_data_end+0xf800b334>
1000bae4:	0005883a 	mov	r2,zero
1000bae8:	003f7506 	br	1000b8c0 <__alt_data_end+0xf800b8c0>
1000baec:	0005883a 	mov	r2,zero
1000baf0:	0009883a 	mov	r4,zero
1000baf4:	003e7806 	br	1000b4d8 <__alt_data_end+0xf800b4d8>
1000baf8:	123ff804 	addi	r8,r2,-32
1000bafc:	01000804 	movi	r4,32
1000bb00:	1a10d83a 	srl	r8,r3,r8
1000bb04:	11002526 	beq	r2,r4,1000bb9c <__subdf3+0x8ec>
1000bb08:	01001004 	movi	r4,64
1000bb0c:	2085c83a 	sub	r2,r4,r2
1000bb10:	1884983a 	sll	r2,r3,r2
1000bb14:	1444b03a 	or	r2,r2,r17
1000bb18:	1004c03a 	cmpne	r2,r2,zero
1000bb1c:	40a2b03a 	or	r17,r8,r2
1000bb20:	0005883a 	mov	r2,zero
1000bb24:	003f1606 	br	1000b780 <__alt_data_end+0xf800b780>
1000bb28:	02000434 	movhi	r8,16
1000bb2c:	0009883a 	mov	r4,zero
1000bb30:	423fffc4 	addi	r8,r8,-1
1000bb34:	00bfffc4 	movi	r2,-1
1000bb38:	0401ffc4 	movi	r16,2047
1000bb3c:	003e6606 	br	1000b4d8 <__alt_data_end+0xf800b4d8>
1000bb40:	1c62b03a 	or	r17,r3,r17
1000bb44:	8822c03a 	cmpne	r17,r17,zero
1000bb48:	0005883a 	mov	r2,zero
1000bb4c:	003f9906 	br	1000b9b4 <__alt_data_end+0xf800b9b4>
1000bb50:	2807883a 	mov	r3,r5
1000bb54:	3023883a 	mov	r17,r6
1000bb58:	0401ffc4 	movi	r16,2047
1000bb5c:	003df506 	br	1000b334 <__alt_data_end+0xf800b334>
1000bb60:	2807883a 	mov	r3,r5
1000bb64:	3023883a 	mov	r17,r6
1000bb68:	003df206 	br	1000b334 <__alt_data_end+0xf800b334>
1000bb6c:	123ff804 	addi	r8,r2,-32
1000bb70:	01000804 	movi	r4,32
1000bb74:	1a10d83a 	srl	r8,r3,r8
1000bb78:	11000a26 	beq	r2,r4,1000bba4 <__subdf3+0x8f4>
1000bb7c:	01001004 	movi	r4,64
1000bb80:	2085c83a 	sub	r2,r4,r2
1000bb84:	1884983a 	sll	r2,r3,r2
1000bb88:	1444b03a 	or	r2,r2,r17
1000bb8c:	1004c03a 	cmpne	r2,r2,zero
1000bb90:	40a2b03a 	or	r17,r8,r2
1000bb94:	0005883a 	mov	r2,zero
1000bb98:	003f8606 	br	1000b9b4 <__alt_data_end+0xf800b9b4>
1000bb9c:	0005883a 	mov	r2,zero
1000bba0:	003fdc06 	br	1000bb14 <__alt_data_end+0xf800bb14>
1000bba4:	0005883a 	mov	r2,zero
1000bba8:	003ff706 	br	1000bb88 <__alt_data_end+0xf800bb88>

1000bbac <__fixdfsi>:
1000bbac:	280cd53a 	srli	r6,r5,20
1000bbb0:	00c00434 	movhi	r3,16
1000bbb4:	18ffffc4 	addi	r3,r3,-1
1000bbb8:	3181ffcc 	andi	r6,r6,2047
1000bbbc:	01c0ff84 	movi	r7,1022
1000bbc0:	28c6703a 	and	r3,r5,r3
1000bbc4:	280ad7fa 	srli	r5,r5,31
1000bbc8:	3980120e 	bge	r7,r6,1000bc14 <__fixdfsi+0x68>
1000bbcc:	00810744 	movi	r2,1053
1000bbd0:	11800c16 	blt	r2,r6,1000bc04 <__fixdfsi+0x58>
1000bbd4:	00810cc4 	movi	r2,1075
1000bbd8:	1185c83a 	sub	r2,r2,r6
1000bbdc:	01c007c4 	movi	r7,31
1000bbe0:	18c00434 	orhi	r3,r3,16
1000bbe4:	38800d16 	blt	r7,r2,1000bc1c <__fixdfsi+0x70>
1000bbe8:	31befb44 	addi	r6,r6,-1043
1000bbec:	2084d83a 	srl	r2,r4,r2
1000bbf0:	1986983a 	sll	r3,r3,r6
1000bbf4:	1884b03a 	or	r2,r3,r2
1000bbf8:	28000726 	beq	r5,zero,1000bc18 <__fixdfsi+0x6c>
1000bbfc:	0085c83a 	sub	r2,zero,r2
1000bc00:	f800283a 	ret
1000bc04:	00a00034 	movhi	r2,32768
1000bc08:	10bfffc4 	addi	r2,r2,-1
1000bc0c:	2885883a 	add	r2,r5,r2
1000bc10:	f800283a 	ret
1000bc14:	0005883a 	mov	r2,zero
1000bc18:	f800283a 	ret
1000bc1c:	008104c4 	movi	r2,1043
1000bc20:	1185c83a 	sub	r2,r2,r6
1000bc24:	1884d83a 	srl	r2,r3,r2
1000bc28:	003ff306 	br	1000bbf8 <__alt_data_end+0xf800bbf8>

1000bc2c <__floatsidf>:
1000bc2c:	defffd04 	addi	sp,sp,-12
1000bc30:	dfc00215 	stw	ra,8(sp)
1000bc34:	dc400115 	stw	r17,4(sp)
1000bc38:	dc000015 	stw	r16,0(sp)
1000bc3c:	20002b26 	beq	r4,zero,1000bcec <__floatsidf+0xc0>
1000bc40:	2023883a 	mov	r17,r4
1000bc44:	2020d7fa 	srli	r16,r4,31
1000bc48:	20002d16 	blt	r4,zero,1000bd00 <__floatsidf+0xd4>
1000bc4c:	8809883a 	mov	r4,r17
1000bc50:	000bdb00 	call	1000bdb0 <__clzsi2>
1000bc54:	01410784 	movi	r5,1054
1000bc58:	288bc83a 	sub	r5,r5,r2
1000bc5c:	01010cc4 	movi	r4,1075
1000bc60:	2149c83a 	sub	r4,r4,r5
1000bc64:	00c007c4 	movi	r3,31
1000bc68:	1900160e 	bge	r3,r4,1000bcc4 <__floatsidf+0x98>
1000bc6c:	00c104c4 	movi	r3,1043
1000bc70:	1947c83a 	sub	r3,r3,r5
1000bc74:	88c6983a 	sll	r3,r17,r3
1000bc78:	00800434 	movhi	r2,16
1000bc7c:	10bfffc4 	addi	r2,r2,-1
1000bc80:	1886703a 	and	r3,r3,r2
1000bc84:	2941ffcc 	andi	r5,r5,2047
1000bc88:	800d883a 	mov	r6,r16
1000bc8c:	0005883a 	mov	r2,zero
1000bc90:	280a953a 	slli	r5,r5,20
1000bc94:	31803fcc 	andi	r6,r6,255
1000bc98:	01000434 	movhi	r4,16
1000bc9c:	300c97fa 	slli	r6,r6,31
1000bca0:	213fffc4 	addi	r4,r4,-1
1000bca4:	1906703a 	and	r3,r3,r4
1000bca8:	1946b03a 	or	r3,r3,r5
1000bcac:	1986b03a 	or	r3,r3,r6
1000bcb0:	dfc00217 	ldw	ra,8(sp)
1000bcb4:	dc400117 	ldw	r17,4(sp)
1000bcb8:	dc000017 	ldw	r16,0(sp)
1000bcbc:	dec00304 	addi	sp,sp,12
1000bcc0:	f800283a 	ret
1000bcc4:	00c002c4 	movi	r3,11
1000bcc8:	1887c83a 	sub	r3,r3,r2
1000bccc:	88c6d83a 	srl	r3,r17,r3
1000bcd0:	8904983a 	sll	r2,r17,r4
1000bcd4:	01000434 	movhi	r4,16
1000bcd8:	213fffc4 	addi	r4,r4,-1
1000bcdc:	2941ffcc 	andi	r5,r5,2047
1000bce0:	1906703a 	and	r3,r3,r4
1000bce4:	800d883a 	mov	r6,r16
1000bce8:	003fe906 	br	1000bc90 <__alt_data_end+0xf800bc90>
1000bcec:	000d883a 	mov	r6,zero
1000bcf0:	000b883a 	mov	r5,zero
1000bcf4:	0007883a 	mov	r3,zero
1000bcf8:	0005883a 	mov	r2,zero
1000bcfc:	003fe406 	br	1000bc90 <__alt_data_end+0xf800bc90>
1000bd00:	0123c83a 	sub	r17,zero,r4
1000bd04:	003fd106 	br	1000bc4c <__alt_data_end+0xf800bc4c>

1000bd08 <__floatunsidf>:
1000bd08:	defffe04 	addi	sp,sp,-8
1000bd0c:	dc000015 	stw	r16,0(sp)
1000bd10:	dfc00115 	stw	ra,4(sp)
1000bd14:	2021883a 	mov	r16,r4
1000bd18:	20002226 	beq	r4,zero,1000bda4 <__floatunsidf+0x9c>
1000bd1c:	000bdb00 	call	1000bdb0 <__clzsi2>
1000bd20:	01010784 	movi	r4,1054
1000bd24:	2089c83a 	sub	r4,r4,r2
1000bd28:	01810cc4 	movi	r6,1075
1000bd2c:	310dc83a 	sub	r6,r6,r4
1000bd30:	00c007c4 	movi	r3,31
1000bd34:	1980120e 	bge	r3,r6,1000bd80 <__floatunsidf+0x78>
1000bd38:	00c104c4 	movi	r3,1043
1000bd3c:	1907c83a 	sub	r3,r3,r4
1000bd40:	80ca983a 	sll	r5,r16,r3
1000bd44:	00800434 	movhi	r2,16
1000bd48:	10bfffc4 	addi	r2,r2,-1
1000bd4c:	2101ffcc 	andi	r4,r4,2047
1000bd50:	0021883a 	mov	r16,zero
1000bd54:	288a703a 	and	r5,r5,r2
1000bd58:	2008953a 	slli	r4,r4,20
1000bd5c:	00c00434 	movhi	r3,16
1000bd60:	18ffffc4 	addi	r3,r3,-1
1000bd64:	28c6703a 	and	r3,r5,r3
1000bd68:	8005883a 	mov	r2,r16
1000bd6c:	1906b03a 	or	r3,r3,r4
1000bd70:	dfc00117 	ldw	ra,4(sp)
1000bd74:	dc000017 	ldw	r16,0(sp)
1000bd78:	dec00204 	addi	sp,sp,8
1000bd7c:	f800283a 	ret
1000bd80:	00c002c4 	movi	r3,11
1000bd84:	188bc83a 	sub	r5,r3,r2
1000bd88:	814ad83a 	srl	r5,r16,r5
1000bd8c:	00c00434 	movhi	r3,16
1000bd90:	18ffffc4 	addi	r3,r3,-1
1000bd94:	81a0983a 	sll	r16,r16,r6
1000bd98:	2101ffcc 	andi	r4,r4,2047
1000bd9c:	28ca703a 	and	r5,r5,r3
1000bda0:	003fed06 	br	1000bd58 <__alt_data_end+0xf800bd58>
1000bda4:	0009883a 	mov	r4,zero
1000bda8:	000b883a 	mov	r5,zero
1000bdac:	003fea06 	br	1000bd58 <__alt_data_end+0xf800bd58>

1000bdb0 <__clzsi2>:
1000bdb0:	00bfffd4 	movui	r2,65535
1000bdb4:	11000536 	bltu	r2,r4,1000bdcc <__clzsi2+0x1c>
1000bdb8:	00803fc4 	movi	r2,255
1000bdbc:	11000f36 	bltu	r2,r4,1000bdfc <__clzsi2+0x4c>
1000bdc0:	00800804 	movi	r2,32
1000bdc4:	0007883a 	mov	r3,zero
1000bdc8:	00000506 	br	1000bde0 <__clzsi2+0x30>
1000bdcc:	00804034 	movhi	r2,256
1000bdd0:	10bfffc4 	addi	r2,r2,-1
1000bdd4:	11000c2e 	bgeu	r2,r4,1000be08 <__clzsi2+0x58>
1000bdd8:	00800204 	movi	r2,8
1000bddc:	00c00604 	movi	r3,24
1000bde0:	20c8d83a 	srl	r4,r4,r3
1000bde4:	00c40074 	movhi	r3,4097
1000bde8:	18f8b804 	addi	r3,r3,-7456
1000bdec:	1909883a 	add	r4,r3,r4
1000bdf0:	20c00003 	ldbu	r3,0(r4)
1000bdf4:	10c5c83a 	sub	r2,r2,r3
1000bdf8:	f800283a 	ret
1000bdfc:	00800604 	movi	r2,24
1000be00:	00c00204 	movi	r3,8
1000be04:	003ff606 	br	1000bde0 <__alt_data_end+0xf800bde0>
1000be08:	00800404 	movi	r2,16
1000be0c:	1007883a 	mov	r3,r2
1000be10:	003ff306 	br	1000bde0 <__alt_data_end+0xf800bde0>

1000be14 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000be14:	defffc04 	addi	sp,sp,-16
1000be18:	df000315 	stw	fp,12(sp)
1000be1c:	df000304 	addi	fp,sp,12
1000be20:	e13ffd15 	stw	r4,-12(fp)
1000be24:	e17ffe15 	stw	r5,-8(fp)
1000be28:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000be2c:	e0fffe17 	ldw	r3,-8(fp)
1000be30:	e0bffd17 	ldw	r2,-12(fp)
1000be34:	18800c26 	beq	r3,r2,1000be68 <alt_load_section+0x54>
  {
    while( to != end )
1000be38:	00000806 	br	1000be5c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000be3c:	e0bffe17 	ldw	r2,-8(fp)
1000be40:	10c00104 	addi	r3,r2,4
1000be44:	e0fffe15 	stw	r3,-8(fp)
1000be48:	e0fffd17 	ldw	r3,-12(fp)
1000be4c:	19000104 	addi	r4,r3,4
1000be50:	e13ffd15 	stw	r4,-12(fp)
1000be54:	18c00017 	ldw	r3,0(r3)
1000be58:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000be5c:	e0fffe17 	ldw	r3,-8(fp)
1000be60:	e0bfff17 	ldw	r2,-4(fp)
1000be64:	18bff51e 	bne	r3,r2,1000be3c <__alt_data_end+0xf800be3c>
    {
      *to++ = *from++;
    }
  }
}
1000be68:	0001883a 	nop
1000be6c:	e037883a 	mov	sp,fp
1000be70:	df000017 	ldw	fp,0(sp)
1000be74:	dec00104 	addi	sp,sp,4
1000be78:	f800283a 	ret

1000be7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000be7c:	defffe04 	addi	sp,sp,-8
1000be80:	dfc00115 	stw	ra,4(sp)
1000be84:	df000015 	stw	fp,0(sp)
1000be88:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000be8c:	01840074 	movhi	r6,4097
1000be90:	3180d604 	addi	r6,r6,856
1000be94:	01440074 	movhi	r5,4097
1000be98:	29790504 	addi	r5,r5,-7148
1000be9c:	01040074 	movhi	r4,4097
1000bea0:	2100d604 	addi	r4,r4,856
1000bea4:	000be140 	call	1000be14 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000bea8:	01840034 	movhi	r6,4096
1000beac:	31808c04 	addi	r6,r6,560
1000beb0:	01440034 	movhi	r5,4096
1000beb4:	29400804 	addi	r5,r5,32
1000beb8:	01040034 	movhi	r4,4096
1000bebc:	21000804 	addi	r4,r4,32
1000bec0:	000be140 	call	1000be14 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000bec4:	01840074 	movhi	r6,4097
1000bec8:	31b90504 	addi	r6,r6,-7148
1000becc:	01440074 	movhi	r5,4097
1000bed0:	29783104 	addi	r5,r5,-7996
1000bed4:	01040074 	movhi	r4,4097
1000bed8:	21383104 	addi	r4,r4,-7996
1000bedc:	000be140 	call	1000be14 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000bee0:	000cf5c0 	call	1000cf5c <alt_dcache_flush_all>
  alt_icache_flush_all();
1000bee4:	000d1480 	call	1000d148 <alt_icache_flush_all>
}
1000bee8:	0001883a 	nop
1000beec:	e037883a 	mov	sp,fp
1000bef0:	dfc00117 	ldw	ra,4(sp)
1000bef4:	df000017 	ldw	fp,0(sp)
1000bef8:	dec00204 	addi	sp,sp,8
1000befc:	f800283a 	ret

1000bf00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000bf00:	defffd04 	addi	sp,sp,-12
1000bf04:	dfc00215 	stw	ra,8(sp)
1000bf08:	df000115 	stw	fp,4(sp)
1000bf0c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000bf10:	0009883a 	mov	r4,zero
1000bf14:	000c0d80 	call	1000c0d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000bf18:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000bf1c:	000c1100 	call	1000c110 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000bf20:	01840074 	movhi	r6,4097
1000bf24:	31b8f804 	addi	r6,r6,-7200
1000bf28:	01440074 	movhi	r5,4097
1000bf2c:	2978f804 	addi	r5,r5,-7200
1000bf30:	01040074 	movhi	r4,4097
1000bf34:	2138f804 	addi	r4,r4,-7200
1000bf38:	000d4ec0 	call	1000d4ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000bf3c:	000d0880 	call	1000d088 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000bf40:	01040074 	movhi	r4,4097
1000bf44:	21343a04 	addi	r4,r4,-12056
1000bf48:	000dd300 	call	1000dd30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000bf4c:	d0a7ea17 	ldw	r2,-24664(gp)
1000bf50:	d0e7eb17 	ldw	r3,-24660(gp)
1000bf54:	d127ec17 	ldw	r4,-24656(gp)
1000bf58:	200d883a 	mov	r6,r4
1000bf5c:	180b883a 	mov	r5,r3
1000bf60:	1009883a 	mov	r4,r2
1000bf64:	000026c0 	call	1000026c <main>
1000bf68:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000bf6c:	01000044 	movi	r4,1
1000bf70:	000ce840 	call	1000ce84 <close>
  exit (result);
1000bf74:	e13fff17 	ldw	r4,-4(fp)
1000bf78:	000dd440 	call	1000dd44 <exit>

1000bf7c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000bf7c:	defffe04 	addi	sp,sp,-8
1000bf80:	df000115 	stw	fp,4(sp)
1000bf84:	df000104 	addi	fp,sp,4
1000bf88:	e13fff15 	stw	r4,-4(fp)
}
1000bf8c:	0001883a 	nop
1000bf90:	e037883a 	mov	sp,fp
1000bf94:	df000017 	ldw	fp,0(sp)
1000bf98:	dec00104 	addi	sp,sp,4
1000bf9c:	f800283a 	ret

1000bfa0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000bfa0:	defffe04 	addi	sp,sp,-8
1000bfa4:	df000115 	stw	fp,4(sp)
1000bfa8:	df000104 	addi	fp,sp,4
1000bfac:	e13fff15 	stw	r4,-4(fp)
}
1000bfb0:	0001883a 	nop
1000bfb4:	e037883a 	mov	sp,fp
1000bfb8:	df000017 	ldw	fp,0(sp)
1000bfbc:	dec00104 	addi	sp,sp,4
1000bfc0:	f800283a 	ret

1000bfc4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000bfc4:	defff904 	addi	sp,sp,-28
1000bfc8:	df000615 	stw	fp,24(sp)
1000bfcc:	df000604 	addi	fp,sp,24
1000bfd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000bfd4:	0005303a 	rdctl	r2,status
1000bfd8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000bfdc:	e0fffe17 	ldw	r3,-8(fp)
1000bfe0:	00bfff84 	movi	r2,-2
1000bfe4:	1884703a 	and	r2,r3,r2
1000bfe8:	1001703a 	wrctl	status,r2
  
  return context;
1000bfec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000bff0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000bff4:	d0a00817 	ldw	r2,-32736(gp)
1000bff8:	10c000c4 	addi	r3,r2,3
1000bffc:	00bfff04 	movi	r2,-4
1000c000:	1884703a 	and	r2,r3,r2
1000c004:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000c008:	d0e00817 	ldw	r3,-32736(gp)
1000c00c:	e0bfff17 	ldw	r2,-4(fp)
1000c010:	1887883a 	add	r3,r3,r2
1000c014:	00860034 	movhi	r2,6144
1000c018:	10800004 	addi	r2,r2,0
1000c01c:	10c0062e 	bgeu	r2,r3,1000c038 <sbrk+0x74>
1000c020:	e0bffb17 	ldw	r2,-20(fp)
1000c024:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000c028:	e0bffa17 	ldw	r2,-24(fp)
1000c02c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000c030:	00bfffc4 	movi	r2,-1
1000c034:	00000b06 	br	1000c064 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000c038:	d0a00817 	ldw	r2,-32736(gp)
1000c03c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000c040:	d0e00817 	ldw	r3,-32736(gp)
1000c044:	e0bfff17 	ldw	r2,-4(fp)
1000c048:	1885883a 	add	r2,r3,r2
1000c04c:	d0a00815 	stw	r2,-32736(gp)
1000c050:	e0bffb17 	ldw	r2,-20(fp)
1000c054:	e0bffc15 	stw	r2,-16(fp)
1000c058:	e0bffc17 	ldw	r2,-16(fp)
1000c05c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000c060:	e0bffd17 	ldw	r2,-12(fp)
} 
1000c064:	e037883a 	mov	sp,fp
1000c068:	df000017 	ldw	fp,0(sp)
1000c06c:	dec00104 	addi	sp,sp,4
1000c070:	f800283a 	ret

1000c074 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000c074:	defffd04 	addi	sp,sp,-12
1000c078:	dfc00215 	stw	ra,8(sp)
1000c07c:	df000115 	stw	fp,4(sp)
1000c080:	df000104 	addi	fp,sp,4
1000c084:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000c088:	e13fff17 	ldw	r4,-4(fp)
1000c08c:	000ccf00 	call	1000ccf0 <alt_busy_sleep>
}
1000c090:	e037883a 	mov	sp,fp
1000c094:	dfc00117 	ldw	ra,4(sp)
1000c098:	df000017 	ldw	fp,0(sp)
1000c09c:	dec00204 	addi	sp,sp,8
1000c0a0:	f800283a 	ret

1000c0a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000c0a4:	defffd04 	addi	sp,sp,-12
1000c0a8:	dfc00215 	stw	ra,8(sp)
1000c0ac:	df000115 	stw	fp,4(sp)
1000c0b0:	df000104 	addi	fp,sp,4
1000c0b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000c0b8:	d1600b04 	addi	r5,gp,-32724
1000c0bc:	e13fff17 	ldw	r4,-4(fp)
1000c0c0:	000cfe40 	call	1000cfe4 <alt_dev_llist_insert>
}
1000c0c4:	e037883a 	mov	sp,fp
1000c0c8:	dfc00117 	ldw	ra,4(sp)
1000c0cc:	df000017 	ldw	fp,0(sp)
1000c0d0:	dec00204 	addi	sp,sp,8
1000c0d4:	f800283a 	ret

1000c0d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000c0d8:	defffd04 	addi	sp,sp,-12
1000c0dc:	dfc00215 	stw	ra,8(sp)
1000c0e0:	df000115 	stw	fp,4(sp)
1000c0e4:	df000104 	addi	fp,sp,4
1000c0e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000c0ec:	000da140 	call	1000da14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000c0f0:	00800044 	movi	r2,1
1000c0f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000c0f8:	0001883a 	nop
1000c0fc:	e037883a 	mov	sp,fp
1000c100:	dfc00117 	ldw	ra,4(sp)
1000c104:	df000017 	ldw	fp,0(sp)
1000c108:	dec00204 	addi	sp,sp,8
1000c10c:	f800283a 	ret

1000c110 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000c110:	defffe04 	addi	sp,sp,-8
1000c114:	dfc00115 	stw	ra,4(sp)
1000c118:	df000015 	stw	fp,0(sp)
1000c11c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000c120:	01800144 	movi	r6,5
1000c124:	000b883a 	mov	r5,zero
1000c128:	01040074 	movhi	r4,4097
1000c12c:	213c4c04 	addi	r4,r4,-3792
1000c130:	000c2c00 	call	1000c2c0 <altera_avalon_jtag_uart_init>
1000c134:	01040074 	movhi	r4,4097
1000c138:	213c4204 	addi	r4,r4,-3832
1000c13c:	000c0a40 	call	1000c0a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000c140:	0001883a 	nop
}
1000c144:	0001883a 	nop
1000c148:	e037883a 	mov	sp,fp
1000c14c:	dfc00117 	ldw	ra,4(sp)
1000c150:	df000017 	ldw	fp,0(sp)
1000c154:	dec00204 	addi	sp,sp,8
1000c158:	f800283a 	ret

1000c15c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000c15c:	defffa04 	addi	sp,sp,-24
1000c160:	dfc00515 	stw	ra,20(sp)
1000c164:	df000415 	stw	fp,16(sp)
1000c168:	df000404 	addi	fp,sp,16
1000c16c:	e13ffd15 	stw	r4,-12(fp)
1000c170:	e17ffe15 	stw	r5,-8(fp)
1000c174:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000c178:	e0bffd17 	ldw	r2,-12(fp)
1000c17c:	10800017 	ldw	r2,0(r2)
1000c180:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000c184:	e0bffc17 	ldw	r2,-16(fp)
1000c188:	10c00a04 	addi	r3,r2,40
1000c18c:	e0bffd17 	ldw	r2,-12(fp)
1000c190:	10800217 	ldw	r2,8(r2)
1000c194:	100f883a 	mov	r7,r2
1000c198:	e1bfff17 	ldw	r6,-4(fp)
1000c19c:	e17ffe17 	ldw	r5,-8(fp)
1000c1a0:	1809883a 	mov	r4,r3
1000c1a4:	000c7840 	call	1000c784 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000c1a8:	e037883a 	mov	sp,fp
1000c1ac:	dfc00117 	ldw	ra,4(sp)
1000c1b0:	df000017 	ldw	fp,0(sp)
1000c1b4:	dec00204 	addi	sp,sp,8
1000c1b8:	f800283a 	ret

1000c1bc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000c1bc:	defffa04 	addi	sp,sp,-24
1000c1c0:	dfc00515 	stw	ra,20(sp)
1000c1c4:	df000415 	stw	fp,16(sp)
1000c1c8:	df000404 	addi	fp,sp,16
1000c1cc:	e13ffd15 	stw	r4,-12(fp)
1000c1d0:	e17ffe15 	stw	r5,-8(fp)
1000c1d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000c1d8:	e0bffd17 	ldw	r2,-12(fp)
1000c1dc:	10800017 	ldw	r2,0(r2)
1000c1e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000c1e4:	e0bffc17 	ldw	r2,-16(fp)
1000c1e8:	10c00a04 	addi	r3,r2,40
1000c1ec:	e0bffd17 	ldw	r2,-12(fp)
1000c1f0:	10800217 	ldw	r2,8(r2)
1000c1f4:	100f883a 	mov	r7,r2
1000c1f8:	e1bfff17 	ldw	r6,-4(fp)
1000c1fc:	e17ffe17 	ldw	r5,-8(fp)
1000c200:	1809883a 	mov	r4,r3
1000c204:	000c9a00 	call	1000c9a0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000c208:	e037883a 	mov	sp,fp
1000c20c:	dfc00117 	ldw	ra,4(sp)
1000c210:	df000017 	ldw	fp,0(sp)
1000c214:	dec00204 	addi	sp,sp,8
1000c218:	f800283a 	ret

1000c21c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000c21c:	defffc04 	addi	sp,sp,-16
1000c220:	dfc00315 	stw	ra,12(sp)
1000c224:	df000215 	stw	fp,8(sp)
1000c228:	df000204 	addi	fp,sp,8
1000c22c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000c230:	e0bfff17 	ldw	r2,-4(fp)
1000c234:	10800017 	ldw	r2,0(r2)
1000c238:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000c23c:	e0bffe17 	ldw	r2,-8(fp)
1000c240:	10c00a04 	addi	r3,r2,40
1000c244:	e0bfff17 	ldw	r2,-4(fp)
1000c248:	10800217 	ldw	r2,8(r2)
1000c24c:	100b883a 	mov	r5,r2
1000c250:	1809883a 	mov	r4,r3
1000c254:	000c62c0 	call	1000c62c <altera_avalon_jtag_uart_close>
}
1000c258:	e037883a 	mov	sp,fp
1000c25c:	dfc00117 	ldw	ra,4(sp)
1000c260:	df000017 	ldw	fp,0(sp)
1000c264:	dec00204 	addi	sp,sp,8
1000c268:	f800283a 	ret

1000c26c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000c26c:	defffa04 	addi	sp,sp,-24
1000c270:	dfc00515 	stw	ra,20(sp)
1000c274:	df000415 	stw	fp,16(sp)
1000c278:	df000404 	addi	fp,sp,16
1000c27c:	e13ffd15 	stw	r4,-12(fp)
1000c280:	e17ffe15 	stw	r5,-8(fp)
1000c284:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000c288:	e0bffd17 	ldw	r2,-12(fp)
1000c28c:	10800017 	ldw	r2,0(r2)
1000c290:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000c294:	e0bffc17 	ldw	r2,-16(fp)
1000c298:	10800a04 	addi	r2,r2,40
1000c29c:	e1bfff17 	ldw	r6,-4(fp)
1000c2a0:	e17ffe17 	ldw	r5,-8(fp)
1000c2a4:	1009883a 	mov	r4,r2
1000c2a8:	000c6940 	call	1000c694 <altera_avalon_jtag_uart_ioctl>
}
1000c2ac:	e037883a 	mov	sp,fp
1000c2b0:	dfc00117 	ldw	ra,4(sp)
1000c2b4:	df000017 	ldw	fp,0(sp)
1000c2b8:	dec00204 	addi	sp,sp,8
1000c2bc:	f800283a 	ret

1000c2c0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000c2c0:	defffa04 	addi	sp,sp,-24
1000c2c4:	dfc00515 	stw	ra,20(sp)
1000c2c8:	df000415 	stw	fp,16(sp)
1000c2cc:	df000404 	addi	fp,sp,16
1000c2d0:	e13ffd15 	stw	r4,-12(fp)
1000c2d4:	e17ffe15 	stw	r5,-8(fp)
1000c2d8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000c2dc:	e0bffd17 	ldw	r2,-12(fp)
1000c2e0:	00c00044 	movi	r3,1
1000c2e4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000c2e8:	e0bffd17 	ldw	r2,-12(fp)
1000c2ec:	10800017 	ldw	r2,0(r2)
1000c2f0:	10800104 	addi	r2,r2,4
1000c2f4:	1007883a 	mov	r3,r2
1000c2f8:	e0bffd17 	ldw	r2,-12(fp)
1000c2fc:	10800817 	ldw	r2,32(r2)
1000c300:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000c304:	e0bffe17 	ldw	r2,-8(fp)
1000c308:	e0ffff17 	ldw	r3,-4(fp)
1000c30c:	d8000015 	stw	zero,0(sp)
1000c310:	e1fffd17 	ldw	r7,-12(fp)
1000c314:	01840074 	movhi	r6,4097
1000c318:	31b0e004 	addi	r6,r6,-15488
1000c31c:	180b883a 	mov	r5,r3
1000c320:	1009883a 	mov	r4,r2
1000c324:	000d1680 	call	1000d168 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000c328:	e0bffd17 	ldw	r2,-12(fp)
1000c32c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000c330:	e0bffd17 	ldw	r2,-12(fp)
1000c334:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000c338:	d0e7ee17 	ldw	r3,-24648(gp)
1000c33c:	e1fffd17 	ldw	r7,-12(fp)
1000c340:	01840074 	movhi	r6,4097
1000c344:	31b16304 	addi	r6,r6,-14964
1000c348:	180b883a 	mov	r5,r3
1000c34c:	1009883a 	mov	r4,r2
1000c350:	000cbc40 	call	1000cbc4 <alt_alarm_start>
1000c354:	1000040e 	bge	r2,zero,1000c368 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000c358:	e0fffd17 	ldw	r3,-12(fp)
1000c35c:	00a00034 	movhi	r2,32768
1000c360:	10bfffc4 	addi	r2,r2,-1
1000c364:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000c368:	0001883a 	nop
1000c36c:	e037883a 	mov	sp,fp
1000c370:	dfc00117 	ldw	ra,4(sp)
1000c374:	df000017 	ldw	fp,0(sp)
1000c378:	dec00204 	addi	sp,sp,8
1000c37c:	f800283a 	ret

1000c380 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000c380:	defff804 	addi	sp,sp,-32
1000c384:	df000715 	stw	fp,28(sp)
1000c388:	df000704 	addi	fp,sp,28
1000c38c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000c390:	e0bfff17 	ldw	r2,-4(fp)
1000c394:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000c398:	e0bffb17 	ldw	r2,-20(fp)
1000c39c:	10800017 	ldw	r2,0(r2)
1000c3a0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000c3a4:	e0bffc17 	ldw	r2,-16(fp)
1000c3a8:	10800104 	addi	r2,r2,4
1000c3ac:	10800037 	ldwio	r2,0(r2)
1000c3b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000c3b4:	e0bffd17 	ldw	r2,-12(fp)
1000c3b8:	1080c00c 	andi	r2,r2,768
1000c3bc:	10006d26 	beq	r2,zero,1000c574 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000c3c0:	e0bffd17 	ldw	r2,-12(fp)
1000c3c4:	1080400c 	andi	r2,r2,256
1000c3c8:	10003526 	beq	r2,zero,1000c4a0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000c3cc:	00800074 	movhi	r2,1
1000c3d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c3d4:	e0bffb17 	ldw	r2,-20(fp)
1000c3d8:	10800a17 	ldw	r2,40(r2)
1000c3dc:	10800044 	addi	r2,r2,1
1000c3e0:	1081ffcc 	andi	r2,r2,2047
1000c3e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000c3e8:	e0bffb17 	ldw	r2,-20(fp)
1000c3ec:	10c00b17 	ldw	r3,44(r2)
1000c3f0:	e0bffe17 	ldw	r2,-8(fp)
1000c3f4:	18801526 	beq	r3,r2,1000c44c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000c3f8:	e0bffc17 	ldw	r2,-16(fp)
1000c3fc:	10800037 	ldwio	r2,0(r2)
1000c400:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000c404:	e0bff917 	ldw	r2,-28(fp)
1000c408:	10a0000c 	andi	r2,r2,32768
1000c40c:	10001126 	beq	r2,zero,1000c454 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000c410:	e0bffb17 	ldw	r2,-20(fp)
1000c414:	10800a17 	ldw	r2,40(r2)
1000c418:	e0fff917 	ldw	r3,-28(fp)
1000c41c:	1809883a 	mov	r4,r3
1000c420:	e0fffb17 	ldw	r3,-20(fp)
1000c424:	1885883a 	add	r2,r3,r2
1000c428:	10800e04 	addi	r2,r2,56
1000c42c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c430:	e0bffb17 	ldw	r2,-20(fp)
1000c434:	10800a17 	ldw	r2,40(r2)
1000c438:	10800044 	addi	r2,r2,1
1000c43c:	10c1ffcc 	andi	r3,r2,2047
1000c440:	e0bffb17 	ldw	r2,-20(fp)
1000c444:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000c448:	003fe206 	br	1000c3d4 <__alt_data_end+0xf800c3d4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000c44c:	0001883a 	nop
1000c450:	00000106 	br	1000c458 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000c454:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000c458:	e0bff917 	ldw	r2,-28(fp)
1000c45c:	10bfffec 	andhi	r2,r2,65535
1000c460:	10000f26 	beq	r2,zero,1000c4a0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000c464:	e0bffb17 	ldw	r2,-20(fp)
1000c468:	10c00817 	ldw	r3,32(r2)
1000c46c:	00bfff84 	movi	r2,-2
1000c470:	1886703a 	and	r3,r3,r2
1000c474:	e0bffb17 	ldw	r2,-20(fp)
1000c478:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000c47c:	e0bffc17 	ldw	r2,-16(fp)
1000c480:	10800104 	addi	r2,r2,4
1000c484:	1007883a 	mov	r3,r2
1000c488:	e0bffb17 	ldw	r2,-20(fp)
1000c48c:	10800817 	ldw	r2,32(r2)
1000c490:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000c494:	e0bffc17 	ldw	r2,-16(fp)
1000c498:	10800104 	addi	r2,r2,4
1000c49c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000c4a0:	e0bffd17 	ldw	r2,-12(fp)
1000c4a4:	1080800c 	andi	r2,r2,512
1000c4a8:	103fbe26 	beq	r2,zero,1000c3a4 <__alt_data_end+0xf800c3a4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000c4ac:	e0bffd17 	ldw	r2,-12(fp)
1000c4b0:	1004d43a 	srli	r2,r2,16
1000c4b4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000c4b8:	00001406 	br	1000c50c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000c4bc:	e0bffc17 	ldw	r2,-16(fp)
1000c4c0:	e0fffb17 	ldw	r3,-20(fp)
1000c4c4:	18c00d17 	ldw	r3,52(r3)
1000c4c8:	e13ffb17 	ldw	r4,-20(fp)
1000c4cc:	20c7883a 	add	r3,r4,r3
1000c4d0:	18c20e04 	addi	r3,r3,2104
1000c4d4:	18c00003 	ldbu	r3,0(r3)
1000c4d8:	18c03fcc 	andi	r3,r3,255
1000c4dc:	18c0201c 	xori	r3,r3,128
1000c4e0:	18ffe004 	addi	r3,r3,-128
1000c4e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c4e8:	e0bffb17 	ldw	r2,-20(fp)
1000c4ec:	10800d17 	ldw	r2,52(r2)
1000c4f0:	10800044 	addi	r2,r2,1
1000c4f4:	10c1ffcc 	andi	r3,r2,2047
1000c4f8:	e0bffb17 	ldw	r2,-20(fp)
1000c4fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000c500:	e0bffa17 	ldw	r2,-24(fp)
1000c504:	10bfffc4 	addi	r2,r2,-1
1000c508:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000c50c:	e0bffa17 	ldw	r2,-24(fp)
1000c510:	10000526 	beq	r2,zero,1000c528 <altera_avalon_jtag_uart_irq+0x1a8>
1000c514:	e0bffb17 	ldw	r2,-20(fp)
1000c518:	10c00d17 	ldw	r3,52(r2)
1000c51c:	e0bffb17 	ldw	r2,-20(fp)
1000c520:	10800c17 	ldw	r2,48(r2)
1000c524:	18bfe51e 	bne	r3,r2,1000c4bc <__alt_data_end+0xf800c4bc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000c528:	e0bffa17 	ldw	r2,-24(fp)
1000c52c:	103f9d26 	beq	r2,zero,1000c3a4 <__alt_data_end+0xf800c3a4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000c530:	e0bffb17 	ldw	r2,-20(fp)
1000c534:	10c00817 	ldw	r3,32(r2)
1000c538:	00bfff44 	movi	r2,-3
1000c53c:	1886703a 	and	r3,r3,r2
1000c540:	e0bffb17 	ldw	r2,-20(fp)
1000c544:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000c548:	e0bffb17 	ldw	r2,-20(fp)
1000c54c:	10800017 	ldw	r2,0(r2)
1000c550:	10800104 	addi	r2,r2,4
1000c554:	1007883a 	mov	r3,r2
1000c558:	e0bffb17 	ldw	r2,-20(fp)
1000c55c:	10800817 	ldw	r2,32(r2)
1000c560:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000c564:	e0bffc17 	ldw	r2,-16(fp)
1000c568:	10800104 	addi	r2,r2,4
1000c56c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000c570:	003f8c06 	br	1000c3a4 <__alt_data_end+0xf800c3a4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000c574:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000c578:	0001883a 	nop
1000c57c:	e037883a 	mov	sp,fp
1000c580:	df000017 	ldw	fp,0(sp)
1000c584:	dec00104 	addi	sp,sp,4
1000c588:	f800283a 	ret

1000c58c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000c58c:	defff804 	addi	sp,sp,-32
1000c590:	df000715 	stw	fp,28(sp)
1000c594:	df000704 	addi	fp,sp,28
1000c598:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000c59c:	e0bffb17 	ldw	r2,-20(fp)
1000c5a0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000c5a4:	e0bff917 	ldw	r2,-28(fp)
1000c5a8:	10800017 	ldw	r2,0(r2)
1000c5ac:	10800104 	addi	r2,r2,4
1000c5b0:	10800037 	ldwio	r2,0(r2)
1000c5b4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000c5b8:	e0bffa17 	ldw	r2,-24(fp)
1000c5bc:	1081000c 	andi	r2,r2,1024
1000c5c0:	10000b26 	beq	r2,zero,1000c5f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000c5c4:	e0bff917 	ldw	r2,-28(fp)
1000c5c8:	10800017 	ldw	r2,0(r2)
1000c5cc:	10800104 	addi	r2,r2,4
1000c5d0:	1007883a 	mov	r3,r2
1000c5d4:	e0bff917 	ldw	r2,-28(fp)
1000c5d8:	10800817 	ldw	r2,32(r2)
1000c5dc:	10810014 	ori	r2,r2,1024
1000c5e0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000c5e4:	e0bff917 	ldw	r2,-28(fp)
1000c5e8:	10000915 	stw	zero,36(r2)
1000c5ec:	00000a06 	br	1000c618 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000c5f0:	e0bff917 	ldw	r2,-28(fp)
1000c5f4:	10c00917 	ldw	r3,36(r2)
1000c5f8:	00a00034 	movhi	r2,32768
1000c5fc:	10bfff04 	addi	r2,r2,-4
1000c600:	10c00536 	bltu	r2,r3,1000c618 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000c604:	e0bff917 	ldw	r2,-28(fp)
1000c608:	10800917 	ldw	r2,36(r2)
1000c60c:	10c00044 	addi	r3,r2,1
1000c610:	e0bff917 	ldw	r2,-28(fp)
1000c614:	10c00915 	stw	r3,36(r2)
1000c618:	d0a7ee17 	ldw	r2,-24648(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000c61c:	e037883a 	mov	sp,fp
1000c620:	df000017 	ldw	fp,0(sp)
1000c624:	dec00104 	addi	sp,sp,4
1000c628:	f800283a 	ret

1000c62c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000c62c:	defffd04 	addi	sp,sp,-12
1000c630:	df000215 	stw	fp,8(sp)
1000c634:	df000204 	addi	fp,sp,8
1000c638:	e13ffe15 	stw	r4,-8(fp)
1000c63c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000c640:	00000506 	br	1000c658 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000c644:	e0bfff17 	ldw	r2,-4(fp)
1000c648:	1090000c 	andi	r2,r2,16384
1000c64c:	10000226 	beq	r2,zero,1000c658 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000c650:	00bffd44 	movi	r2,-11
1000c654:	00000b06 	br	1000c684 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000c658:	e0bffe17 	ldw	r2,-8(fp)
1000c65c:	10c00d17 	ldw	r3,52(r2)
1000c660:	e0bffe17 	ldw	r2,-8(fp)
1000c664:	10800c17 	ldw	r2,48(r2)
1000c668:	18800526 	beq	r3,r2,1000c680 <altera_avalon_jtag_uart_close+0x54>
1000c66c:	e0bffe17 	ldw	r2,-8(fp)
1000c670:	10c00917 	ldw	r3,36(r2)
1000c674:	e0bffe17 	ldw	r2,-8(fp)
1000c678:	10800117 	ldw	r2,4(r2)
1000c67c:	18bff136 	bltu	r3,r2,1000c644 <__alt_data_end+0xf800c644>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000c680:	0005883a 	mov	r2,zero
}
1000c684:	e037883a 	mov	sp,fp
1000c688:	df000017 	ldw	fp,0(sp)
1000c68c:	dec00104 	addi	sp,sp,4
1000c690:	f800283a 	ret

1000c694 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000c694:	defffa04 	addi	sp,sp,-24
1000c698:	df000515 	stw	fp,20(sp)
1000c69c:	df000504 	addi	fp,sp,20
1000c6a0:	e13ffd15 	stw	r4,-12(fp)
1000c6a4:	e17ffe15 	stw	r5,-8(fp)
1000c6a8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000c6ac:	00bff9c4 	movi	r2,-25
1000c6b0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000c6b4:	e0bffe17 	ldw	r2,-8(fp)
1000c6b8:	10da8060 	cmpeqi	r3,r2,27137
1000c6bc:	1800031e 	bne	r3,zero,1000c6cc <altera_avalon_jtag_uart_ioctl+0x38>
1000c6c0:	109a80a0 	cmpeqi	r2,r2,27138
1000c6c4:	1000181e 	bne	r2,zero,1000c728 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1000c6c8:	00002906 	br	1000c770 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000c6cc:	e0bffd17 	ldw	r2,-12(fp)
1000c6d0:	10c00117 	ldw	r3,4(r2)
1000c6d4:	00a00034 	movhi	r2,32768
1000c6d8:	10bfffc4 	addi	r2,r2,-1
1000c6dc:	18802126 	beq	r3,r2,1000c764 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1000c6e0:	e0bfff17 	ldw	r2,-4(fp)
1000c6e4:	10800017 	ldw	r2,0(r2)
1000c6e8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000c6ec:	e0bffc17 	ldw	r2,-16(fp)
1000c6f0:	10800090 	cmplti	r2,r2,2
1000c6f4:	1000061e 	bne	r2,zero,1000c710 <altera_avalon_jtag_uart_ioctl+0x7c>
1000c6f8:	e0fffc17 	ldw	r3,-16(fp)
1000c6fc:	00a00034 	movhi	r2,32768
1000c700:	10bfffc4 	addi	r2,r2,-1
1000c704:	18800226 	beq	r3,r2,1000c710 <altera_avalon_jtag_uart_ioctl+0x7c>
1000c708:	e0bffc17 	ldw	r2,-16(fp)
1000c70c:	00000206 	br	1000c718 <altera_avalon_jtag_uart_ioctl+0x84>
1000c710:	00a00034 	movhi	r2,32768
1000c714:	10bfff84 	addi	r2,r2,-2
1000c718:	e0fffd17 	ldw	r3,-12(fp)
1000c71c:	18800115 	stw	r2,4(r3)
      rc = 0;
1000c720:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000c724:	00000f06 	br	1000c764 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000c728:	e0bffd17 	ldw	r2,-12(fp)
1000c72c:	10c00117 	ldw	r3,4(r2)
1000c730:	00a00034 	movhi	r2,32768
1000c734:	10bfffc4 	addi	r2,r2,-1
1000c738:	18800c26 	beq	r3,r2,1000c76c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000c73c:	e0bffd17 	ldw	r2,-12(fp)
1000c740:	10c00917 	ldw	r3,36(r2)
1000c744:	e0bffd17 	ldw	r2,-12(fp)
1000c748:	10800117 	ldw	r2,4(r2)
1000c74c:	1885803a 	cmpltu	r2,r3,r2
1000c750:	10c03fcc 	andi	r3,r2,255
1000c754:	e0bfff17 	ldw	r2,-4(fp)
1000c758:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000c75c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000c760:	00000206 	br	1000c76c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000c764:	0001883a 	nop
1000c768:	00000106 	br	1000c770 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000c76c:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000c770:	e0bffb17 	ldw	r2,-20(fp)
}
1000c774:	e037883a 	mov	sp,fp
1000c778:	df000017 	ldw	fp,0(sp)
1000c77c:	dec00104 	addi	sp,sp,4
1000c780:	f800283a 	ret

1000c784 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000c784:	defff304 	addi	sp,sp,-52
1000c788:	dfc00c15 	stw	ra,48(sp)
1000c78c:	df000b15 	stw	fp,44(sp)
1000c790:	df000b04 	addi	fp,sp,44
1000c794:	e13ffc15 	stw	r4,-16(fp)
1000c798:	e17ffd15 	stw	r5,-12(fp)
1000c79c:	e1bffe15 	stw	r6,-8(fp)
1000c7a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000c7a4:	e0bffd17 	ldw	r2,-12(fp)
1000c7a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000c7ac:	00004706 	br	1000c8cc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000c7b0:	e0bffc17 	ldw	r2,-16(fp)
1000c7b4:	10800a17 	ldw	r2,40(r2)
1000c7b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000c7bc:	e0bffc17 	ldw	r2,-16(fp)
1000c7c0:	10800b17 	ldw	r2,44(r2)
1000c7c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000c7c8:	e0fff717 	ldw	r3,-36(fp)
1000c7cc:	e0bff817 	ldw	r2,-32(fp)
1000c7d0:	18800536 	bltu	r3,r2,1000c7e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000c7d4:	e0fff717 	ldw	r3,-36(fp)
1000c7d8:	e0bff817 	ldw	r2,-32(fp)
1000c7dc:	1885c83a 	sub	r2,r3,r2
1000c7e0:	e0bff615 	stw	r2,-40(fp)
1000c7e4:	00000406 	br	1000c7f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000c7e8:	00c20004 	movi	r3,2048
1000c7ec:	e0bff817 	ldw	r2,-32(fp)
1000c7f0:	1885c83a 	sub	r2,r3,r2
1000c7f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000c7f8:	e0bff617 	ldw	r2,-40(fp)
1000c7fc:	10001e26 	beq	r2,zero,1000c878 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000c800:	e0fffe17 	ldw	r3,-8(fp)
1000c804:	e0bff617 	ldw	r2,-40(fp)
1000c808:	1880022e 	bgeu	r3,r2,1000c814 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000c80c:	e0bffe17 	ldw	r2,-8(fp)
1000c810:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000c814:	e0bffc17 	ldw	r2,-16(fp)
1000c818:	10c00e04 	addi	r3,r2,56
1000c81c:	e0bff817 	ldw	r2,-32(fp)
1000c820:	1885883a 	add	r2,r3,r2
1000c824:	e1bff617 	ldw	r6,-40(fp)
1000c828:	100b883a 	mov	r5,r2
1000c82c:	e13ff517 	ldw	r4,-44(fp)
1000c830:	00052980 	call	10005298 <memcpy>
      ptr   += n;
1000c834:	e0fff517 	ldw	r3,-44(fp)
1000c838:	e0bff617 	ldw	r2,-40(fp)
1000c83c:	1885883a 	add	r2,r3,r2
1000c840:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000c844:	e0fffe17 	ldw	r3,-8(fp)
1000c848:	e0bff617 	ldw	r2,-40(fp)
1000c84c:	1885c83a 	sub	r2,r3,r2
1000c850:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000c854:	e0fff817 	ldw	r3,-32(fp)
1000c858:	e0bff617 	ldw	r2,-40(fp)
1000c85c:	1885883a 	add	r2,r3,r2
1000c860:	10c1ffcc 	andi	r3,r2,2047
1000c864:	e0bffc17 	ldw	r2,-16(fp)
1000c868:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000c86c:	e0bffe17 	ldw	r2,-8(fp)
1000c870:	00bfcf16 	blt	zero,r2,1000c7b0 <__alt_data_end+0xf800c7b0>
1000c874:	00000106 	br	1000c87c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000c878:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000c87c:	e0fff517 	ldw	r3,-44(fp)
1000c880:	e0bffd17 	ldw	r2,-12(fp)
1000c884:	1880141e 	bne	r3,r2,1000c8d8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000c888:	e0bfff17 	ldw	r2,-4(fp)
1000c88c:	1090000c 	andi	r2,r2,16384
1000c890:	1000131e 	bne	r2,zero,1000c8e0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000c894:	0001883a 	nop
1000c898:	e0bffc17 	ldw	r2,-16(fp)
1000c89c:	10c00a17 	ldw	r3,40(r2)
1000c8a0:	e0bff717 	ldw	r2,-36(fp)
1000c8a4:	1880051e 	bne	r3,r2,1000c8bc <altera_avalon_jtag_uart_read+0x138>
1000c8a8:	e0bffc17 	ldw	r2,-16(fp)
1000c8ac:	10c00917 	ldw	r3,36(r2)
1000c8b0:	e0bffc17 	ldw	r2,-16(fp)
1000c8b4:	10800117 	ldw	r2,4(r2)
1000c8b8:	18bff736 	bltu	r3,r2,1000c898 <__alt_data_end+0xf800c898>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000c8bc:	e0bffc17 	ldw	r2,-16(fp)
1000c8c0:	10c00a17 	ldw	r3,40(r2)
1000c8c4:	e0bff717 	ldw	r2,-36(fp)
1000c8c8:	18800726 	beq	r3,r2,1000c8e8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000c8cc:	e0bffe17 	ldw	r2,-8(fp)
1000c8d0:	00bfb716 	blt	zero,r2,1000c7b0 <__alt_data_end+0xf800c7b0>
1000c8d4:	00000506 	br	1000c8ec <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000c8d8:	0001883a 	nop
1000c8dc:	00000306 	br	1000c8ec <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000c8e0:	0001883a 	nop
1000c8e4:	00000106 	br	1000c8ec <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000c8e8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000c8ec:	e0fff517 	ldw	r3,-44(fp)
1000c8f0:	e0bffd17 	ldw	r2,-12(fp)
1000c8f4:	18801826 	beq	r3,r2,1000c958 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000c8f8:	0005303a 	rdctl	r2,status
1000c8fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000c900:	e0fffb17 	ldw	r3,-20(fp)
1000c904:	00bfff84 	movi	r2,-2
1000c908:	1884703a 	and	r2,r3,r2
1000c90c:	1001703a 	wrctl	status,r2
  
  return context;
1000c910:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000c914:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000c918:	e0bffc17 	ldw	r2,-16(fp)
1000c91c:	10800817 	ldw	r2,32(r2)
1000c920:	10c00054 	ori	r3,r2,1
1000c924:	e0bffc17 	ldw	r2,-16(fp)
1000c928:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000c92c:	e0bffc17 	ldw	r2,-16(fp)
1000c930:	10800017 	ldw	r2,0(r2)
1000c934:	10800104 	addi	r2,r2,4
1000c938:	1007883a 	mov	r3,r2
1000c93c:	e0bffc17 	ldw	r2,-16(fp)
1000c940:	10800817 	ldw	r2,32(r2)
1000c944:	18800035 	stwio	r2,0(r3)
1000c948:	e0bffa17 	ldw	r2,-24(fp)
1000c94c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000c950:	e0bff917 	ldw	r2,-28(fp)
1000c954:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000c958:	e0fff517 	ldw	r3,-44(fp)
1000c95c:	e0bffd17 	ldw	r2,-12(fp)
1000c960:	18800426 	beq	r3,r2,1000c974 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1000c964:	e0fff517 	ldw	r3,-44(fp)
1000c968:	e0bffd17 	ldw	r2,-12(fp)
1000c96c:	1885c83a 	sub	r2,r3,r2
1000c970:	00000606 	br	1000c98c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1000c974:	e0bfff17 	ldw	r2,-4(fp)
1000c978:	1090000c 	andi	r2,r2,16384
1000c97c:	10000226 	beq	r2,zero,1000c988 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1000c980:	00bffd44 	movi	r2,-11
1000c984:	00000106 	br	1000c98c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1000c988:	00bffec4 	movi	r2,-5
}
1000c98c:	e037883a 	mov	sp,fp
1000c990:	dfc00117 	ldw	ra,4(sp)
1000c994:	df000017 	ldw	fp,0(sp)
1000c998:	dec00204 	addi	sp,sp,8
1000c99c:	f800283a 	ret

1000c9a0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000c9a0:	defff304 	addi	sp,sp,-52
1000c9a4:	dfc00c15 	stw	ra,48(sp)
1000c9a8:	df000b15 	stw	fp,44(sp)
1000c9ac:	df000b04 	addi	fp,sp,44
1000c9b0:	e13ffc15 	stw	r4,-16(fp)
1000c9b4:	e17ffd15 	stw	r5,-12(fp)
1000c9b8:	e1bffe15 	stw	r6,-8(fp)
1000c9bc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000c9c0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000c9c4:	e0bffd17 	ldw	r2,-12(fp)
1000c9c8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000c9cc:	00003706 	br	1000caac <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000c9d0:	e0bffc17 	ldw	r2,-16(fp)
1000c9d4:	10800c17 	ldw	r2,48(r2)
1000c9d8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1000c9dc:	e0bffc17 	ldw	r2,-16(fp)
1000c9e0:	10800d17 	ldw	r2,52(r2)
1000c9e4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000c9e8:	e0fff917 	ldw	r3,-28(fp)
1000c9ec:	e0bff517 	ldw	r2,-44(fp)
1000c9f0:	1880062e 	bgeu	r3,r2,1000ca0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000c9f4:	e0fff517 	ldw	r3,-44(fp)
1000c9f8:	e0bff917 	ldw	r2,-28(fp)
1000c9fc:	1885c83a 	sub	r2,r3,r2
1000ca00:	10bfffc4 	addi	r2,r2,-1
1000ca04:	e0bff615 	stw	r2,-40(fp)
1000ca08:	00000b06 	br	1000ca38 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000ca0c:	e0bff517 	ldw	r2,-44(fp)
1000ca10:	10000526 	beq	r2,zero,1000ca28 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ca14:	00c20004 	movi	r3,2048
1000ca18:	e0bff917 	ldw	r2,-28(fp)
1000ca1c:	1885c83a 	sub	r2,r3,r2
1000ca20:	e0bff615 	stw	r2,-40(fp)
1000ca24:	00000406 	br	1000ca38 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ca28:	00c1ffc4 	movi	r3,2047
1000ca2c:	e0bff917 	ldw	r2,-28(fp)
1000ca30:	1885c83a 	sub	r2,r3,r2
1000ca34:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ca38:	e0bff617 	ldw	r2,-40(fp)
1000ca3c:	10001e26 	beq	r2,zero,1000cab8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000ca40:	e0fffe17 	ldw	r3,-8(fp)
1000ca44:	e0bff617 	ldw	r2,-40(fp)
1000ca48:	1880022e 	bgeu	r3,r2,1000ca54 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000ca4c:	e0bffe17 	ldw	r2,-8(fp)
1000ca50:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ca54:	e0bffc17 	ldw	r2,-16(fp)
1000ca58:	10c20e04 	addi	r3,r2,2104
1000ca5c:	e0bff917 	ldw	r2,-28(fp)
1000ca60:	1885883a 	add	r2,r3,r2
1000ca64:	e1bff617 	ldw	r6,-40(fp)
1000ca68:	e17ffd17 	ldw	r5,-12(fp)
1000ca6c:	1009883a 	mov	r4,r2
1000ca70:	00052980 	call	10005298 <memcpy>
      ptr   += n;
1000ca74:	e0fffd17 	ldw	r3,-12(fp)
1000ca78:	e0bff617 	ldw	r2,-40(fp)
1000ca7c:	1885883a 	add	r2,r3,r2
1000ca80:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000ca84:	e0fffe17 	ldw	r3,-8(fp)
1000ca88:	e0bff617 	ldw	r2,-40(fp)
1000ca8c:	1885c83a 	sub	r2,r3,r2
1000ca90:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ca94:	e0fff917 	ldw	r3,-28(fp)
1000ca98:	e0bff617 	ldw	r2,-40(fp)
1000ca9c:	1885883a 	add	r2,r3,r2
1000caa0:	10c1ffcc 	andi	r3,r2,2047
1000caa4:	e0bffc17 	ldw	r2,-16(fp)
1000caa8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000caac:	e0bffe17 	ldw	r2,-8(fp)
1000cab0:	00bfc716 	blt	zero,r2,1000c9d0 <__alt_data_end+0xf800c9d0>
1000cab4:	00000106 	br	1000cabc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000cab8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000cabc:	0005303a 	rdctl	r2,status
1000cac0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000cac4:	e0fffb17 	ldw	r3,-20(fp)
1000cac8:	00bfff84 	movi	r2,-2
1000cacc:	1884703a 	and	r2,r3,r2
1000cad0:	1001703a 	wrctl	status,r2
  
  return context;
1000cad4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000cad8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000cadc:	e0bffc17 	ldw	r2,-16(fp)
1000cae0:	10800817 	ldw	r2,32(r2)
1000cae4:	10c00094 	ori	r3,r2,2
1000cae8:	e0bffc17 	ldw	r2,-16(fp)
1000caec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000caf0:	e0bffc17 	ldw	r2,-16(fp)
1000caf4:	10800017 	ldw	r2,0(r2)
1000caf8:	10800104 	addi	r2,r2,4
1000cafc:	1007883a 	mov	r3,r2
1000cb00:	e0bffc17 	ldw	r2,-16(fp)
1000cb04:	10800817 	ldw	r2,32(r2)
1000cb08:	18800035 	stwio	r2,0(r3)
1000cb0c:	e0bffa17 	ldw	r2,-24(fp)
1000cb10:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000cb14:	e0bff817 	ldw	r2,-32(fp)
1000cb18:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000cb1c:	e0bffe17 	ldw	r2,-8(fp)
1000cb20:	0080100e 	bge	zero,r2,1000cb64 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1000cb24:	e0bfff17 	ldw	r2,-4(fp)
1000cb28:	1090000c 	andi	r2,r2,16384
1000cb2c:	1000101e 	bne	r2,zero,1000cb70 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000cb30:	0001883a 	nop
1000cb34:	e0bffc17 	ldw	r2,-16(fp)
1000cb38:	10c00d17 	ldw	r3,52(r2)
1000cb3c:	e0bff517 	ldw	r2,-44(fp)
1000cb40:	1880051e 	bne	r3,r2,1000cb58 <altera_avalon_jtag_uart_write+0x1b8>
1000cb44:	e0bffc17 	ldw	r2,-16(fp)
1000cb48:	10c00917 	ldw	r3,36(r2)
1000cb4c:	e0bffc17 	ldw	r2,-16(fp)
1000cb50:	10800117 	ldw	r2,4(r2)
1000cb54:	18bff736 	bltu	r3,r2,1000cb34 <__alt_data_end+0xf800cb34>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000cb58:	e0bffc17 	ldw	r2,-16(fp)
1000cb5c:	10800917 	ldw	r2,36(r2)
1000cb60:	1000051e 	bne	r2,zero,1000cb78 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1000cb64:	e0bffe17 	ldw	r2,-8(fp)
1000cb68:	00bfd016 	blt	zero,r2,1000caac <__alt_data_end+0xf800caac>
1000cb6c:	00000306 	br	1000cb7c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000cb70:	0001883a 	nop
1000cb74:	00000106 	br	1000cb7c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000cb78:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000cb7c:	e0fffd17 	ldw	r3,-12(fp)
1000cb80:	e0bff717 	ldw	r2,-36(fp)
1000cb84:	18800426 	beq	r3,r2,1000cb98 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1000cb88:	e0fffd17 	ldw	r3,-12(fp)
1000cb8c:	e0bff717 	ldw	r2,-36(fp)
1000cb90:	1885c83a 	sub	r2,r3,r2
1000cb94:	00000606 	br	1000cbb0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1000cb98:	e0bfff17 	ldw	r2,-4(fp)
1000cb9c:	1090000c 	andi	r2,r2,16384
1000cba0:	10000226 	beq	r2,zero,1000cbac <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1000cba4:	00bffd44 	movi	r2,-11
1000cba8:	00000106 	br	1000cbb0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000cbac:	00bffec4 	movi	r2,-5
}
1000cbb0:	e037883a 	mov	sp,fp
1000cbb4:	dfc00117 	ldw	ra,4(sp)
1000cbb8:	df000017 	ldw	fp,0(sp)
1000cbbc:	dec00204 	addi	sp,sp,8
1000cbc0:	f800283a 	ret

1000cbc4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000cbc4:	defff504 	addi	sp,sp,-44
1000cbc8:	df000a15 	stw	fp,40(sp)
1000cbcc:	df000a04 	addi	fp,sp,40
1000cbd0:	e13ffc15 	stw	r4,-16(fp)
1000cbd4:	e17ffd15 	stw	r5,-12(fp)
1000cbd8:	e1bffe15 	stw	r6,-8(fp)
1000cbdc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000cbe0:	e03ff615 	stw	zero,-40(fp)
1000cbe4:	d0a7ee17 	ldw	r2,-24648(gp)
  
  if (alt_ticks_per_second ())
1000cbe8:	10003c26 	beq	r2,zero,1000ccdc <alt_alarm_start+0x118>
  {
    if (alarm)
1000cbec:	e0bffc17 	ldw	r2,-16(fp)
1000cbf0:	10003826 	beq	r2,zero,1000ccd4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1000cbf4:	e0bffc17 	ldw	r2,-16(fp)
1000cbf8:	e0fffe17 	ldw	r3,-8(fp)
1000cbfc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000cc00:	e0bffc17 	ldw	r2,-16(fp)
1000cc04:	e0ffff17 	ldw	r3,-4(fp)
1000cc08:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000cc0c:	0005303a 	rdctl	r2,status
1000cc10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000cc14:	e0fff917 	ldw	r3,-28(fp)
1000cc18:	00bfff84 	movi	r2,-2
1000cc1c:	1884703a 	and	r2,r3,r2
1000cc20:	1001703a 	wrctl	status,r2
  
  return context;
1000cc24:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1000cc28:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000cc2c:	d0a7ef17 	ldw	r2,-24644(gp)
      
      current_nticks = alt_nticks();
1000cc30:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000cc34:	e0fffd17 	ldw	r3,-12(fp)
1000cc38:	e0bff617 	ldw	r2,-40(fp)
1000cc3c:	1885883a 	add	r2,r3,r2
1000cc40:	10c00044 	addi	r3,r2,1
1000cc44:	e0bffc17 	ldw	r2,-16(fp)
1000cc48:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000cc4c:	e0bffc17 	ldw	r2,-16(fp)
1000cc50:	10c00217 	ldw	r3,8(r2)
1000cc54:	e0bff617 	ldw	r2,-40(fp)
1000cc58:	1880042e 	bgeu	r3,r2,1000cc6c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1000cc5c:	e0bffc17 	ldw	r2,-16(fp)
1000cc60:	00c00044 	movi	r3,1
1000cc64:	10c00405 	stb	r3,16(r2)
1000cc68:	00000206 	br	1000cc74 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1000cc6c:	e0bffc17 	ldw	r2,-16(fp)
1000cc70:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000cc74:	e0bffc17 	ldw	r2,-16(fp)
1000cc78:	d0e01004 	addi	r3,gp,-32704
1000cc7c:	e0fffa15 	stw	r3,-24(fp)
1000cc80:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000cc84:	e0bffb17 	ldw	r2,-20(fp)
1000cc88:	e0fffa17 	ldw	r3,-24(fp)
1000cc8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000cc90:	e0bffa17 	ldw	r2,-24(fp)
1000cc94:	10c00017 	ldw	r3,0(r2)
1000cc98:	e0bffb17 	ldw	r2,-20(fp)
1000cc9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000cca0:	e0bffa17 	ldw	r2,-24(fp)
1000cca4:	10800017 	ldw	r2,0(r2)
1000cca8:	e0fffb17 	ldw	r3,-20(fp)
1000ccac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000ccb0:	e0bffa17 	ldw	r2,-24(fp)
1000ccb4:	e0fffb17 	ldw	r3,-20(fp)
1000ccb8:	10c00015 	stw	r3,0(r2)
1000ccbc:	e0bff817 	ldw	r2,-32(fp)
1000ccc0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ccc4:	e0bff717 	ldw	r2,-36(fp)
1000ccc8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000cccc:	0005883a 	mov	r2,zero
1000ccd0:	00000306 	br	1000cce0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1000ccd4:	00bffa84 	movi	r2,-22
1000ccd8:	00000106 	br	1000cce0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1000ccdc:	00bfde84 	movi	r2,-134
  }
}
1000cce0:	e037883a 	mov	sp,fp
1000cce4:	df000017 	ldw	fp,0(sp)
1000cce8:	dec00104 	addi	sp,sp,4
1000ccec:	f800283a 	ret

1000ccf0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1000ccf0:	defffa04 	addi	sp,sp,-24
1000ccf4:	dfc00515 	stw	ra,20(sp)
1000ccf8:	df000415 	stw	fp,16(sp)
1000ccfc:	df000404 	addi	fp,sp,16
1000cd00:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1000cd04:	00800244 	movi	r2,9
1000cd08:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1000cd0c:	014003f4 	movhi	r5,15
1000cd10:	29509004 	addi	r5,r5,16960
1000cd14:	e13ffd17 	ldw	r4,-12(fp)
1000cd18:	0000b600 	call	10000b60 <__mulsi3>
1000cd1c:	100b883a 	mov	r5,r2
1000cd20:	0100bef4 	movhi	r4,763
1000cd24:	213c2004 	addi	r4,r4,-3968
1000cd28:	0000aa40 	call	10000aa4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1000cd2c:	100b883a 	mov	r5,r2
1000cd30:	01200034 	movhi	r4,32768
1000cd34:	213fffc4 	addi	r4,r4,-1
1000cd38:	0000aa40 	call	10000aa4 <__udivsi3>
1000cd3c:	100b883a 	mov	r5,r2
1000cd40:	e13fff17 	ldw	r4,-4(fp)
1000cd44:	0000aa40 	call	10000aa4 <__udivsi3>
1000cd48:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1000cd4c:	e0bffe17 	ldw	r2,-8(fp)
1000cd50:	10002a26 	beq	r2,zero,1000cdfc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1000cd54:	e03ffc15 	stw	zero,-16(fp)
1000cd58:	00001706 	br	1000cdb8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1000cd5c:	00a00034 	movhi	r2,32768
1000cd60:	10bfffc4 	addi	r2,r2,-1
1000cd64:	10bfffc4 	addi	r2,r2,-1
1000cd68:	103ffe1e 	bne	r2,zero,1000cd64 <__alt_data_end+0xf800cd64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1000cd6c:	014003f4 	movhi	r5,15
1000cd70:	29509004 	addi	r5,r5,16960
1000cd74:	e13ffd17 	ldw	r4,-12(fp)
1000cd78:	0000b600 	call	10000b60 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1000cd7c:	100b883a 	mov	r5,r2
1000cd80:	0100bef4 	movhi	r4,763
1000cd84:	213c2004 	addi	r4,r4,-3968
1000cd88:	0000aa40 	call	10000aa4 <__udivsi3>
1000cd8c:	100b883a 	mov	r5,r2
1000cd90:	01200034 	movhi	r4,32768
1000cd94:	213fffc4 	addi	r4,r4,-1
1000cd98:	0000aa40 	call	10000aa4 <__udivsi3>
1000cd9c:	1007883a 	mov	r3,r2
1000cda0:	e0bfff17 	ldw	r2,-4(fp)
1000cda4:	10c5c83a 	sub	r2,r2,r3
1000cda8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1000cdac:	e0bffc17 	ldw	r2,-16(fp)
1000cdb0:	10800044 	addi	r2,r2,1
1000cdb4:	e0bffc15 	stw	r2,-16(fp)
1000cdb8:	e0fffc17 	ldw	r3,-16(fp)
1000cdbc:	e0bffe17 	ldw	r2,-8(fp)
1000cdc0:	18bfe616 	blt	r3,r2,1000cd5c <__alt_data_end+0xf800cd5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000cdc4:	014003f4 	movhi	r5,15
1000cdc8:	29509004 	addi	r5,r5,16960
1000cdcc:	e13ffd17 	ldw	r4,-12(fp)
1000cdd0:	0000b600 	call	10000b60 <__mulsi3>
1000cdd4:	100b883a 	mov	r5,r2
1000cdd8:	0100bef4 	movhi	r4,763
1000cddc:	213c2004 	addi	r4,r4,-3968
1000cde0:	0000aa40 	call	10000aa4 <__udivsi3>
1000cde4:	e17fff17 	ldw	r5,-4(fp)
1000cde8:	1009883a 	mov	r4,r2
1000cdec:	0000b600 	call	10000b60 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000cdf0:	10bfffc4 	addi	r2,r2,-1
1000cdf4:	103ffe1e 	bne	r2,zero,1000cdf0 <__alt_data_end+0xf800cdf0>
1000cdf8:	00000d06 	br	1000ce30 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000cdfc:	014003f4 	movhi	r5,15
1000ce00:	29509004 	addi	r5,r5,16960
1000ce04:	e13ffd17 	ldw	r4,-12(fp)
1000ce08:	0000b600 	call	10000b60 <__mulsi3>
1000ce0c:	100b883a 	mov	r5,r2
1000ce10:	0100bef4 	movhi	r4,763
1000ce14:	213c2004 	addi	r4,r4,-3968
1000ce18:	0000aa40 	call	10000aa4 <__udivsi3>
1000ce1c:	e17fff17 	ldw	r5,-4(fp)
1000ce20:	1009883a 	mov	r4,r2
1000ce24:	0000b600 	call	10000b60 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000ce28:	10bfffc4 	addi	r2,r2,-1
1000ce2c:	00bffe16 	blt	zero,r2,1000ce28 <__alt_data_end+0xf800ce28>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1000ce30:	0005883a 	mov	r2,zero
}
1000ce34:	e037883a 	mov	sp,fp
1000ce38:	dfc00117 	ldw	ra,4(sp)
1000ce3c:	df000017 	ldw	fp,0(sp)
1000ce40:	dec00204 	addi	sp,sp,8
1000ce44:	f800283a 	ret

1000ce48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ce48:	defffe04 	addi	sp,sp,-8
1000ce4c:	dfc00115 	stw	ra,4(sp)
1000ce50:	df000015 	stw	fp,0(sp)
1000ce54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ce58:	d0a00e17 	ldw	r2,-32712(gp)
1000ce5c:	10000326 	beq	r2,zero,1000ce6c <alt_get_errno+0x24>
1000ce60:	d0a00e17 	ldw	r2,-32712(gp)
1000ce64:	103ee83a 	callr	r2
1000ce68:	00000106 	br	1000ce70 <alt_get_errno+0x28>
1000ce6c:	d0a7e904 	addi	r2,gp,-24668
}
1000ce70:	e037883a 	mov	sp,fp
1000ce74:	dfc00117 	ldw	ra,4(sp)
1000ce78:	df000017 	ldw	fp,0(sp)
1000ce7c:	dec00204 	addi	sp,sp,8
1000ce80:	f800283a 	ret

1000ce84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000ce84:	defffb04 	addi	sp,sp,-20
1000ce88:	dfc00415 	stw	ra,16(sp)
1000ce8c:	df000315 	stw	fp,12(sp)
1000ce90:	df000304 	addi	fp,sp,12
1000ce94:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000ce98:	e0bfff17 	ldw	r2,-4(fp)
1000ce9c:	10000816 	blt	r2,zero,1000cec0 <close+0x3c>
1000cea0:	01400304 	movi	r5,12
1000cea4:	e13fff17 	ldw	r4,-4(fp)
1000cea8:	0000b600 	call	10000b60 <__mulsi3>
1000ceac:	1007883a 	mov	r3,r2
1000ceb0:	00840074 	movhi	r2,4097
1000ceb4:	10806404 	addi	r2,r2,400
1000ceb8:	1885883a 	add	r2,r3,r2
1000cebc:	00000106 	br	1000cec4 <close+0x40>
1000cec0:	0005883a 	mov	r2,zero
1000cec4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000cec8:	e0bffd17 	ldw	r2,-12(fp)
1000cecc:	10001926 	beq	r2,zero,1000cf34 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ced0:	e0bffd17 	ldw	r2,-12(fp)
1000ced4:	10800017 	ldw	r2,0(r2)
1000ced8:	10800417 	ldw	r2,16(r2)
1000cedc:	10000626 	beq	r2,zero,1000cef8 <close+0x74>
1000cee0:	e0bffd17 	ldw	r2,-12(fp)
1000cee4:	10800017 	ldw	r2,0(r2)
1000cee8:	10800417 	ldw	r2,16(r2)
1000ceec:	e13ffd17 	ldw	r4,-12(fp)
1000cef0:	103ee83a 	callr	r2
1000cef4:	00000106 	br	1000cefc <close+0x78>
1000cef8:	0005883a 	mov	r2,zero
1000cefc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000cf00:	e13fff17 	ldw	r4,-4(fp)
1000cf04:	000d7ec0 	call	1000d7ec <alt_release_fd>
    if (rval < 0)
1000cf08:	e0bffe17 	ldw	r2,-8(fp)
1000cf0c:	1000070e 	bge	r2,zero,1000cf2c <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000cf10:	000ce480 	call	1000ce48 <alt_get_errno>
1000cf14:	1007883a 	mov	r3,r2
1000cf18:	e0bffe17 	ldw	r2,-8(fp)
1000cf1c:	0085c83a 	sub	r2,zero,r2
1000cf20:	18800015 	stw	r2,0(r3)
      return -1;
1000cf24:	00bfffc4 	movi	r2,-1
1000cf28:	00000706 	br	1000cf48 <close+0xc4>
    }
    return 0;
1000cf2c:	0005883a 	mov	r2,zero
1000cf30:	00000506 	br	1000cf48 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000cf34:	000ce480 	call	1000ce48 <alt_get_errno>
1000cf38:	1007883a 	mov	r3,r2
1000cf3c:	00801444 	movi	r2,81
1000cf40:	18800015 	stw	r2,0(r3)
    return -1;
1000cf44:	00bfffc4 	movi	r2,-1
  }
}
1000cf48:	e037883a 	mov	sp,fp
1000cf4c:	dfc00117 	ldw	ra,4(sp)
1000cf50:	df000017 	ldw	fp,0(sp)
1000cf54:	dec00204 	addi	sp,sp,8
1000cf58:	f800283a 	ret

1000cf5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000cf5c:	deffff04 	addi	sp,sp,-4
1000cf60:	df000015 	stw	fp,0(sp)
1000cf64:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000cf68:	0001883a 	nop
1000cf6c:	e037883a 	mov	sp,fp
1000cf70:	df000017 	ldw	fp,0(sp)
1000cf74:	dec00104 	addi	sp,sp,4
1000cf78:	f800283a 	ret

1000cf7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000cf7c:	defffc04 	addi	sp,sp,-16
1000cf80:	df000315 	stw	fp,12(sp)
1000cf84:	df000304 	addi	fp,sp,12
1000cf88:	e13ffd15 	stw	r4,-12(fp)
1000cf8c:	e17ffe15 	stw	r5,-8(fp)
1000cf90:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000cf94:	e0bfff17 	ldw	r2,-4(fp)
}
1000cf98:	e037883a 	mov	sp,fp
1000cf9c:	df000017 	ldw	fp,0(sp)
1000cfa0:	dec00104 	addi	sp,sp,4
1000cfa4:	f800283a 	ret

1000cfa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000cfa8:	defffe04 	addi	sp,sp,-8
1000cfac:	dfc00115 	stw	ra,4(sp)
1000cfb0:	df000015 	stw	fp,0(sp)
1000cfb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000cfb8:	d0a00e17 	ldw	r2,-32712(gp)
1000cfbc:	10000326 	beq	r2,zero,1000cfcc <alt_get_errno+0x24>
1000cfc0:	d0a00e17 	ldw	r2,-32712(gp)
1000cfc4:	103ee83a 	callr	r2
1000cfc8:	00000106 	br	1000cfd0 <alt_get_errno+0x28>
1000cfcc:	d0a7e904 	addi	r2,gp,-24668
}
1000cfd0:	e037883a 	mov	sp,fp
1000cfd4:	dfc00117 	ldw	ra,4(sp)
1000cfd8:	df000017 	ldw	fp,0(sp)
1000cfdc:	dec00204 	addi	sp,sp,8
1000cfe0:	f800283a 	ret

1000cfe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000cfe4:	defffa04 	addi	sp,sp,-24
1000cfe8:	dfc00515 	stw	ra,20(sp)
1000cfec:	df000415 	stw	fp,16(sp)
1000cff0:	df000404 	addi	fp,sp,16
1000cff4:	e13ffe15 	stw	r4,-8(fp)
1000cff8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000cffc:	e0bffe17 	ldw	r2,-8(fp)
1000d000:	10000326 	beq	r2,zero,1000d010 <alt_dev_llist_insert+0x2c>
1000d004:	e0bffe17 	ldw	r2,-8(fp)
1000d008:	10800217 	ldw	r2,8(r2)
1000d00c:	1000061e 	bne	r2,zero,1000d028 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000d010:	000cfa80 	call	1000cfa8 <alt_get_errno>
1000d014:	1007883a 	mov	r3,r2
1000d018:	00800584 	movi	r2,22
1000d01c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000d020:	00bffa84 	movi	r2,-22
1000d024:	00001306 	br	1000d074 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000d028:	e0bffe17 	ldw	r2,-8(fp)
1000d02c:	e0ffff17 	ldw	r3,-4(fp)
1000d030:	e0fffc15 	stw	r3,-16(fp)
1000d034:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000d038:	e0bffd17 	ldw	r2,-12(fp)
1000d03c:	e0fffc17 	ldw	r3,-16(fp)
1000d040:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000d044:	e0bffc17 	ldw	r2,-16(fp)
1000d048:	10c00017 	ldw	r3,0(r2)
1000d04c:	e0bffd17 	ldw	r2,-12(fp)
1000d050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000d054:	e0bffc17 	ldw	r2,-16(fp)
1000d058:	10800017 	ldw	r2,0(r2)
1000d05c:	e0fffd17 	ldw	r3,-12(fp)
1000d060:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000d064:	e0bffc17 	ldw	r2,-16(fp)
1000d068:	e0fffd17 	ldw	r3,-12(fp)
1000d06c:	10c00015 	stw	r3,0(r2)

  return 0;  
1000d070:	0005883a 	mov	r2,zero
}
1000d074:	e037883a 	mov	sp,fp
1000d078:	dfc00117 	ldw	ra,4(sp)
1000d07c:	df000017 	ldw	fp,0(sp)
1000d080:	dec00204 	addi	sp,sp,8
1000d084:	f800283a 	ret

1000d088 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000d088:	defffd04 	addi	sp,sp,-12
1000d08c:	dfc00215 	stw	ra,8(sp)
1000d090:	df000115 	stw	fp,4(sp)
1000d094:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000d098:	00840074 	movhi	r2,4097
1000d09c:	10b83004 	addi	r2,r2,-8000
1000d0a0:	e0bfff15 	stw	r2,-4(fp)
1000d0a4:	00000606 	br	1000d0c0 <_do_ctors+0x38>
        (*ctor) (); 
1000d0a8:	e0bfff17 	ldw	r2,-4(fp)
1000d0ac:	10800017 	ldw	r2,0(r2)
1000d0b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000d0b4:	e0bfff17 	ldw	r2,-4(fp)
1000d0b8:	10bfff04 	addi	r2,r2,-4
1000d0bc:	e0bfff15 	stw	r2,-4(fp)
1000d0c0:	e0ffff17 	ldw	r3,-4(fp)
1000d0c4:	00840074 	movhi	r2,4097
1000d0c8:	10b83104 	addi	r2,r2,-7996
1000d0cc:	18bff62e 	bgeu	r3,r2,1000d0a8 <__alt_data_end+0xf800d0a8>
        (*ctor) (); 
}
1000d0d0:	0001883a 	nop
1000d0d4:	e037883a 	mov	sp,fp
1000d0d8:	dfc00117 	ldw	ra,4(sp)
1000d0dc:	df000017 	ldw	fp,0(sp)
1000d0e0:	dec00204 	addi	sp,sp,8
1000d0e4:	f800283a 	ret

1000d0e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000d0e8:	defffd04 	addi	sp,sp,-12
1000d0ec:	dfc00215 	stw	ra,8(sp)
1000d0f0:	df000115 	stw	fp,4(sp)
1000d0f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000d0f8:	00840074 	movhi	r2,4097
1000d0fc:	10b83004 	addi	r2,r2,-8000
1000d100:	e0bfff15 	stw	r2,-4(fp)
1000d104:	00000606 	br	1000d120 <_do_dtors+0x38>
        (*dtor) (); 
1000d108:	e0bfff17 	ldw	r2,-4(fp)
1000d10c:	10800017 	ldw	r2,0(r2)
1000d110:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000d114:	e0bfff17 	ldw	r2,-4(fp)
1000d118:	10bfff04 	addi	r2,r2,-4
1000d11c:	e0bfff15 	stw	r2,-4(fp)
1000d120:	e0ffff17 	ldw	r3,-4(fp)
1000d124:	00840074 	movhi	r2,4097
1000d128:	10b83104 	addi	r2,r2,-7996
1000d12c:	18bff62e 	bgeu	r3,r2,1000d108 <__alt_data_end+0xf800d108>
        (*dtor) (); 
}
1000d130:	0001883a 	nop
1000d134:	e037883a 	mov	sp,fp
1000d138:	dfc00117 	ldw	ra,4(sp)
1000d13c:	df000017 	ldw	fp,0(sp)
1000d140:	dec00204 	addi	sp,sp,8
1000d144:	f800283a 	ret

1000d148 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000d148:	deffff04 	addi	sp,sp,-4
1000d14c:	df000015 	stw	fp,0(sp)
1000d150:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000d154:	0001883a 	nop
1000d158:	e037883a 	mov	sp,fp
1000d15c:	df000017 	ldw	fp,0(sp)
1000d160:	dec00104 	addi	sp,sp,4
1000d164:	f800283a 	ret

1000d168 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000d168:	defff904 	addi	sp,sp,-28
1000d16c:	dfc00615 	stw	ra,24(sp)
1000d170:	df000515 	stw	fp,20(sp)
1000d174:	df000504 	addi	fp,sp,20
1000d178:	e13ffc15 	stw	r4,-16(fp)
1000d17c:	e17ffd15 	stw	r5,-12(fp)
1000d180:	e1bffe15 	stw	r6,-8(fp)
1000d184:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000d188:	e0800217 	ldw	r2,8(fp)
1000d18c:	d8800015 	stw	r2,0(sp)
1000d190:	e1ffff17 	ldw	r7,-4(fp)
1000d194:	e1bffe17 	ldw	r6,-8(fp)
1000d198:	e17ffd17 	ldw	r5,-12(fp)
1000d19c:	e13ffc17 	ldw	r4,-16(fp)
1000d1a0:	000d3180 	call	1000d318 <alt_iic_isr_register>
}  
1000d1a4:	e037883a 	mov	sp,fp
1000d1a8:	dfc00117 	ldw	ra,4(sp)
1000d1ac:	df000017 	ldw	fp,0(sp)
1000d1b0:	dec00204 	addi	sp,sp,8
1000d1b4:	f800283a 	ret

1000d1b8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000d1b8:	defff904 	addi	sp,sp,-28
1000d1bc:	df000615 	stw	fp,24(sp)
1000d1c0:	df000604 	addi	fp,sp,24
1000d1c4:	e13ffe15 	stw	r4,-8(fp)
1000d1c8:	e17fff15 	stw	r5,-4(fp)
1000d1cc:	e0bfff17 	ldw	r2,-4(fp)
1000d1d0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d1d4:	0005303a 	rdctl	r2,status
1000d1d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d1dc:	e0fffb17 	ldw	r3,-20(fp)
1000d1e0:	00bfff84 	movi	r2,-2
1000d1e4:	1884703a 	and	r2,r3,r2
1000d1e8:	1001703a 	wrctl	status,r2
  
  return context;
1000d1ec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d1f0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000d1f4:	00c00044 	movi	r3,1
1000d1f8:	e0bffa17 	ldw	r2,-24(fp)
1000d1fc:	1884983a 	sll	r2,r3,r2
1000d200:	1007883a 	mov	r3,r2
1000d204:	d0a7ed17 	ldw	r2,-24652(gp)
1000d208:	1884b03a 	or	r2,r3,r2
1000d20c:	d0a7ed15 	stw	r2,-24652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d210:	d0a7ed17 	ldw	r2,-24652(gp)
1000d214:	100170fa 	wrctl	ienable,r2
1000d218:	e0bffc17 	ldw	r2,-16(fp)
1000d21c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d220:	e0bffd17 	ldw	r2,-12(fp)
1000d224:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000d228:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000d22c:	0001883a 	nop
}
1000d230:	e037883a 	mov	sp,fp
1000d234:	df000017 	ldw	fp,0(sp)
1000d238:	dec00104 	addi	sp,sp,4
1000d23c:	f800283a 	ret

1000d240 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000d240:	defff904 	addi	sp,sp,-28
1000d244:	df000615 	stw	fp,24(sp)
1000d248:	df000604 	addi	fp,sp,24
1000d24c:	e13ffe15 	stw	r4,-8(fp)
1000d250:	e17fff15 	stw	r5,-4(fp)
1000d254:	e0bfff17 	ldw	r2,-4(fp)
1000d258:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d25c:	0005303a 	rdctl	r2,status
1000d260:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d264:	e0fffb17 	ldw	r3,-20(fp)
1000d268:	00bfff84 	movi	r2,-2
1000d26c:	1884703a 	and	r2,r3,r2
1000d270:	1001703a 	wrctl	status,r2
  
  return context;
1000d274:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000d278:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000d27c:	00c00044 	movi	r3,1
1000d280:	e0bffa17 	ldw	r2,-24(fp)
1000d284:	1884983a 	sll	r2,r3,r2
1000d288:	0084303a 	nor	r2,zero,r2
1000d28c:	1007883a 	mov	r3,r2
1000d290:	d0a7ed17 	ldw	r2,-24652(gp)
1000d294:	1884703a 	and	r2,r3,r2
1000d298:	d0a7ed15 	stw	r2,-24652(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000d29c:	d0a7ed17 	ldw	r2,-24652(gp)
1000d2a0:	100170fa 	wrctl	ienable,r2
1000d2a4:	e0bffc17 	ldw	r2,-16(fp)
1000d2a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d2ac:	e0bffd17 	ldw	r2,-12(fp)
1000d2b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000d2b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000d2b8:	0001883a 	nop
}
1000d2bc:	e037883a 	mov	sp,fp
1000d2c0:	df000017 	ldw	fp,0(sp)
1000d2c4:	dec00104 	addi	sp,sp,4
1000d2c8:	f800283a 	ret

1000d2cc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000d2cc:	defffc04 	addi	sp,sp,-16
1000d2d0:	df000315 	stw	fp,12(sp)
1000d2d4:	df000304 	addi	fp,sp,12
1000d2d8:	e13ffe15 	stw	r4,-8(fp)
1000d2dc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000d2e0:	000530fa 	rdctl	r2,ienable
1000d2e4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000d2e8:	00c00044 	movi	r3,1
1000d2ec:	e0bfff17 	ldw	r2,-4(fp)
1000d2f0:	1884983a 	sll	r2,r3,r2
1000d2f4:	1007883a 	mov	r3,r2
1000d2f8:	e0bffd17 	ldw	r2,-12(fp)
1000d2fc:	1884703a 	and	r2,r3,r2
1000d300:	1004c03a 	cmpne	r2,r2,zero
1000d304:	10803fcc 	andi	r2,r2,255
}
1000d308:	e037883a 	mov	sp,fp
1000d30c:	df000017 	ldw	fp,0(sp)
1000d310:	dec00104 	addi	sp,sp,4
1000d314:	f800283a 	ret

1000d318 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000d318:	defff504 	addi	sp,sp,-44
1000d31c:	dfc00a15 	stw	ra,40(sp)
1000d320:	df000915 	stw	fp,36(sp)
1000d324:	df000904 	addi	fp,sp,36
1000d328:	e13ffc15 	stw	r4,-16(fp)
1000d32c:	e17ffd15 	stw	r5,-12(fp)
1000d330:	e1bffe15 	stw	r6,-8(fp)
1000d334:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000d338:	00bffa84 	movi	r2,-22
1000d33c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000d340:	e0bffd17 	ldw	r2,-12(fp)
1000d344:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000d348:	e0bff817 	ldw	r2,-32(fp)
1000d34c:	10800808 	cmpgei	r2,r2,32
1000d350:	1000271e 	bne	r2,zero,1000d3f0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d354:	0005303a 	rdctl	r2,status
1000d358:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d35c:	e0fffb17 	ldw	r3,-20(fp)
1000d360:	00bfff84 	movi	r2,-2
1000d364:	1884703a 	and	r2,r3,r2
1000d368:	1001703a 	wrctl	status,r2
  
  return context;
1000d36c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000d370:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1000d374:	00840074 	movhi	r2,4097
1000d378:	1088bf04 	addi	r2,r2,8956
1000d37c:	e0fff817 	ldw	r3,-32(fp)
1000d380:	180690fa 	slli	r3,r3,3
1000d384:	10c5883a 	add	r2,r2,r3
1000d388:	e0fffe17 	ldw	r3,-8(fp)
1000d38c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000d390:	00840074 	movhi	r2,4097
1000d394:	1088bf04 	addi	r2,r2,8956
1000d398:	e0fff817 	ldw	r3,-32(fp)
1000d39c:	180690fa 	slli	r3,r3,3
1000d3a0:	10c5883a 	add	r2,r2,r3
1000d3a4:	10800104 	addi	r2,r2,4
1000d3a8:	e0ffff17 	ldw	r3,-4(fp)
1000d3ac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000d3b0:	e0bffe17 	ldw	r2,-8(fp)
1000d3b4:	10000526 	beq	r2,zero,1000d3cc <alt_iic_isr_register+0xb4>
1000d3b8:	e0bff817 	ldw	r2,-32(fp)
1000d3bc:	100b883a 	mov	r5,r2
1000d3c0:	e13ffc17 	ldw	r4,-16(fp)
1000d3c4:	000d1b80 	call	1000d1b8 <alt_ic_irq_enable>
1000d3c8:	00000406 	br	1000d3dc <alt_iic_isr_register+0xc4>
1000d3cc:	e0bff817 	ldw	r2,-32(fp)
1000d3d0:	100b883a 	mov	r5,r2
1000d3d4:	e13ffc17 	ldw	r4,-16(fp)
1000d3d8:	000d2400 	call	1000d240 <alt_ic_irq_disable>
1000d3dc:	e0bff715 	stw	r2,-36(fp)
1000d3e0:	e0bffa17 	ldw	r2,-24(fp)
1000d3e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d3e8:	e0bff917 	ldw	r2,-28(fp)
1000d3ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000d3f0:	e0bff717 	ldw	r2,-36(fp)
}
1000d3f4:	e037883a 	mov	sp,fp
1000d3f8:	dfc00117 	ldw	ra,4(sp)
1000d3fc:	df000017 	ldw	fp,0(sp)
1000d400:	dec00204 	addi	sp,sp,8
1000d404:	f800283a 	ret

1000d408 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000d408:	defff804 	addi	sp,sp,-32
1000d40c:	dfc00715 	stw	ra,28(sp)
1000d410:	df000615 	stw	fp,24(sp)
1000d414:	dc000515 	stw	r16,20(sp)
1000d418:	df000604 	addi	fp,sp,24
1000d41c:	e13ffb15 	stw	r4,-20(fp)
1000d420:	e17ffc15 	stw	r5,-16(fp)
1000d424:	e1bffd15 	stw	r6,-12(fp)
1000d428:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000d42c:	e1bffe17 	ldw	r6,-8(fp)
1000d430:	e17ffd17 	ldw	r5,-12(fp)
1000d434:	e13ffc17 	ldw	r4,-16(fp)
1000d438:	000d6900 	call	1000d690 <open>
1000d43c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000d440:	e0bffa17 	ldw	r2,-24(fp)
1000d444:	10002216 	blt	r2,zero,1000d4d0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000d448:	04040074 	movhi	r16,4097
1000d44c:	84006404 	addi	r16,r16,400
1000d450:	e0bffa17 	ldw	r2,-24(fp)
1000d454:	01400304 	movi	r5,12
1000d458:	1009883a 	mov	r4,r2
1000d45c:	0000b600 	call	10000b60 <__mulsi3>
1000d460:	8085883a 	add	r2,r16,r2
1000d464:	10c00017 	ldw	r3,0(r2)
1000d468:	e0bffb17 	ldw	r2,-20(fp)
1000d46c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000d470:	04040074 	movhi	r16,4097
1000d474:	84006404 	addi	r16,r16,400
1000d478:	e0bffa17 	ldw	r2,-24(fp)
1000d47c:	01400304 	movi	r5,12
1000d480:	1009883a 	mov	r4,r2
1000d484:	0000b600 	call	10000b60 <__mulsi3>
1000d488:	8085883a 	add	r2,r16,r2
1000d48c:	10800104 	addi	r2,r2,4
1000d490:	10c00017 	ldw	r3,0(r2)
1000d494:	e0bffb17 	ldw	r2,-20(fp)
1000d498:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000d49c:	04040074 	movhi	r16,4097
1000d4a0:	84006404 	addi	r16,r16,400
1000d4a4:	e0bffa17 	ldw	r2,-24(fp)
1000d4a8:	01400304 	movi	r5,12
1000d4ac:	1009883a 	mov	r4,r2
1000d4b0:	0000b600 	call	10000b60 <__mulsi3>
1000d4b4:	8085883a 	add	r2,r16,r2
1000d4b8:	10800204 	addi	r2,r2,8
1000d4bc:	10c00017 	ldw	r3,0(r2)
1000d4c0:	e0bffb17 	ldw	r2,-20(fp)
1000d4c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000d4c8:	e13ffa17 	ldw	r4,-24(fp)
1000d4cc:	000d7ec0 	call	1000d7ec <alt_release_fd>
  }
} 
1000d4d0:	0001883a 	nop
1000d4d4:	e6ffff04 	addi	sp,fp,-4
1000d4d8:	dfc00217 	ldw	ra,8(sp)
1000d4dc:	df000117 	ldw	fp,4(sp)
1000d4e0:	dc000017 	ldw	r16,0(sp)
1000d4e4:	dec00304 	addi	sp,sp,12
1000d4e8:	f800283a 	ret

1000d4ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000d4ec:	defffb04 	addi	sp,sp,-20
1000d4f0:	dfc00415 	stw	ra,16(sp)
1000d4f4:	df000315 	stw	fp,12(sp)
1000d4f8:	df000304 	addi	fp,sp,12
1000d4fc:	e13ffd15 	stw	r4,-12(fp)
1000d500:	e17ffe15 	stw	r5,-8(fp)
1000d504:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000d508:	01c07fc4 	movi	r7,511
1000d50c:	01800044 	movi	r6,1
1000d510:	e17ffd17 	ldw	r5,-12(fp)
1000d514:	01040074 	movhi	r4,4097
1000d518:	21006704 	addi	r4,r4,412
1000d51c:	000d4080 	call	1000d408 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000d520:	01c07fc4 	movi	r7,511
1000d524:	000d883a 	mov	r6,zero
1000d528:	e17ffe17 	ldw	r5,-8(fp)
1000d52c:	01040074 	movhi	r4,4097
1000d530:	21006404 	addi	r4,r4,400
1000d534:	000d4080 	call	1000d408 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000d538:	01c07fc4 	movi	r7,511
1000d53c:	01800044 	movi	r6,1
1000d540:	e17fff17 	ldw	r5,-4(fp)
1000d544:	01040074 	movhi	r4,4097
1000d548:	21006a04 	addi	r4,r4,424
1000d54c:	000d4080 	call	1000d408 <alt_open_fd>
}  
1000d550:	0001883a 	nop
1000d554:	e037883a 	mov	sp,fp
1000d558:	dfc00117 	ldw	ra,4(sp)
1000d55c:	df000017 	ldw	fp,0(sp)
1000d560:	dec00204 	addi	sp,sp,8
1000d564:	f800283a 	ret

1000d568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d568:	defffe04 	addi	sp,sp,-8
1000d56c:	dfc00115 	stw	ra,4(sp)
1000d570:	df000015 	stw	fp,0(sp)
1000d574:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d578:	d0a00e17 	ldw	r2,-32712(gp)
1000d57c:	10000326 	beq	r2,zero,1000d58c <alt_get_errno+0x24>
1000d580:	d0a00e17 	ldw	r2,-32712(gp)
1000d584:	103ee83a 	callr	r2
1000d588:	00000106 	br	1000d590 <alt_get_errno+0x28>
1000d58c:	d0a7e904 	addi	r2,gp,-24668
}
1000d590:	e037883a 	mov	sp,fp
1000d594:	dfc00117 	ldw	ra,4(sp)
1000d598:	df000017 	ldw	fp,0(sp)
1000d59c:	dec00204 	addi	sp,sp,8
1000d5a0:	f800283a 	ret

1000d5a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000d5a4:	defffb04 	addi	sp,sp,-20
1000d5a8:	dfc00415 	stw	ra,16(sp)
1000d5ac:	df000315 	stw	fp,12(sp)
1000d5b0:	dc000215 	stw	r16,8(sp)
1000d5b4:	df000304 	addi	fp,sp,12
1000d5b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000d5bc:	e0bffe17 	ldw	r2,-8(fp)
1000d5c0:	10800217 	ldw	r2,8(r2)
1000d5c4:	10d00034 	orhi	r3,r2,16384
1000d5c8:	e0bffe17 	ldw	r2,-8(fp)
1000d5cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000d5d0:	e03ffd15 	stw	zero,-12(fp)
1000d5d4:	00002306 	br	1000d664 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000d5d8:	04040074 	movhi	r16,4097
1000d5dc:	84006404 	addi	r16,r16,400
1000d5e0:	e0bffd17 	ldw	r2,-12(fp)
1000d5e4:	01400304 	movi	r5,12
1000d5e8:	1009883a 	mov	r4,r2
1000d5ec:	0000b600 	call	10000b60 <__mulsi3>
1000d5f0:	8085883a 	add	r2,r16,r2
1000d5f4:	10c00017 	ldw	r3,0(r2)
1000d5f8:	e0bffe17 	ldw	r2,-8(fp)
1000d5fc:	10800017 	ldw	r2,0(r2)
1000d600:	1880151e 	bne	r3,r2,1000d658 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000d604:	04040074 	movhi	r16,4097
1000d608:	84006404 	addi	r16,r16,400
1000d60c:	e0bffd17 	ldw	r2,-12(fp)
1000d610:	01400304 	movi	r5,12
1000d614:	1009883a 	mov	r4,r2
1000d618:	0000b600 	call	10000b60 <__mulsi3>
1000d61c:	8085883a 	add	r2,r16,r2
1000d620:	10800204 	addi	r2,r2,8
1000d624:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000d628:	10000b0e 	bge	r2,zero,1000d658 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000d62c:	01400304 	movi	r5,12
1000d630:	e13ffd17 	ldw	r4,-12(fp)
1000d634:	0000b600 	call	10000b60 <__mulsi3>
1000d638:	1007883a 	mov	r3,r2
1000d63c:	00840074 	movhi	r2,4097
1000d640:	10806404 	addi	r2,r2,400
1000d644:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000d648:	e0bffe17 	ldw	r2,-8(fp)
1000d64c:	18800226 	beq	r3,r2,1000d658 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000d650:	00bffcc4 	movi	r2,-13
1000d654:	00000806 	br	1000d678 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000d658:	e0bffd17 	ldw	r2,-12(fp)
1000d65c:	10800044 	addi	r2,r2,1
1000d660:	e0bffd15 	stw	r2,-12(fp)
1000d664:	d0a00d17 	ldw	r2,-32716(gp)
1000d668:	1007883a 	mov	r3,r2
1000d66c:	e0bffd17 	ldw	r2,-12(fp)
1000d670:	18bfd92e 	bgeu	r3,r2,1000d5d8 <__alt_data_end+0xf800d5d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000d674:	0005883a 	mov	r2,zero
}
1000d678:	e6ffff04 	addi	sp,fp,-4
1000d67c:	dfc00217 	ldw	ra,8(sp)
1000d680:	df000117 	ldw	fp,4(sp)
1000d684:	dc000017 	ldw	r16,0(sp)
1000d688:	dec00304 	addi	sp,sp,12
1000d68c:	f800283a 	ret

1000d690 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000d690:	defff604 	addi	sp,sp,-40
1000d694:	dfc00915 	stw	ra,36(sp)
1000d698:	df000815 	stw	fp,32(sp)
1000d69c:	df000804 	addi	fp,sp,32
1000d6a0:	e13ffd15 	stw	r4,-12(fp)
1000d6a4:	e17ffe15 	stw	r5,-8(fp)
1000d6a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000d6ac:	00bfffc4 	movi	r2,-1
1000d6b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000d6b4:	00bffb44 	movi	r2,-19
1000d6b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000d6bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000d6c0:	d1600b04 	addi	r5,gp,-32724
1000d6c4:	e13ffd17 	ldw	r4,-12(fp)
1000d6c8:	000da380 	call	1000da38 <alt_find_dev>
1000d6cc:	e0bff815 	stw	r2,-32(fp)
1000d6d0:	e0bff817 	ldw	r2,-32(fp)
1000d6d4:	1000051e 	bne	r2,zero,1000d6ec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000d6d8:	e13ffd17 	ldw	r4,-12(fp)
1000d6dc:	000dac80 	call	1000dac8 <alt_find_file>
1000d6e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000d6e4:	00800044 	movi	r2,1
1000d6e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000d6ec:	e0bff817 	ldw	r2,-32(fp)
1000d6f0:	10002b26 	beq	r2,zero,1000d7a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000d6f4:	e13ff817 	ldw	r4,-32(fp)
1000d6f8:	000dbd00 	call	1000dbd0 <alt_get_fd>
1000d6fc:	e0bff915 	stw	r2,-28(fp)
1000d700:	e0bff917 	ldw	r2,-28(fp)
1000d704:	1000030e 	bge	r2,zero,1000d714 <open+0x84>
    {
      status = index;
1000d708:	e0bff917 	ldw	r2,-28(fp)
1000d70c:	e0bffa15 	stw	r2,-24(fp)
1000d710:	00002506 	br	1000d7a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1000d714:	01400304 	movi	r5,12
1000d718:	e13ff917 	ldw	r4,-28(fp)
1000d71c:	0000b600 	call	10000b60 <__mulsi3>
1000d720:	1007883a 	mov	r3,r2
1000d724:	00840074 	movhi	r2,4097
1000d728:	10806404 	addi	r2,r2,400
1000d72c:	1885883a 	add	r2,r3,r2
1000d730:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000d734:	e0fffe17 	ldw	r3,-8(fp)
1000d738:	00900034 	movhi	r2,16384
1000d73c:	10bfffc4 	addi	r2,r2,-1
1000d740:	1886703a 	and	r3,r3,r2
1000d744:	e0bffc17 	ldw	r2,-16(fp)
1000d748:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000d74c:	e0bffb17 	ldw	r2,-20(fp)
1000d750:	1000051e 	bne	r2,zero,1000d768 <open+0xd8>
1000d754:	e13ffc17 	ldw	r4,-16(fp)
1000d758:	000d5a40 	call	1000d5a4 <alt_file_locked>
1000d75c:	e0bffa15 	stw	r2,-24(fp)
1000d760:	e0bffa17 	ldw	r2,-24(fp)
1000d764:	10001016 	blt	r2,zero,1000d7a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000d768:	e0bff817 	ldw	r2,-32(fp)
1000d76c:	10800317 	ldw	r2,12(r2)
1000d770:	10000826 	beq	r2,zero,1000d794 <open+0x104>
1000d774:	e0bff817 	ldw	r2,-32(fp)
1000d778:	10800317 	ldw	r2,12(r2)
1000d77c:	e1ffff17 	ldw	r7,-4(fp)
1000d780:	e1bffe17 	ldw	r6,-8(fp)
1000d784:	e17ffd17 	ldw	r5,-12(fp)
1000d788:	e13ffc17 	ldw	r4,-16(fp)
1000d78c:	103ee83a 	callr	r2
1000d790:	00000106 	br	1000d798 <open+0x108>
1000d794:	0005883a 	mov	r2,zero
1000d798:	e0bffa15 	stw	r2,-24(fp)
1000d79c:	00000206 	br	1000d7a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000d7a0:	00bffb44 	movi	r2,-19
1000d7a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000d7a8:	e0bffa17 	ldw	r2,-24(fp)
1000d7ac:	1000090e 	bge	r2,zero,1000d7d4 <open+0x144>
  {
    alt_release_fd (index);  
1000d7b0:	e13ff917 	ldw	r4,-28(fp)
1000d7b4:	000d7ec0 	call	1000d7ec <alt_release_fd>
    ALT_ERRNO = -status;
1000d7b8:	000d5680 	call	1000d568 <alt_get_errno>
1000d7bc:	1007883a 	mov	r3,r2
1000d7c0:	e0bffa17 	ldw	r2,-24(fp)
1000d7c4:	0085c83a 	sub	r2,zero,r2
1000d7c8:	18800015 	stw	r2,0(r3)
    return -1;
1000d7cc:	00bfffc4 	movi	r2,-1
1000d7d0:	00000106 	br	1000d7d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000d7d4:	e0bff917 	ldw	r2,-28(fp)
}
1000d7d8:	e037883a 	mov	sp,fp
1000d7dc:	dfc00117 	ldw	ra,4(sp)
1000d7e0:	df000017 	ldw	fp,0(sp)
1000d7e4:	dec00204 	addi	sp,sp,8
1000d7e8:	f800283a 	ret

1000d7ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000d7ec:	defffc04 	addi	sp,sp,-16
1000d7f0:	dfc00315 	stw	ra,12(sp)
1000d7f4:	df000215 	stw	fp,8(sp)
1000d7f8:	dc000115 	stw	r16,4(sp)
1000d7fc:	df000204 	addi	fp,sp,8
1000d800:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000d804:	e0bffe17 	ldw	r2,-8(fp)
1000d808:	108000d0 	cmplti	r2,r2,3
1000d80c:	1000111e 	bne	r2,zero,1000d854 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000d810:	04040074 	movhi	r16,4097
1000d814:	84006404 	addi	r16,r16,400
1000d818:	e0bffe17 	ldw	r2,-8(fp)
1000d81c:	01400304 	movi	r5,12
1000d820:	1009883a 	mov	r4,r2
1000d824:	0000b600 	call	10000b60 <__mulsi3>
1000d828:	8085883a 	add	r2,r16,r2
1000d82c:	10800204 	addi	r2,r2,8
1000d830:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000d834:	04040074 	movhi	r16,4097
1000d838:	84006404 	addi	r16,r16,400
1000d83c:	e0bffe17 	ldw	r2,-8(fp)
1000d840:	01400304 	movi	r5,12
1000d844:	1009883a 	mov	r4,r2
1000d848:	0000b600 	call	10000b60 <__mulsi3>
1000d84c:	8085883a 	add	r2,r16,r2
1000d850:	10000015 	stw	zero,0(r2)
  }
}
1000d854:	0001883a 	nop
1000d858:	e6ffff04 	addi	sp,fp,-4
1000d85c:	dfc00217 	ldw	ra,8(sp)
1000d860:	df000117 	ldw	fp,4(sp)
1000d864:	dc000017 	ldw	r16,0(sp)
1000d868:	dec00304 	addi	sp,sp,12
1000d86c:	f800283a 	ret

1000d870 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000d870:	defffa04 	addi	sp,sp,-24
1000d874:	df000515 	stw	fp,20(sp)
1000d878:	df000504 	addi	fp,sp,20
1000d87c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000d880:	0005303a 	rdctl	r2,status
1000d884:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000d888:	e0fffc17 	ldw	r3,-16(fp)
1000d88c:	00bfff84 	movi	r2,-2
1000d890:	1884703a 	and	r2,r3,r2
1000d894:	1001703a 	wrctl	status,r2
  
  return context;
1000d898:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000d89c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000d8a0:	e0bfff17 	ldw	r2,-4(fp)
1000d8a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000d8a8:	e0bffd17 	ldw	r2,-12(fp)
1000d8ac:	10800017 	ldw	r2,0(r2)
1000d8b0:	e0fffd17 	ldw	r3,-12(fp)
1000d8b4:	18c00117 	ldw	r3,4(r3)
1000d8b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000d8bc:	e0bffd17 	ldw	r2,-12(fp)
1000d8c0:	10800117 	ldw	r2,4(r2)
1000d8c4:	e0fffd17 	ldw	r3,-12(fp)
1000d8c8:	18c00017 	ldw	r3,0(r3)
1000d8cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000d8d0:	e0bffd17 	ldw	r2,-12(fp)
1000d8d4:	e0fffd17 	ldw	r3,-12(fp)
1000d8d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000d8dc:	e0bffd17 	ldw	r2,-12(fp)
1000d8e0:	e0fffd17 	ldw	r3,-12(fp)
1000d8e4:	10c00015 	stw	r3,0(r2)
1000d8e8:	e0bffb17 	ldw	r2,-20(fp)
1000d8ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000d8f0:	e0bffe17 	ldw	r2,-8(fp)
1000d8f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000d8f8:	0001883a 	nop
1000d8fc:	e037883a 	mov	sp,fp
1000d900:	df000017 	ldw	fp,0(sp)
1000d904:	dec00104 	addi	sp,sp,4
1000d908:	f800283a 	ret

1000d90c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000d90c:	defffb04 	addi	sp,sp,-20
1000d910:	dfc00415 	stw	ra,16(sp)
1000d914:	df000315 	stw	fp,12(sp)
1000d918:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000d91c:	d0a01017 	ldw	r2,-32704(gp)
1000d920:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000d924:	d0a7ef17 	ldw	r2,-24644(gp)
1000d928:	10800044 	addi	r2,r2,1
1000d92c:	d0a7ef15 	stw	r2,-24644(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000d930:	00002e06 	br	1000d9ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000d934:	e0bffd17 	ldw	r2,-12(fp)
1000d938:	10800017 	ldw	r2,0(r2)
1000d93c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000d940:	e0bffd17 	ldw	r2,-12(fp)
1000d944:	10800403 	ldbu	r2,16(r2)
1000d948:	10803fcc 	andi	r2,r2,255
1000d94c:	10000426 	beq	r2,zero,1000d960 <alt_tick+0x54>
1000d950:	d0a7ef17 	ldw	r2,-24644(gp)
1000d954:	1000021e 	bne	r2,zero,1000d960 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000d958:	e0bffd17 	ldw	r2,-12(fp)
1000d95c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000d960:	e0bffd17 	ldw	r2,-12(fp)
1000d964:	10800217 	ldw	r2,8(r2)
1000d968:	d0e7ef17 	ldw	r3,-24644(gp)
1000d96c:	18801d36 	bltu	r3,r2,1000d9e4 <alt_tick+0xd8>
1000d970:	e0bffd17 	ldw	r2,-12(fp)
1000d974:	10800403 	ldbu	r2,16(r2)
1000d978:	10803fcc 	andi	r2,r2,255
1000d97c:	1000191e 	bne	r2,zero,1000d9e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000d980:	e0bffd17 	ldw	r2,-12(fp)
1000d984:	10800317 	ldw	r2,12(r2)
1000d988:	e0fffd17 	ldw	r3,-12(fp)
1000d98c:	18c00517 	ldw	r3,20(r3)
1000d990:	1809883a 	mov	r4,r3
1000d994:	103ee83a 	callr	r2
1000d998:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000d99c:	e0bfff17 	ldw	r2,-4(fp)
1000d9a0:	1000031e 	bne	r2,zero,1000d9b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000d9a4:	e13ffd17 	ldw	r4,-12(fp)
1000d9a8:	000d8700 	call	1000d870 <alt_alarm_stop>
1000d9ac:	00000d06 	br	1000d9e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000d9b0:	e0bffd17 	ldw	r2,-12(fp)
1000d9b4:	10c00217 	ldw	r3,8(r2)
1000d9b8:	e0bfff17 	ldw	r2,-4(fp)
1000d9bc:	1887883a 	add	r3,r3,r2
1000d9c0:	e0bffd17 	ldw	r2,-12(fp)
1000d9c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000d9c8:	e0bffd17 	ldw	r2,-12(fp)
1000d9cc:	10c00217 	ldw	r3,8(r2)
1000d9d0:	d0a7ef17 	ldw	r2,-24644(gp)
1000d9d4:	1880032e 	bgeu	r3,r2,1000d9e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000d9d8:	e0bffd17 	ldw	r2,-12(fp)
1000d9dc:	00c00044 	movi	r3,1
1000d9e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000d9e4:	e0bffe17 	ldw	r2,-8(fp)
1000d9e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000d9ec:	e0fffd17 	ldw	r3,-12(fp)
1000d9f0:	d0a01004 	addi	r2,gp,-32704
1000d9f4:	18bfcf1e 	bne	r3,r2,1000d934 <__alt_data_end+0xf800d934>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000d9f8:	0001883a 	nop
}
1000d9fc:	0001883a 	nop
1000da00:	e037883a 	mov	sp,fp
1000da04:	dfc00117 	ldw	ra,4(sp)
1000da08:	df000017 	ldw	fp,0(sp)
1000da0c:	dec00204 	addi	sp,sp,8
1000da10:	f800283a 	ret

1000da14 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000da14:	deffff04 	addi	sp,sp,-4
1000da18:	df000015 	stw	fp,0(sp)
1000da1c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000da20:	000170fa 	wrctl	ienable,zero
}
1000da24:	0001883a 	nop
1000da28:	e037883a 	mov	sp,fp
1000da2c:	df000017 	ldw	fp,0(sp)
1000da30:	dec00104 	addi	sp,sp,4
1000da34:	f800283a 	ret

1000da38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000da38:	defffa04 	addi	sp,sp,-24
1000da3c:	dfc00515 	stw	ra,20(sp)
1000da40:	df000415 	stw	fp,16(sp)
1000da44:	df000404 	addi	fp,sp,16
1000da48:	e13ffe15 	stw	r4,-8(fp)
1000da4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000da50:	e0bfff17 	ldw	r2,-4(fp)
1000da54:	10800017 	ldw	r2,0(r2)
1000da58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000da5c:	e13ffe17 	ldw	r4,-8(fp)
1000da60:	0000cc80 	call	10000cc8 <strlen>
1000da64:	10800044 	addi	r2,r2,1
1000da68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000da6c:	00000d06 	br	1000daa4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000da70:	e0bffc17 	ldw	r2,-16(fp)
1000da74:	10800217 	ldw	r2,8(r2)
1000da78:	e0fffd17 	ldw	r3,-12(fp)
1000da7c:	180d883a 	mov	r6,r3
1000da80:	e17ffe17 	ldw	r5,-8(fp)
1000da84:	1009883a 	mov	r4,r2
1000da88:	000dd7c0 	call	1000dd7c <memcmp>
1000da8c:	1000021e 	bne	r2,zero,1000da98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000da90:	e0bffc17 	ldw	r2,-16(fp)
1000da94:	00000706 	br	1000dab4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000da98:	e0bffc17 	ldw	r2,-16(fp)
1000da9c:	10800017 	ldw	r2,0(r2)
1000daa0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000daa4:	e0fffc17 	ldw	r3,-16(fp)
1000daa8:	e0bfff17 	ldw	r2,-4(fp)
1000daac:	18bff01e 	bne	r3,r2,1000da70 <__alt_data_end+0xf800da70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000dab0:	0005883a 	mov	r2,zero
}
1000dab4:	e037883a 	mov	sp,fp
1000dab8:	dfc00117 	ldw	ra,4(sp)
1000dabc:	df000017 	ldw	fp,0(sp)
1000dac0:	dec00204 	addi	sp,sp,8
1000dac4:	f800283a 	ret

1000dac8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000dac8:	defffb04 	addi	sp,sp,-20
1000dacc:	dfc00415 	stw	ra,16(sp)
1000dad0:	df000315 	stw	fp,12(sp)
1000dad4:	df000304 	addi	fp,sp,12
1000dad8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000dadc:	d0a00917 	ldw	r2,-32732(gp)
1000dae0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000dae4:	00003106 	br	1000dbac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1000dae8:	e0bffd17 	ldw	r2,-12(fp)
1000daec:	10800217 	ldw	r2,8(r2)
1000daf0:	1009883a 	mov	r4,r2
1000daf4:	0000cc80 	call	10000cc8 <strlen>
1000daf8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000dafc:	e0bffd17 	ldw	r2,-12(fp)
1000db00:	10c00217 	ldw	r3,8(r2)
1000db04:	e0bffe17 	ldw	r2,-8(fp)
1000db08:	10bfffc4 	addi	r2,r2,-1
1000db0c:	1885883a 	add	r2,r3,r2
1000db10:	10800003 	ldbu	r2,0(r2)
1000db14:	10803fcc 	andi	r2,r2,255
1000db18:	1080201c 	xori	r2,r2,128
1000db1c:	10bfe004 	addi	r2,r2,-128
1000db20:	10800bd8 	cmpnei	r2,r2,47
1000db24:	1000031e 	bne	r2,zero,1000db34 <alt_find_file+0x6c>
    {
      len -= 1;
1000db28:	e0bffe17 	ldw	r2,-8(fp)
1000db2c:	10bfffc4 	addi	r2,r2,-1
1000db30:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000db34:	e0bffe17 	ldw	r2,-8(fp)
1000db38:	e0ffff17 	ldw	r3,-4(fp)
1000db3c:	1885883a 	add	r2,r3,r2
1000db40:	10800003 	ldbu	r2,0(r2)
1000db44:	10803fcc 	andi	r2,r2,255
1000db48:	1080201c 	xori	r2,r2,128
1000db4c:	10bfe004 	addi	r2,r2,-128
1000db50:	10800be0 	cmpeqi	r2,r2,47
1000db54:	1000081e 	bne	r2,zero,1000db78 <alt_find_file+0xb0>
1000db58:	e0bffe17 	ldw	r2,-8(fp)
1000db5c:	e0ffff17 	ldw	r3,-4(fp)
1000db60:	1885883a 	add	r2,r3,r2
1000db64:	10800003 	ldbu	r2,0(r2)
1000db68:	10803fcc 	andi	r2,r2,255
1000db6c:	1080201c 	xori	r2,r2,128
1000db70:	10bfe004 	addi	r2,r2,-128
1000db74:	10000a1e 	bne	r2,zero,1000dba0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1000db78:	e0bffd17 	ldw	r2,-12(fp)
1000db7c:	10800217 	ldw	r2,8(r2)
1000db80:	e0fffe17 	ldw	r3,-8(fp)
1000db84:	180d883a 	mov	r6,r3
1000db88:	e17fff17 	ldw	r5,-4(fp)
1000db8c:	1009883a 	mov	r4,r2
1000db90:	000dd7c0 	call	1000dd7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000db94:	1000021e 	bne	r2,zero,1000dba0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000db98:	e0bffd17 	ldw	r2,-12(fp)
1000db9c:	00000706 	br	1000dbbc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1000dba0:	e0bffd17 	ldw	r2,-12(fp)
1000dba4:	10800017 	ldw	r2,0(r2)
1000dba8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000dbac:	e0fffd17 	ldw	r3,-12(fp)
1000dbb0:	d0a00904 	addi	r2,gp,-32732
1000dbb4:	18bfcc1e 	bne	r3,r2,1000dae8 <__alt_data_end+0xf800dae8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000dbb8:	0005883a 	mov	r2,zero
}
1000dbbc:	e037883a 	mov	sp,fp
1000dbc0:	dfc00117 	ldw	ra,4(sp)
1000dbc4:	df000017 	ldw	fp,0(sp)
1000dbc8:	dec00204 	addi	sp,sp,8
1000dbcc:	f800283a 	ret

1000dbd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000dbd0:	defffa04 	addi	sp,sp,-24
1000dbd4:	dfc00515 	stw	ra,20(sp)
1000dbd8:	df000415 	stw	fp,16(sp)
1000dbdc:	dc000315 	stw	r16,12(sp)
1000dbe0:	df000404 	addi	fp,sp,16
1000dbe4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000dbe8:	00bffa04 	movi	r2,-24
1000dbec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000dbf0:	e03ffc15 	stw	zero,-16(fp)
1000dbf4:	00001d06 	br	1000dc6c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1000dbf8:	04040074 	movhi	r16,4097
1000dbfc:	84006404 	addi	r16,r16,400
1000dc00:	e0bffc17 	ldw	r2,-16(fp)
1000dc04:	01400304 	movi	r5,12
1000dc08:	1009883a 	mov	r4,r2
1000dc0c:	0000b600 	call	10000b60 <__mulsi3>
1000dc10:	8085883a 	add	r2,r16,r2
1000dc14:	10800017 	ldw	r2,0(r2)
1000dc18:	1000111e 	bne	r2,zero,1000dc60 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
1000dc1c:	04040074 	movhi	r16,4097
1000dc20:	84006404 	addi	r16,r16,400
1000dc24:	e0bffc17 	ldw	r2,-16(fp)
1000dc28:	01400304 	movi	r5,12
1000dc2c:	1009883a 	mov	r4,r2
1000dc30:	0000b600 	call	10000b60 <__mulsi3>
1000dc34:	8085883a 	add	r2,r16,r2
1000dc38:	e0fffe17 	ldw	r3,-8(fp)
1000dc3c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000dc40:	d0e00d17 	ldw	r3,-32716(gp)
1000dc44:	e0bffc17 	ldw	r2,-16(fp)
1000dc48:	1880020e 	bge	r3,r2,1000dc54 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
1000dc4c:	e0bffc17 	ldw	r2,-16(fp)
1000dc50:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
1000dc54:	e0bffc17 	ldw	r2,-16(fp)
1000dc58:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000dc5c:	00000606 	br	1000dc78 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000dc60:	e0bffc17 	ldw	r2,-16(fp)
1000dc64:	10800044 	addi	r2,r2,1
1000dc68:	e0bffc15 	stw	r2,-16(fp)
1000dc6c:	e0bffc17 	ldw	r2,-16(fp)
1000dc70:	10800810 	cmplti	r2,r2,32
1000dc74:	103fe01e 	bne	r2,zero,1000dbf8 <__alt_data_end+0xf800dbf8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000dc78:	e0bffd17 	ldw	r2,-12(fp)
}
1000dc7c:	e6ffff04 	addi	sp,fp,-4
1000dc80:	dfc00217 	ldw	ra,8(sp)
1000dc84:	df000117 	ldw	fp,4(sp)
1000dc88:	dc000017 	ldw	r16,0(sp)
1000dc8c:	dec00304 	addi	sp,sp,12
1000dc90:	f800283a 	ret

1000dc94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000dc94:	defffe04 	addi	sp,sp,-8
1000dc98:	df000115 	stw	fp,4(sp)
1000dc9c:	df000104 	addi	fp,sp,4
1000dca0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000dca4:	e0bfff17 	ldw	r2,-4(fp)
1000dca8:	10bffe84 	addi	r2,r2,-6
1000dcac:	10c00428 	cmpgeui	r3,r2,16
1000dcb0:	18001a1e 	bne	r3,zero,1000dd1c <alt_exception_cause_generated_bad_addr+0x88>
1000dcb4:	100690ba 	slli	r3,r2,2
1000dcb8:	00840074 	movhi	r2,4097
1000dcbc:	10b73304 	addi	r2,r2,-9012
1000dcc0:	1885883a 	add	r2,r3,r2
1000dcc4:	10800017 	ldw	r2,0(r2)
1000dcc8:	1000683a 	jmp	r2
1000dccc:	1000dd0c 	andi	zero,r2,884
1000dcd0:	1000dd0c 	andi	zero,r2,884
1000dcd4:	1000dd1c 	xori	zero,r2,884
1000dcd8:	1000dd1c 	xori	zero,r2,884
1000dcdc:	1000dd1c 	xori	zero,r2,884
1000dce0:	1000dd0c 	andi	zero,r2,884
1000dce4:	1000dd14 	ori	zero,r2,884
1000dce8:	1000dd1c 	xori	zero,r2,884
1000dcec:	1000dd0c 	andi	zero,r2,884
1000dcf0:	1000dd0c 	andi	zero,r2,884
1000dcf4:	1000dd1c 	xori	zero,r2,884
1000dcf8:	1000dd0c 	andi	zero,r2,884
1000dcfc:	1000dd14 	ori	zero,r2,884
1000dd00:	1000dd1c 	xori	zero,r2,884
1000dd04:	1000dd1c 	xori	zero,r2,884
1000dd08:	1000dd0c 	andi	zero,r2,884
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000dd0c:	00800044 	movi	r2,1
1000dd10:	00000306 	br	1000dd20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000dd14:	0005883a 	mov	r2,zero
1000dd18:	00000106 	br	1000dd20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000dd1c:	0005883a 	mov	r2,zero
  }
}
1000dd20:	e037883a 	mov	sp,fp
1000dd24:	df000017 	ldw	fp,0(sp)
1000dd28:	dec00104 	addi	sp,sp,4
1000dd2c:	f800283a 	ret

1000dd30 <atexit>:
1000dd30:	200b883a 	mov	r5,r4
1000dd34:	000f883a 	mov	r7,zero
1000dd38:	000d883a 	mov	r6,zero
1000dd3c:	0009883a 	mov	r4,zero
1000dd40:	000ddf81 	jmpi	1000ddf8 <__register_exitproc>

1000dd44 <exit>:
1000dd44:	defffe04 	addi	sp,sp,-8
1000dd48:	000b883a 	mov	r5,zero
1000dd4c:	dc000015 	stw	r16,0(sp)
1000dd50:	dfc00115 	stw	ra,4(sp)
1000dd54:	2021883a 	mov	r16,r4
1000dd58:	000df100 	call	1000df10 <__call_exitprocs>
1000dd5c:	00840074 	movhi	r2,4097
1000dd60:	1080c704 	addi	r2,r2,796
1000dd64:	11000017 	ldw	r4,0(r2)
1000dd68:	20800f17 	ldw	r2,60(r4)
1000dd6c:	10000126 	beq	r2,zero,1000dd74 <exit+0x30>
1000dd70:	103ee83a 	callr	r2
1000dd74:	8009883a 	mov	r4,r16
1000dd78:	000e0900 	call	1000e090 <_exit>

1000dd7c <memcmp>:
1000dd7c:	01c000c4 	movi	r7,3
1000dd80:	3980192e 	bgeu	r7,r6,1000dde8 <memcmp+0x6c>
1000dd84:	2144b03a 	or	r2,r4,r5
1000dd88:	11c4703a 	and	r2,r2,r7
1000dd8c:	10000f26 	beq	r2,zero,1000ddcc <memcmp+0x50>
1000dd90:	20800003 	ldbu	r2,0(r4)
1000dd94:	28c00003 	ldbu	r3,0(r5)
1000dd98:	10c0151e 	bne	r2,r3,1000ddf0 <memcmp+0x74>
1000dd9c:	31bfff84 	addi	r6,r6,-2
1000dda0:	01ffffc4 	movi	r7,-1
1000dda4:	00000406 	br	1000ddb8 <memcmp+0x3c>
1000dda8:	20800003 	ldbu	r2,0(r4)
1000ddac:	28c00003 	ldbu	r3,0(r5)
1000ddb0:	31bfffc4 	addi	r6,r6,-1
1000ddb4:	10c00e1e 	bne	r2,r3,1000ddf0 <memcmp+0x74>
1000ddb8:	21000044 	addi	r4,r4,1
1000ddbc:	29400044 	addi	r5,r5,1
1000ddc0:	31fff91e 	bne	r6,r7,1000dda8 <__alt_data_end+0xf800dda8>
1000ddc4:	0005883a 	mov	r2,zero
1000ddc8:	f800283a 	ret
1000ddcc:	20c00017 	ldw	r3,0(r4)
1000ddd0:	28800017 	ldw	r2,0(r5)
1000ddd4:	18bfee1e 	bne	r3,r2,1000dd90 <__alt_data_end+0xf800dd90>
1000ddd8:	31bfff04 	addi	r6,r6,-4
1000dddc:	21000104 	addi	r4,r4,4
1000dde0:	29400104 	addi	r5,r5,4
1000dde4:	39bff936 	bltu	r7,r6,1000ddcc <__alt_data_end+0xf800ddcc>
1000dde8:	303fe91e 	bne	r6,zero,1000dd90 <__alt_data_end+0xf800dd90>
1000ddec:	003ff506 	br	1000ddc4 <__alt_data_end+0xf800ddc4>
1000ddf0:	10c5c83a 	sub	r2,r2,r3
1000ddf4:	f800283a 	ret

1000ddf8 <__register_exitproc>:
1000ddf8:	defffa04 	addi	sp,sp,-24
1000ddfc:	dc000315 	stw	r16,12(sp)
1000de00:	04040074 	movhi	r16,4097
1000de04:	8400c704 	addi	r16,r16,796
1000de08:	80c00017 	ldw	r3,0(r16)
1000de0c:	dc400415 	stw	r17,16(sp)
1000de10:	dfc00515 	stw	ra,20(sp)
1000de14:	18805217 	ldw	r2,328(r3)
1000de18:	2023883a 	mov	r17,r4
1000de1c:	10003726 	beq	r2,zero,1000defc <__register_exitproc+0x104>
1000de20:	10c00117 	ldw	r3,4(r2)
1000de24:	010007c4 	movi	r4,31
1000de28:	20c00e16 	blt	r4,r3,1000de64 <__register_exitproc+0x6c>
1000de2c:	1a000044 	addi	r8,r3,1
1000de30:	8800221e 	bne	r17,zero,1000debc <__register_exitproc+0xc4>
1000de34:	18c00084 	addi	r3,r3,2
1000de38:	18c7883a 	add	r3,r3,r3
1000de3c:	18c7883a 	add	r3,r3,r3
1000de40:	12000115 	stw	r8,4(r2)
1000de44:	10c7883a 	add	r3,r2,r3
1000de48:	19400015 	stw	r5,0(r3)
1000de4c:	0005883a 	mov	r2,zero
1000de50:	dfc00517 	ldw	ra,20(sp)
1000de54:	dc400417 	ldw	r17,16(sp)
1000de58:	dc000317 	ldw	r16,12(sp)
1000de5c:	dec00604 	addi	sp,sp,24
1000de60:	f800283a 	ret
1000de64:	00800034 	movhi	r2,0
1000de68:	10800004 	addi	r2,r2,0
1000de6c:	10002626 	beq	r2,zero,1000df08 <__register_exitproc+0x110>
1000de70:	01006404 	movi	r4,400
1000de74:	d9400015 	stw	r5,0(sp)
1000de78:	d9800115 	stw	r6,4(sp)
1000de7c:	d9c00215 	stw	r7,8(sp)
1000de80:	00000000 	call	10000000 <__alt_mem_sdram>
1000de84:	d9400017 	ldw	r5,0(sp)
1000de88:	d9800117 	ldw	r6,4(sp)
1000de8c:	d9c00217 	ldw	r7,8(sp)
1000de90:	10001d26 	beq	r2,zero,1000df08 <__register_exitproc+0x110>
1000de94:	81000017 	ldw	r4,0(r16)
1000de98:	10000115 	stw	zero,4(r2)
1000de9c:	02000044 	movi	r8,1
1000dea0:	22405217 	ldw	r9,328(r4)
1000dea4:	0007883a 	mov	r3,zero
1000dea8:	12400015 	stw	r9,0(r2)
1000deac:	20805215 	stw	r2,328(r4)
1000deb0:	10006215 	stw	zero,392(r2)
1000deb4:	10006315 	stw	zero,396(r2)
1000deb8:	883fde26 	beq	r17,zero,1000de34 <__alt_data_end+0xf800de34>
1000debc:	18c9883a 	add	r4,r3,r3
1000dec0:	2109883a 	add	r4,r4,r4
1000dec4:	1109883a 	add	r4,r2,r4
1000dec8:	21802215 	stw	r6,136(r4)
1000decc:	01800044 	movi	r6,1
1000ded0:	12406217 	ldw	r9,392(r2)
1000ded4:	30cc983a 	sll	r6,r6,r3
1000ded8:	4992b03a 	or	r9,r9,r6
1000dedc:	12406215 	stw	r9,392(r2)
1000dee0:	21c04215 	stw	r7,264(r4)
1000dee4:	01000084 	movi	r4,2
1000dee8:	893fd21e 	bne	r17,r4,1000de34 <__alt_data_end+0xf800de34>
1000deec:	11006317 	ldw	r4,396(r2)
1000def0:	218cb03a 	or	r6,r4,r6
1000def4:	11806315 	stw	r6,396(r2)
1000def8:	003fce06 	br	1000de34 <__alt_data_end+0xf800de34>
1000defc:	18805304 	addi	r2,r3,332
1000df00:	18805215 	stw	r2,328(r3)
1000df04:	003fc606 	br	1000de20 <__alt_data_end+0xf800de20>
1000df08:	00bfffc4 	movi	r2,-1
1000df0c:	003fd006 	br	1000de50 <__alt_data_end+0xf800de50>

1000df10 <__call_exitprocs>:
1000df10:	defff504 	addi	sp,sp,-44
1000df14:	df000915 	stw	fp,36(sp)
1000df18:	dd400615 	stw	r21,24(sp)
1000df1c:	dc800315 	stw	r18,12(sp)
1000df20:	dfc00a15 	stw	ra,40(sp)
1000df24:	ddc00815 	stw	r23,32(sp)
1000df28:	dd800715 	stw	r22,28(sp)
1000df2c:	dd000515 	stw	r20,20(sp)
1000df30:	dcc00415 	stw	r19,16(sp)
1000df34:	dc400215 	stw	r17,8(sp)
1000df38:	dc000115 	stw	r16,4(sp)
1000df3c:	d9000015 	stw	r4,0(sp)
1000df40:	2839883a 	mov	fp,r5
1000df44:	04800044 	movi	r18,1
1000df48:	057fffc4 	movi	r21,-1
1000df4c:	00840074 	movhi	r2,4097
1000df50:	1080c704 	addi	r2,r2,796
1000df54:	12000017 	ldw	r8,0(r2)
1000df58:	45005217 	ldw	r20,328(r8)
1000df5c:	44c05204 	addi	r19,r8,328
1000df60:	a0001c26 	beq	r20,zero,1000dfd4 <__call_exitprocs+0xc4>
1000df64:	a0800117 	ldw	r2,4(r20)
1000df68:	15ffffc4 	addi	r23,r2,-1
1000df6c:	b8000d16 	blt	r23,zero,1000dfa4 <__call_exitprocs+0x94>
1000df70:	14000044 	addi	r16,r2,1
1000df74:	8421883a 	add	r16,r16,r16
1000df78:	8421883a 	add	r16,r16,r16
1000df7c:	84402004 	addi	r17,r16,128
1000df80:	a463883a 	add	r17,r20,r17
1000df84:	a421883a 	add	r16,r20,r16
1000df88:	e0001e26 	beq	fp,zero,1000e004 <__call_exitprocs+0xf4>
1000df8c:	80804017 	ldw	r2,256(r16)
1000df90:	e0801c26 	beq	fp,r2,1000e004 <__call_exitprocs+0xf4>
1000df94:	bdffffc4 	addi	r23,r23,-1
1000df98:	843fff04 	addi	r16,r16,-4
1000df9c:	8c7fff04 	addi	r17,r17,-4
1000dfa0:	bd7ff91e 	bne	r23,r21,1000df88 <__alt_data_end+0xf800df88>
1000dfa4:	00800034 	movhi	r2,0
1000dfa8:	10800004 	addi	r2,r2,0
1000dfac:	10000926 	beq	r2,zero,1000dfd4 <__call_exitprocs+0xc4>
1000dfb0:	a0800117 	ldw	r2,4(r20)
1000dfb4:	1000301e 	bne	r2,zero,1000e078 <__call_exitprocs+0x168>
1000dfb8:	a0800017 	ldw	r2,0(r20)
1000dfbc:	10003226 	beq	r2,zero,1000e088 <__call_exitprocs+0x178>
1000dfc0:	a009883a 	mov	r4,r20
1000dfc4:	98800015 	stw	r2,0(r19)
1000dfc8:	00000000 	call	10000000 <__alt_mem_sdram>
1000dfcc:	9d000017 	ldw	r20,0(r19)
1000dfd0:	a03fe41e 	bne	r20,zero,1000df64 <__alt_data_end+0xf800df64>
1000dfd4:	dfc00a17 	ldw	ra,40(sp)
1000dfd8:	df000917 	ldw	fp,36(sp)
1000dfdc:	ddc00817 	ldw	r23,32(sp)
1000dfe0:	dd800717 	ldw	r22,28(sp)
1000dfe4:	dd400617 	ldw	r21,24(sp)
1000dfe8:	dd000517 	ldw	r20,20(sp)
1000dfec:	dcc00417 	ldw	r19,16(sp)
1000dff0:	dc800317 	ldw	r18,12(sp)
1000dff4:	dc400217 	ldw	r17,8(sp)
1000dff8:	dc000117 	ldw	r16,4(sp)
1000dffc:	dec00b04 	addi	sp,sp,44
1000e000:	f800283a 	ret
1000e004:	a0800117 	ldw	r2,4(r20)
1000e008:	80c00017 	ldw	r3,0(r16)
1000e00c:	10bfffc4 	addi	r2,r2,-1
1000e010:	15c01426 	beq	r2,r23,1000e064 <__call_exitprocs+0x154>
1000e014:	80000015 	stw	zero,0(r16)
1000e018:	183fde26 	beq	r3,zero,1000df94 <__alt_data_end+0xf800df94>
1000e01c:	95c8983a 	sll	r4,r18,r23
1000e020:	a0806217 	ldw	r2,392(r20)
1000e024:	a5800117 	ldw	r22,4(r20)
1000e028:	2084703a 	and	r2,r4,r2
1000e02c:	10000b26 	beq	r2,zero,1000e05c <__call_exitprocs+0x14c>
1000e030:	a0806317 	ldw	r2,396(r20)
1000e034:	2088703a 	and	r4,r4,r2
1000e038:	20000c1e 	bne	r4,zero,1000e06c <__call_exitprocs+0x15c>
1000e03c:	89400017 	ldw	r5,0(r17)
1000e040:	d9000017 	ldw	r4,0(sp)
1000e044:	183ee83a 	callr	r3
1000e048:	a0800117 	ldw	r2,4(r20)
1000e04c:	15bfbf1e 	bne	r2,r22,1000df4c <__alt_data_end+0xf800df4c>
1000e050:	98800017 	ldw	r2,0(r19)
1000e054:	153fcf26 	beq	r2,r20,1000df94 <__alt_data_end+0xf800df94>
1000e058:	003fbc06 	br	1000df4c <__alt_data_end+0xf800df4c>
1000e05c:	183ee83a 	callr	r3
1000e060:	003ff906 	br	1000e048 <__alt_data_end+0xf800e048>
1000e064:	a5c00115 	stw	r23,4(r20)
1000e068:	003feb06 	br	1000e018 <__alt_data_end+0xf800e018>
1000e06c:	89000017 	ldw	r4,0(r17)
1000e070:	183ee83a 	callr	r3
1000e074:	003ff406 	br	1000e048 <__alt_data_end+0xf800e048>
1000e078:	a0800017 	ldw	r2,0(r20)
1000e07c:	a027883a 	mov	r19,r20
1000e080:	1029883a 	mov	r20,r2
1000e084:	003fb606 	br	1000df60 <__alt_data_end+0xf800df60>
1000e088:	0005883a 	mov	r2,zero
1000e08c:	003ffb06 	br	1000e07c <__alt_data_end+0xf800e07c>

1000e090 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000e090:	defffd04 	addi	sp,sp,-12
1000e094:	df000215 	stw	fp,8(sp)
1000e098:	df000204 	addi	fp,sp,8
1000e09c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000e0a0:	0001883a 	nop
1000e0a4:	e0bfff17 	ldw	r2,-4(fp)
1000e0a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000e0ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000e0b0:	10000226 	beq	r2,zero,1000e0bc <_exit+0x2c>
    ALT_SIM_FAIL();
1000e0b4:	002af070 	cmpltui	zero,zero,43969
1000e0b8:	00000106 	br	1000e0c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1000e0bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000e0c0:	003fff06 	br	1000e0c0 <__alt_data_end+0xf800e0c0>
