module ripple_adder
(
    input   logic[7:0]     A,
    input   logic[7:0]     B,
	 input	logic		 		sub,
    output  logic[8:0]     Sum
);

	logic C0, C1, C2, C3, C4;
	logic[8:0] B1;
	logic[8:0] A1;
	assign B1 = B^{8{sub}};
	assign A1 = {A[7],A};
	threebit_ripple_adder FRA0(.x(A1[2:0]),   .y(B1[2:0]),   .cin(sub),  .s(Sum[2:0]),   .cout(C0));
	threebit_ripple_adder FRA1(.x(A1[5:3]),   .y(B1[5:3]),   .cin(C0), .s(Sum[5:3]),   .cout(C1));
	threebit_ripple_adder FRA2(.x(A1[8:6]),   .y({B1[7],B1[7:6]}),   .cin(C1), .s(Sum[8:6]),   .cout(C2)); 
endmodule


module threebit_ripple_adder
(
	input logic[2:0] x,
	input logic[2:0] y,
	input logic cin,
	output logic [2:0] s,
	output logic cout
);
	logic c0, c1;
	full_adder fa0(.x(x[0]), .y(y[0]), .cin(cin), .s(s[0]), .cout(c0));
	full_adder fa1(.x(x[1]), .y(y[1]), .cin(c0),  .s(s[1]), .cout(c1));
	full_adder fa2(.x(x[2]), .y(y[2]), .cin(c1),  .s(s[2]), .cout(cout));		

endmodule


module full_adder
(
	input x,
	input y,
	input cin,
	output logic s,
	output logic cout
);
	assign s = x^y^cin;
	assign cout = (x&y) | (y&cin) | (cin&x);

endmodule
